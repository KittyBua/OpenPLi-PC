diff -ruN o/IPTVPlayer/components/iconmenager.py pc/IPTVPlayer/components/iconmenager.py
--- o/IPTVPlayer/components/iconmenager.py	2021-05-10 11:28:24.944360252 +0300
+++ pc/IPTVPlayer/components/iconmenager.py	2021-05-10 11:47:03.821841296 +0300
@@ -28,7 +28,7 @@
 
 
 #config.plugins.iptvplayer.showcover (true|false)
-#config.plugins.iptvplayer.SciezkaCache = ConfigText(default = "/hdd/IPTVCache")
+#config.plugins.iptvplayer.SciezkaCache = ConfigText(default = "/media/hdd/IPTVCache")
 
 class IconMenager:
     HEADER = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36', 'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate'}
@@ -273,7 +273,7 @@
             domain = urlparser.getDomain(img_url, onlyDomain=True)
             if domain.startswith("www."):
                 domain = domain[4:]
-            params_cfad['cookiefile'] = '/hdd/IPTVCache//cookies/{0}.cookie'.format(domain)
+            params_cfad['cookiefile'] = '/media/hdd/IPTVCache//cookies/{0}.cookie'.format(domain)
 
         else:
             params_cfad = {}
diff -ruN o/IPTVPlayer/components/iptvconfigmenu.py pc/IPTVPlayer/components/iptvconfigmenu.py
--- o/IPTVPlayer/components/iptvconfigmenu.py	2021-05-10 11:28:24.944360252 +0300
+++ pc/IPTVPlayer/components/iptvconfigmenu.py	2021-05-10 11:45:40.408111495 +0300
@@ -61,7 +61,7 @@
 config.plugins.iptvplayer.showinMainMenu = ConfigYesNo(default=False)
 config.plugins.iptvplayer.ListaGraficzna = ConfigYesNo(default=True)
 config.plugins.iptvplayer.group_hosts = ConfigYesNo(default=True)
-config.plugins.iptvplayer.NaszaSciezka = ConfigDirectory(default="/hdd/movie/") #, fixed_size = False)
+config.plugins.iptvplayer.NaszaSciezka = ConfigDirectory(default="/media/hdd/movie/") #, fixed_size = False)
 config.plugins.iptvplayer.bufferingPath = ConfigDirectory(default=config.plugins.iptvplayer.NaszaSciezka.value) #, fixed_size = False)
 config.plugins.iptvplayer.buforowanie = ConfigYesNo(default=False)
 config.plugins.iptvplayer.buforowanie_m3u8 = ConfigYesNo(default=True)
@@ -144,7 +144,7 @@
 
 # end with buffering mode players
 
-config.plugins.iptvplayer.SciezkaCache = ConfigDirectory(default="/hdd/IPTVCache/") #, fixed_size = False)
+config.plugins.iptvplayer.SciezkaCache = ConfigDirectory(default="/media/hdd/IPTVCache/") #, fixed_size = False)
 config.plugins.iptvplayer.NaszaTMP = ConfigDirectory(default="/tmp/") #, fixed_size = False)
 config.plugins.iptvplayer.ZablokujWMV = ConfigYesNo(default=True)
 
diff -ruN o/IPTVPlayer/components/iptvplayerwidget.py pc/IPTVPlayer/components/iptvplayerwidget.py
--- o/IPTVPlayer/components/iptvplayerwidget.py	2021-05-10 11:28:24.946360058 +0300
+++ pc/IPTVPlayer/components/iptvplayerwidget.py	2021-05-10 11:51:58.850563220 +0300
@@ -61,7 +61,6 @@
 
 from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, IPTVPlayerNeedInit, GetIPTVPlayerLastHostError, GetIPTVNotify, GetIPTVSleep
 
-from Plugins.Extensions.IPTVPlayer.setup.iptvsetupwidget import IPTVSetupMainWidget
 from Plugins.Extensions.IPTVPlayer.components.iptvplayer import IPTVStandardMoviePlayer, IPTVMiniMoviePlayer
 from Plugins.Extensions.IPTVPlayer.components.iptvextmovieplayer import IPTVExtMoviePlayer
 from Plugins.Extensions.IPTVPlayer.components.iptvpictureplayer import IPTVPicturePlayerWidget
@@ -1213,10 +1212,6 @@
             self.displayGroupsList.append((item.title, item.name))
         self.displayGroupsList.append((_('All'), 'all'))
         self.displayGroupsList.append((_("Configuration"), "config"))
-
-        if config.plugins.iptvplayer.AktualizacjaWmenu.value == True:
-            self.displayGroupsList.append((_("Update"), "update"))
-
         self.newDisplayGroupsList = []
         self.session.openWithCallback(self.selectGroupCallback, PlayerSelectorWidget, inList=self.displayGroupsList, outList=self.newDisplayGroupsList, numOfLockedItems=self.getNumOfSpecialItems(self.displayGroupsList), groupName='selectgroup')
 
@@ -2047,8 +2042,6 @@
 
     def configCallback(self):
         if IPTVPlayerNeedInit():
-            self.session.openWithCallback(self.selectHost, IPTVSetupMainWidget, True)
-        else:
             self.askUpdateAvailable(self.selectHost)
 
     def randomizePlayableItems(self, randomize=True):
@@ -2308,7 +2301,7 @@
         if self.checkWrongImage:
             self.checkWrongImage = False
             try:
-                if os_path.isfile(GetExtensionsDir('/iPabUpdater/__init__.pyo')):
+                if os_path.isfile(GetExtensionsDir('/iPabUpdater/__init__.pyc')):
                     message = ["WARNING (phase 1/3)"]
                     message.append("Because of blocking part of functionality of the IPTVPlayer by http://ipab.tv/ developer your image was blacklisted.")
                     message.append("Please be also informed that users of http://ipab.tv/ will NOT get support, due to same reason.")
diff -ruN o/IPTVPlayer/hosts/hosturllist.py pc/IPTVPlayer/hosts/hosturllist.py
--- o/IPTVPlayer/hosts/hosturllist.py	2021-05-10 11:28:24.972357531 +0300
+++ pc/IPTVPlayer/hosts/hosturllist.py	2021-05-10 11:41:11.249849491 +0300
@@ -22,7 +22,7 @@
 ###################################################
 # Config options for HOST
 ###################################################
-config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/hdd/")
+config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/media/hdd/")
 config.plugins.iptvplayer.grupujurllist = ConfigYesNo(default=True)
 config.plugins.iptvplayer.sortuj = ConfigYesNo(default=True)
 
diff -ruN o/IPTVPlayer/hosts/hostXXX.py pc/IPTVPlayer/hosts/hostXXX.py
--- o/IPTVPlayer/hosts/hostXXX.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostXXX.py	2021-05-10 11:38:33.127795296 +0300
@@ -0,0 +1,11752 @@
+# -*- coding: utf-8 -*-
+ 
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.ihost import IHost, CDisplayListItem, RetHost, CUrlItem
+import Plugins.Extensions.IPTVPlayer.libs.pCommon as pCommon
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, CSearchHistoryHelper, CSelOneLink, GetTmpDir, GetCookieDir, iptv_system, GetPluginDir, byteify, rm
+from Plugins.Extensions.IPTVPlayer.iptvdm.iptvdh import DMHelper
+from Plugins.Extensions.IPTVPlayer.libs.urlparser import urlparser 
+from Plugins.Extensions.IPTVPlayer.tools.iptvfilehost import IPTVFileHost
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, SetIPTVPlayerLastHostError, GetIPTVSleep, GetIPTVNotify
+from Plugins.Extensions.IPTVPlayer.libs.youtube_dl.utils import clean_html 
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import decorateUrl, getDirectM3U8Playlist, unpackJSPlayerParams, TEAMCASTPL_decryptPlayerParams
+###################################################
+# FOREIGN import
+###################################################
+import re, urllib, urllib2, base64, math, hashlib, random
+try:
+    import simplejson
+except:
+    import json as simplejson   
+from Tools.Directories import resolveFilename, SCOPE_PLUGINS
+from Components.config import config, ConfigSelection, ConfigYesNo, ConfigText, ConfigInteger, getConfigListEntry, ConfigPIN, ConfigDirectory
+from time import sleep, time as time_time
+from datetime import datetime
+from os import remove as os_remove, path as os_path, system as os_system
+import urlparse
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Plugins.Extensions.IPTVPlayer.tools.e2ijs import js_execute
+from Screens.MessageBox import MessageBox
+from Plugins.Extensions.IPTVPlayer.components.asynccall import MainSessionWrapper
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.xxxwymagajpin = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxlist = ConfigDirectory(default = "/media/hdd/")
+config.plugins.iptvplayer.xxxsortuj = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxsearch = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxsortmfc = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxsortall = ConfigYesNo(default = True)
+config.plugins.iptvplayer.camsoda = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.xhamstertag = ConfigYesNo(default = False)
+config.plugins.iptvplayer.chaturbate = ConfigSelection(default="", choices = [("",_("all")), ("female/",_("female")), ("couple/",_("couple")), ("trans/",_("trans")), ("male/",_("male"))])
+config.plugins.iptvplayer.cam4 = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.fotka = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.xxxupdate = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxzbiornik = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxx4k = ConfigYesNo(default = False)
+config.plugins.iptvplayer.yourporn = ConfigInteger(4, (1, 99))  
+config.plugins.iptvplayer.beeg = ConfigYesNo(default = True)
+
+def GetConfigList():
+    optionList = []
+    optionList.append( getConfigListEntry(_("Pin protection for plugin")+" :", config.plugins.iptvplayer.xxxwymagajpin ) )
+    optionList.append( getConfigListEntry(_("Path to xxxlist.txt :"), config.plugins.iptvplayer.xxxlist) )
+    optionList.append( getConfigListEntry(_("Sort xxxlist :"), config.plugins.iptvplayer.xxxsortuj) )
+    optionList.append( getConfigListEntry(_("Sort Myfreecams :"), config.plugins.iptvplayer.xxxsortmfc) )
+    optionList.append( getConfigListEntry(_("Global search :"), config.plugins.iptvplayer.xxxsearch) )
+    optionList.append( getConfigListEntry(_("Global sort :"), config.plugins.iptvplayer.xxxsortall) )
+    optionList.append( getConfigListEntry(_("CHATURBATE preferences :"), config.plugins.iptvplayer.chaturbate) )
+    #optionList.append( getConfigListEntry(_("Cam4 stream :"), config.plugins.iptvplayer.cam4) )
+    #optionList.append( getConfigListEntry(_("Camsoda stream :"), config.plugins.iptvplayer.camsoda) )
+    #optionList.append( getConfigListEntry(_("Fotka.pl stream :"), config.plugins.iptvplayer.fotka) )
+    optionList.append( getConfigListEntry(_("Add tags to XHAMSTER :"), config.plugins.iptvplayer.xhamstertag) )
+    optionList.append( getConfigListEntry(_("Show Profiles in ZBIORNIK MINI :"), config.plugins.iptvplayer.xxxzbiornik) )
+    optionList.append( getConfigListEntry(_("YOURPORN Server :"), config.plugins.iptvplayer.yourporn) )
+    optionList.append( getConfigListEntry(_("Show changelog :"), config.plugins.iptvplayer.xxxupdate) )
+    optionList.append( getConfigListEntry(_("BEEG FullHD :"), config.plugins.iptvplayer.beeg) )
+    optionList.append( getConfigListEntry(_("Playback UHD :"), config.plugins.iptvplayer.xxx4k) )
+
+    return optionList
+###################################################
+
+###################################################
+# Title of HOST
+###################################################
+def gettytul():
+    return 'XXX'
+
+class IPTVHost(IHost):
+    LOGO_NAME = 'XXXlogo.png'
+    PATH_TO_LOGO = resolveFilename(SCOPE_PLUGINS, 'Extensions/IPTVPlayer/icons/logos/' + LOGO_NAME )
+
+    def __init__(self):
+        printDBG( "init begin" )
+        self.host = Host()
+        self.prevIndex = []
+        self.currList = []
+        self.prevList = []
+        printDBG( "init end" )
+        
+    def isProtectedByPinCode(self):
+        return config.plugins.iptvplayer.xxxwymagajpin.value
+    
+    def getLogoPath(self):  
+        return RetHost(RetHost.OK, value = [self.PATH_TO_LOGO])
+
+    def getInitList(self):
+        printDBG( "getInitList begin" )
+        self.prevIndex = []
+        self.currList = self.host.getInitList()
+        self.host.setCurrList(self.currList)
+        self.prevList = []
+        printDBG( "getInitList end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getListForItem(self, Index = 0, refresh = 0, selItem = None):
+        printDBG( "getListForItem begin" )
+        self.prevIndex.append(Index)
+        self.prevList.append(self.currList)
+        self.currList = self.host.getListForItem(Index, refresh, selItem)
+        printDBG( "getListForItem end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getPrevList(self, refresh = 0):
+        printDBG( "getPrevList begin" )
+        if(len(self.prevList) > 0):
+            self.prevIndex.pop()
+            self.currList = self.prevList.pop()
+            self.host.setCurrList(self.currList)
+            printDBG( "getPrevList end OK" )
+            return RetHost(RetHost.OK, value = self.currList)
+        else:
+            printDBG( "getPrevList end ERROR" )
+            return RetHost(RetHost.ERROR, value = [])
+
+    def getCurrentList(self, refresh = 0):
+        printDBG( "getCurrentList begin" )
+        printDBG( "getCurrentList end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getLinksForVideo(self, Index = 0, item = None):
+        return RetHost(RetHost.NOT_IMPLEMENTED, value = [])
+        
+    def getResolvedURL(self, url):
+        printDBG( "getResolvedURL begin" )
+        if url != None and url != '':        
+            ret = self.host.getResolvedURL(url)
+            if ret != None and ret != '':        
+               printDBG( "getResolvedURL ret: "+str(ret))
+               list = []
+               list.append(ret)
+               printDBG( "getResolvedURL end OK" )
+               return RetHost(RetHost.OK, value = list)
+            else:
+               printDBG( "getResolvedURL end" )
+               return RetHost(RetHost.NOT_IMPLEMENTED, value = [])                
+        else:
+            printDBG( "getResolvedURL end" )
+            return RetHost(RetHost.NOT_IMPLEMENTED, value = [])
+
+    def getSearchResults(self, pattern, searchType = None):
+        printDBG( "getSearchResults begin" )
+        printDBG( "getSearchResults pattern: " +pattern)
+        self.prevIndex.append(0)
+        self.prevList.append(self.currList)
+        self.currList = self.host.getSearchResults(pattern, searchType)
+        printDBG( "getSearchResults end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    ###################################################
+    # Additional functions on class IPTVHost
+    ###################################################
+
+class Host:
+    XXXversion = "2020.10.24.0"
+    XXXremote  = "0.0.0.0"
+    currList = []
+    MAIN_URL = ''
+    SEARCH_proc = ''
+    
+    def __init__(self):
+        printDBG( 'Host __init__ begin' )
+        self.cm = pCommon.common()
+        self.up = urlparser() 
+        self.history = CSearchHistoryHelper('xxx')
+        self.sessionEx = MainSessionWrapper() 
+        self.currList = []
+        printDBG( 'Host __init__ end' )
+
+    def setCurrList(self, list):
+        printDBG( 'Host setCurrList begin' )
+        self.currList = list
+        printDBG( 'Host setCurrList end' )
+        return 
+
+    def getInitList(self):
+        printDBG( 'Host getInitList begin' )
+        _url = 'https://gitlab.com/iptv-host-xxx/iptv-host-xxx/raw/master/IPTVPlayer/hosts/hostXXX.py'
+        query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+        try:
+           data = self.cm.getURLRequestData(query_data)
+           #printDBG( 'Host init data: '+data )
+           r=self.cm.ph.getSearchGroups(data, '''XXXversion = ['"]([^"^']+?)['"]''', 1, True)[0]
+           if r:
+              printDBG( 'XXXremote = '+r )
+              self.XXXremote=r
+        except:
+           printDBG( 'Host init query error' )
+        self.currList = self.listsItems(-1, '', 'main-menu')
+        printDBG( 'Host getInitList end' )
+        return self.currList
+
+    def getListForItem(self, Index = 0, refresh = 0, selItem = None):
+        printDBG( 'Host getListForItem begin' )
+        valTab = []
+        if len(self.currList[Index].urlItems) == 0:
+           return valTab
+        valTab = self.listsItems(Index, self.currList[Index].urlItems[0], self.currList[Index].urlSeparateRequest)
+        self.currList = valTab
+        printDBG( 'Host getListForItem end' )
+        return self.currList
+
+    def getSearchResults(self, pattern, searchType = None):
+        printDBG( "Host getSearchResults begin" )
+        printDBG( "Host getSearchResults pattern: " +pattern)
+        valTab = []
+        valTab = self.listsItems(-1, pattern, 'SEARCH')
+        self.currList = valTab
+        printDBG( "Host getSearchResults end" )
+        return self.currList
+
+    def _cleanHtmlStr(self, str):
+        str = str.replace('<', ' <').replace('\n', ' ').replace('\r', ' ').replace('\t', ' ')
+        return clean_html(str).strip()
+
+    def FullUrl(self, url):
+        if url.startswith('//'):
+            url = 'http:' + url
+        return url
+
+    def getPage(self, baseUrl, cookie_domain, cloud_domain, params={}, post_data=None):
+        COOKIEFILE = os_path.join(GetCookieDir(), cookie_domain)
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        params['cloudflare_params'] = {'domain':cloud_domain, 'cookie_file':COOKIEFILE, 'User-Agent':self.USER_AGENT}
+        return self.cm.getPageCFProtection(baseUrl, params, post_data)
+
+    def getPage4k(self, baseUrl, cookie_domain, cloud_domain, params={}, post_data=None):
+        COOKIEFILE = os_path.join(GetCookieDir(), cookie_domain)
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0'
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url):
+                return url
+            else:
+                return urlparse.urljoin(baseUrl, url) 
+        if params == {}: params = dict(self.defaultParams)
+        params['cookie_items'] = {'xxx':'ok'}
+        params['cloudflare_params'] = {'domain':cloud_domain, 'cookie_file':COOKIEFILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        return self.cm.getPageCFProtection(baseUrl, params, post_data)
+
+    def _getPage(self, url, addParams = {}, post_data = None):
+        
+        try:
+            import httplib
+            def patch_http_response_read(func):
+                def inner(*args):
+                    try:
+                        return func(*args)
+                    except httplib.IncompleteRead, e:
+                        return e.partial
+                return inner
+            prev_read = httplib.HTTPResponse.read
+            httplib.HTTPResponse.read = patch_http_response_read(httplib.HTTPResponse.read)
+        except Exception: printExc()
+        sts, data = self.cm.getPage(url, addParams, post_data)
+        try: httplib.HTTPResponse.read = prev_read
+        except Exception: printExc()
+        return sts, data
+
+    def get_Page(self, baseUrl, addParams={}, post_data=None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+
+    def listsItems(self, Index, url, name = ''):
+        printDBG( 'Host listsItems begin' )
+        printDBG( 'Host listsItems url: '+url )
+        valTab = []
+        self.format4k = config.plugins.iptvplayer.xxx4k.value
+        self.beegfullhd = config.plugins.iptvplayer.beeg.value
+
+        if name == 'main-menu':
+           printDBG( 'Host listsItems begin name='+name )
+           if self.XXXversion <> self.XXXremote and self.XXXremote <> "0.0.0.0":
+              valTab.append(CDisplayListItem('---UPDATE---','UPDATE MENU',        CDisplayListItem.TYPE_CATEGORY,           [''], 'UPDATE',  '', None)) 
+           valTab.append(CDisplayListItem('XHAMSTER',       'xhamster.com',       CDisplayListItem.TYPE_CATEGORY, ['https://xhamster.com/categories'],     'xhamster','https://1000logos.net/wp-content/uploads/2018/12/xHamster-Logo-768x432.png', None)) 
+           valTab.append(CDisplayListItem('HOME MOVIES TUBE',     'http://www.homemoviestube.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.homemoviestube.com/channels/'],'HomeMoviesTube', 'http://www.homemoviestube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ZBIORNIK MINI',     'https://mini.zbiornik.com', CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/filmy'],'ZBIORNIKMINI', 'https://static.zbiornik.com/upimg/0160d9c44a354d20e81f0e6df5fe832e.jpg', None)) 
+           valTab.append(CDisplayListItem('HCLIPS',     'http://www.hclips.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.hclips.com/categories/'],'hclips', 'https://i.pinimg.com/474x/d3/16/78/d31678f3c99564740ab5b097e7792927.jpg', None)) 
+           valTab.append(CDisplayListItem('4TUBE',          'www.4tube.com',      CDisplayListItem.TYPE_CATEGORY, ['https://www.4tube.com/tags'],          '4TUBE',   'http://cdn1.ht.ui.4tube.com/assets/img/layout/4tube-logo-1f503fd81c.png', None)) 
+           valTab.append(CDisplayListItem('EPORNER',        'www.eporner.com',    CDisplayListItem.TYPE_CATEGORY, ['https://www.eporner.com/cats/'],   'eporner', 'http://static.eporner.com/new/logo.png', None)) 
+           valTab.append(CDisplayListItem('TUBE8',          'www.tube8.com',      CDisplayListItem.TYPE_CATEGORY, ['http://www.tube8.com/categories.html'], 'tube8',   'http://cdn1.static.tube8.phncdn.com/images/t8logo.png', None)) 
+           valTab.append(CDisplayListItem('YOUPORN',        'wwww.youporn.com',   CDisplayListItem.TYPE_CATEGORY, ['https://www.youporn.com/categories/'],'youporn', 'https://fs.ypncdn.com/cb/bundles/youpornwebfront/images/l_youporn_black.png?v=9b34af679da9f8f8279fb875c7bcea555a784ec3', None)) 
+           valTab.append(CDisplayListItem('PORNHUB',        'www.pornhub.com',    CDisplayListItem.TYPE_CATEGORY, ['https://www.pornhub.com/categories'],    'pornhub', 'https://mk0onemorecupofd9ppb.kinstacdn.com/wp-content/uploads/2018/11/Make-Money-Pornhub.jpg', None)) 
+           valTab.append(CDisplayListItem('HDPORN',         'www.hdporn.net',     CDisplayListItem.TYPE_CATEGORY, ['http://www.hdporn.net/channels/'],      'hdporn',  'http://www.hdporn.com/gfx/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('REDTUBE',        'www.redtube.com',    CDisplayListItem.TYPE_CATEGORY, ['http://www.redtube.com/categories'],      'redtube', 'http://img02.redtubefiles.com/_thumbs/design/logo/redtube_260x52_black.png', None)) 
+           valTab.append(CDisplayListItem('HENTAIGASM',     'hentaigasm.com',     CDisplayListItem.TYPE_CATEGORY, ['http://hentaigasm.com'],                'hentaigasm','http://hentaigasm.com/wp-content/themes/detube/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('XVIDEOS',        'www.xvideos.com',    CDisplayListItem.TYPE_CATEGORY, ['http://www.xvideos.com'],               'xvideos', 'http://emblemsbf.com/img/31442.jpg', None)) 
+           valTab.append(CDisplayListItem('XNXX',           'www.xnxx.com',       CDisplayListItem.TYPE_CATEGORY, ['http://www.xnxx.com'],                  'xnxx',    'http://www.naughtyalysha.com/tgp/xnxx/xnxx-porn-recip.jpg', None)) 
+           valTab.append(CDisplayListItem('BEEG',           'beeg.com',           CDisplayListItem.TYPE_CATEGORY, ['https://beeg.com'],                      'beeg',    'https://i.pinimg.com/474x/8e/89/91/8e89916e7e4d8c0b314d548578d4aba5.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNRABBIT',     'www.pornrabbit.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornrabbit.com/channels/'],'pornrabbit','https://www.pornrabbit.com/templates/pornrabbit/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNHD',     'www.pornhd.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.pornhd.com/category'],'pornhd','https://pbs.twimg.com/profile_images/527104689444093952/PbRNZmMT_400x400.png', None)) 
+           valTab.append(CDisplayListItem('AH-ME',     'www.ah-me.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.ah-me.com/channels.php'],'AH-ME','https://ahmestatic.fuckandcdn.com/ahmestatic/v30/common/ah-me/img/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('AMATEURPORN',     'https://www.amateurporn.me', CDisplayListItem.TYPE_CATEGORY, ['https://www.amateurporn.me/categories/'],'AMATEURPORN', 'https://www.amateurporn.me/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('YOUJIZZ',     'http://www.youjizz.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.youjizz.com/categories'],'YOUJIZZ', 'http://www.sample-made.com/cms/content/uploads/2015/05/youjizz_logo-450x400.jpg', None)) 
+           valTab.append(CDisplayListItem('DACHIX',     'http://www.dachix.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.dachix.com/categories'],'DACHIX', 'http://thumbs.dachix.com/images/dachixcom_logo_noir.png', None)) 
+           valTab.append(CDisplayListItem('DRTUBER',     'http://www.drtuber.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.drtuber.com/categories'],'DRTUBER', 'http://static.drtuber.com/templates/frontend/mobile/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('TNAFLIX',     'https://www.tnaflix.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.tnaflix.com/categories'],'TNAFLIX', 'https://pbs.twimg.com/profile_images/1109542593/logo_400x400.png', None)) 
+           #valTab.append(CDisplayListItem('EL-LADIES',     'http://www.el-ladies.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.el-ladies.com'],'EL-LADIES', 'http://www.el-ladies.com/img/v3/header-logo.jpg', None)) 
+           valTab.append(CDisplayListItem('EXTREMETUBE',     'http://www.extremetube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.extremetube.com/video-categories'],'EXTREMETUBE', 'http://www.wp-tube-plugin.com/feed-images/extremetube.png', None)) 
+           valTab.append(CDisplayListItem('RUS.PORN',     'https://rusvidos.tv', CDisplayListItem.TYPE_CATEGORY, ['http://rus.porn/'],'RUSPORN', 'http://mixporn24.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORN720',     'http://porn720.net/', CDisplayListItem.TYPE_CATEGORY, ['http://porn720.net/'],'PORN720', 'http://porn720.net/wp-content/themes/porn720/img/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNTREX',     'http://www.porntrex.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porntrex.com/categories/'],'PORNTREX', 'https://www.porntrex.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNDOE',     'http://www.porndoe.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.porndoe.com/categories'],'PORNDOE', 'https://sih.avn.com/1024x500/top/filters:extract_focal()/article-images/2015/4/593284/TopStory_BBD79930-DC94-11E4-8F7E-9046D33E6151.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNfromCZECH',     'http://www.pornfromczech.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.pornfromczech.com/'],'PORNFROMCZECH', 'https://www.bing.com/th?id=OIP.LA7c-hQkzRto2v_bqXV1MQHaBJ&pid=Api', None)) 
+           valTab.append(CDisplayListItem('FILMYPORNO',     'http://www.filmyporno.tv', CDisplayListItem.TYPE_CATEGORY, ['http://www.filmyporno.tv/channels/'],'FILMYPORNO', 'http://www.filmyporno.tv/templates/default_tube2016/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('CLIPHUNTER',     'http://www.cliphunter.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.cliphunter.com/categories/'],'CLIPHUNTER', 'http://www.cliphunter.com/gfx/new/logo.png', None)) 
+           valTab.append(CDisplayListItem('EMPFLIX',     'http://www.empflix.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.empflix.com/categories.php'],'EMPFLIX', 'https://www.empflix.com/images/logo_emp.jpg', None)) 
+           valTab.append(CDisplayListItem('THUMBZILLA',     'http://www.thumbzilla.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.thumbzilla.com/'],'THUMBZILLA', 'https://cdn-d-static.pornhub.com/tz-static/images/pc/logo.png?cache=2016111010', None)) 
+           valTab.append(CDisplayListItem('YUVUTU',     'http://www.yuvutu.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.yuvutu.com/categories/'],'YUVUTU', 'http://www.yuvutu.com/themes/yuvutu_v2/images/yuvutu_logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNICOM',     'http://pornicom.com', CDisplayListItem.TYPE_CATEGORY, ['http://pornicom.com/categories/'],'PORNICOM', 'http://pornicom.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('HDZOG',     'http://www.hdzog.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.hdzog.com/categories/'],'HDZOG', 'https://pbs.twimg.com/profile_images/484686238402629632/5fzwWkJQ_bigger.png', None)) 
+           #valTab.append(CDisplayListItem('PORNOMENGE',     'https://www.pornomenge.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornomenge.com/kategorien/'],'PORNOMENGE', 'https://th.servitubes.com/videos/8/1/b/5/1/81b51795337b047be07d3b3790b97c923535dffb.mp4-preview-3.jpg', None)) 
+           valTab.append(CDisplayListItem('TUBEPORNCLASSIC',     'http://tubepornclassic.com/', CDisplayListItem.TYPE_CATEGORY, ['http://tubepornclassic.com/categories/'],'TUBEPORNCLASSIC', 'https://tubepornclassic.com/static/images/favicons/android-icon-192x192.png', None)) 
+           valTab.append(CDisplayListItem('KOLOPORNO',     'https://www.koloporno.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.koloporno.com/kategoriach/'],'KOLOPORNO', 'https://pbs.twimg.com/profile_images/638608521072934912/sqy78GQm.png', None)) 
+           valTab.append(CDisplayListItem('REALGFPORN',     'https://www.realgfporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.realgfporn.com/channels/'],'REALGFPORN', 'https://www.realgfporn.com/assets/img/logo.png', None)) 
+           valTab.append(CDisplayListItem('PLAYVIDS',     'https://www.playvids.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.playvids.com/categories&jsclick=1'],'PLAYVIDS', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9PrWdcYR2t0pJjXg_Wi02ZyiP6E1PJ0mmilizp745_fazgzxu&s', None)) 
+           valTab.append(CDisplayListItem('FUX',     'http://www.fux.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.fux.com'],'fux', 'https://cdn1-ht-assets.fux.com/Fux.png', None)) 
+           valTab.append(CDisplayListItem('PORNTUBE',     'http://www.porntube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porntube.com'],'PORNTUBE', 'https://cdn1-ht-assets.porntube.com/PornTube.png', None)) 
+           valTab.append(CDisplayListItem('PORNERBROS',     'http://www.pornerbros.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornerbros.com'],'pornerbros', 'https://cdn1-ht-assets.pornerbros.com/PornerBros.png', None)) 
+           valTab.append(CDisplayListItem('MOVIEFAP',     'http://www.moviefap.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.moviefap.com/browse/'],'MOVIEFAP', 'http://www.moviefap.com/images/logo.gif', None)) 
+           valTab.append(CDisplayListItem('YOURPORN.SEXY',     'https://sxyprn.com', CDisplayListItem.TYPE_CATEGORY, ['https://sxyprn.com'],'yourporn', 'http://cdn.itsyourporn.com/assets/images/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('FREEOMOVIE',     'https://www.freeomovie.to', CDisplayListItem.TYPE_CATEGORY, ['https://www.freeomovie.to'],'freeomovie', 'https://www.freeomovie.to/wp-content/uploads/2013/04/logo.png', None)) 
+           valTab.append(CDisplayListItem('KATESTUBE',     'http://www.katestube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.katestube.com/categories/'],'KATESTUBE', 'https://www.katestube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNONE',     'https://pornone.com', CDisplayListItem.TYPE_CATEGORY, ['https://pornone.com/categories/'],'pornone', 'https://th-eu4.pornone.com/images/logo-light-theme.png', None)) 
+           valTab.append(CDisplayListItem('HOTMOVS',     'http://hotmovs.com', CDisplayListItem.TYPE_CATEGORY, ['http://hotmovs.com/categories/'],'hotmovs', 'http://hotmovs.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNOXO',     'https://www.pornoxo.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornoxo.com'],'pornoxo', 'http://www.web-tv-sexe.fr/logo/pornoxo.jpg', None)) 
+           valTab.append(CDisplayListItem('PINFLIX',     'http://www.pinflix.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.pinflix.com/category'],'pinflix', 'https://pbs.twimg.com/profile_images/568766044114657280/JYh2ZSF_.png', None)) 
+           valTab.append(CDisplayListItem('UPORNIA',     'http://www.upornia.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.upornia.com/categories/'],'upornia', 'https://pbs.twimg.com/profile_images/603525677451640833/AE2qwJ5C_400x400.png', None)) 
+           valTab.append(CDisplayListItem('TXXX',     'http://www.txxx.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.txxx.com/categories/'],'txxx', 'https://www.txxx.com/images/desktop-logo.png', None)) 
+           valTab.append(CDisplayListItem('SUNPORNO',     'https://www.sunporno.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.sunporno.com/channels/'],'sunporno', 'https://sunstatic.fuckandcdn.com/sunstatic/v31/common/sunporno/img/logo_top.png', None)) 
+           valTab.append(CDisplayListItem('SEXU',     'http://sexu.com', CDisplayListItem.TYPE_CATEGORY, ['http://sexu.com/'],'sexu', 'https://images-platform.99static.com/-xYD7Tguk14AOVySxG_bMkoJodU=/500x500/top/smart/99designs-contests-attachments/41/41945/attachment_41945457', None)) 
+           valTab.append(CDisplayListItem('TUBEWOLF',     'http://www.tubewolf.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.tubewolf.com'],'tubewolf', 'http://images.tubewolf.com/logo.png', None)) 
+           valTab.append(CDisplayListItem('ALPHAPORNO',     'http://www.alphaporno.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.alphaporno.com'],'tubewolf', 'http://images.alphaporno.com/logo.png', None)) 
+           valTab.append(CDisplayListItem('ZEDPORN',     'http://zedporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://zedporn.com'],'tubewolf', 'http://images.zedporn.com/new-logo.png', None)) 
+           valTab.append(CDisplayListItem('CROCOTUBE',     'http://crocotube.com', CDisplayListItem.TYPE_CATEGORY, ['http://crocotube.com'],'tubewolf', 'http://crocotube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ASHEMALETUBE',     'https://www.ashemaletube.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.ashemaletube.com/'],'ASHEMALETUBE', 'https://adminex.ashemaletube.com/images/logo/ast.png', None)) 
+           #valTab.append(CDisplayListItem('MOMXXXFUN',     'https://momxxxfun.com/', CDisplayListItem.TYPE_CATEGORY, ['https://momxxxfun.com/categories'],'MOMXXXFUN', 'https://momxxxfun.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('STREAMPORN',     'https://streamporn.pw', CDisplayListItem.TYPE_CATEGORY, ['https://streamporn.pw'],'streamporn', 'https://streamporn.pw/wp-content/uploads/2018/05/fsfsfsf-1.png', None)) 
+           valTab.append(CDisplayListItem('ONLINEPORNFREE',     'https://onlinepornfree.xyz/', CDisplayListItem.TYPE_CATEGORY, ['https://onlinepornfree.xyz/'],'onlinepornfree', 'https://adultdvdparadise.com/wp-content/uploads/2019/04/looooooo.png', None)) 
+           valTab.append(CDisplayListItem('MYDIRTYHOBBY',     'https://www.mydirtyhobby.to', CDisplayListItem.TYPE_CATEGORY, ['https://www.mydirtyhobby.to'],'MYDIRTYHOBBY', 'https://www.mydirtyhobby.to/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('XXXSTREAMS',     'http://xxxstreams.org/', CDisplayListItem.TYPE_CATEGORY, ['http://xxxstreams.org/'],'xxxstreams', 'https://previews.123rf.com/images/sila5775/sila57751506/sila5775150600244/40710228-xxx-designed-using-grunge-brush-on-white-background-sign-logo-symbol-icon-graphic-vector-.jpg', None)) 
+           valTab.append(CDisplayListItem('PANDAMOVIE',     'https://pandamovie.info', CDisplayListItem.TYPE_CATEGORY, ['https://pandamovie.info'],'123PANDAMOVIE', 'https://pandamovie.info/wp-content/uploads/2019/01/pandamovie-new-clolor.png', None)) 
+           valTab.append(CDisplayListItem('FULLXXXMOVIES',     'http://fullxxxmovies.net', CDisplayListItem.TYPE_CATEGORY, ['http://fullxxxmovies.net/'],'FULLXXXMOVIES', 'https://fullxxxmovies.net/wp-content/uploads/2020/01/cropped-FullXXXMovies_3.png', None)) 
+           valTab.append(CDisplayListItem('PORNREWIND',     'https://www.pornrewind.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornrewind.com/categories/'],'PORNREWIND', 'https://www.pornrewind.com/static/images/logo-light-pink.png', None)) 
+           valTab.append(CDisplayListItem('BALKANJIZZ',     'https://www.balkanjizz.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.balkanjizz.com/kategorije-pornica'],'BALKANJIZZ', 'https://www.balkanjizz.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNORUSSIA',     'https://pornorussia.tv/', CDisplayListItem.TYPE_CATEGORY, ['https://pornorussia.tv/'],'PORNORUSSIA', 'https://pornorussia.tv/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('LETMEJERK',     'https://www.letmejerk.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.letmejerk.com/category'],'LETMEJERK', 'https://image.freepik.com/darmowe-ikony/gra%C4%87_318-135191.jpg', None)) 
+           valTab.append(CDisplayListItem('GOTPORN',     'https://www.gotporn', CDisplayListItem.TYPE_CATEGORY, ['https://www.gotporn.com/categories?src=hm'],'GOTPORN', 'https://cdn2-static-cf.gotporn.com/desktop/img/gotporn-logo.png', None)) 
+           valTab.append(CDisplayListItem('ANALDIN',     'https://www.analdin.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.analdin.com/categories/'],'ANALDIN', 'https://www.analdin.com/images/logo-retina.png', None)) 
+           valTab.append(CDisplayListItem('NETFLIXPORNO',     'https://netflixporno.net/', CDisplayListItem.TYPE_CATEGORY, ['https://netflixporno.net/'],'NETFLIXPORNO', 'https://netflixporno.net/wp-content/uploads/2018/04/netflixporno-1.png', None)) 
+           valTab.append(CDisplayListItem('FAPSET',     'https://fapset.com', CDisplayListItem.TYPE_CATEGORY, ['https://fapset.com'],'fapset', 'https://fapset.com/templates/Default/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('DAFTSEX',     'https://daftsex.com', CDisplayListItem.TYPE_CATEGORY, ['https://daftsex.com/categories'],'daftsex', 'https://daftsex.com/img/daftlogo196x196.png', None)) 
+           valTab.append(CDisplayListItem('LOVE HOME PORN',     'https://lovehomeporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://lovehomeporn.com/videos'],'lovehomeporn', 'https://cdn.static.lovehomeporn.com/templates/frontend/purple/new_images/logo-helloween.png', None)) 
+           valTab.append(CDisplayListItem('EROPROFILE',     'http://www.eroprofile.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.eroprofile.com'],'EROPROFILE', 'https://static.eroprofile.com/img/v1/header_logo.png', None)) 
+           valTab.append(CDisplayListItem('ABSOLUPORN',     'http://www.absoluporn.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.absoluporn.com/en/lettre-tag.html'],'absoluporn', 'http://www.absoluporn.com/image/deco/logo.gif', None)) 
+           valTab.append(CDisplayListItem('AMATEUR COOL',     'https://www.amateurcool.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.amateurcool.com/channels/'],'amateurcool', 'https://www.amateurcool.com/templates/amateurcool/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNGO',     'https://porngo.com', CDisplayListItem.TYPE_CATEGORY, ['https://porngo.com/categories/'],'porngo', 'https://cdn6.f-cdn.com/contestentries/1524870/34599086/5d1936269c415_thumb900.jpg', None)) 
+           valTab.append(CDisplayListItem('ANYBUNNY',     'http://anybunny.com', CDisplayListItem.TYPE_CATEGORY, ['http://anybunny.com'],'anybunny', 'http://anybunny.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('DATOPORN',     'http://dato.porn', CDisplayListItem.TYPE_CATEGORY, ['https://dato.porn/categories/'],'datoporn', 'https://pbs.twimg.com/media/CtzxPlEWgAAiIjH.png', None)) 
+           valTab.append(CDisplayListItem('HQPORNER',     'https://hqporner.com', CDisplayListItem.TYPE_CATEGORY, ['https://hqporner.com/porn-categories.php'],'hqporner', 'https://www.filmyporno.blog/wp-content/uploads/2018/12/channel-hqporner.jpg', None)) 
+           valTab.append(CDisplayListItem('SPANKBANG',     'https://spankbang.com', CDisplayListItem.TYPE_CATEGORY, ['https://spankbang.com/categories'],'spankbang', 'https://static.spankbang.com/static_desktop/Images/logo_desktop_v4@2x.png', None)) 
+           valTab.append(CDisplayListItem('CUMLOUDER',     'https://www.cumlouder.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.cumlouder.com/categories'],'cumlouder', 'https://1000logos.net/wp-content/uploads/2019/02/CumLouder-Logo.png', None)) 
+           valTab.append(CDisplayListItem('PORN00',     'http://www.porn00.org', CDisplayListItem.TYPE_CATEGORY, ['http://www.porn00.org/categories/'],'porn00', 'https://www.porn00.org/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('WATCHPORNX',     'https://watchpornx.com/', CDisplayListItem.TYPE_CATEGORY, ['https://watchpornx.com/'],'watchpornx', 'https://watchpornfree.info/wp-content/uploads/2019/01/watchpornfreews-1-e1525276673535.png', None)) 
+           valTab.append(CDisplayListItem('VOLIMEEE',     'https://www.volimeee.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.volimeee.com/categories'],'volimeee', 'https://www.volimeee.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('P720',     'https://p720.net', CDisplayListItem.TYPE_CATEGORY, ['https://p720.net/categories/'],'P720', 'https://p720.net/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNOPERSIK',     'https://pornopersik.com', CDisplayListItem.TYPE_CATEGORY, ['https://pornopersik.com/categories/'],'pornopersik', 'https://pornopersik.com/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ANYPORN',     'https://anyporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://anyporn.com/categories/'],'ANYPORN', 'https://anyporn.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ANON-V',     'https://anon-v.com', CDisplayListItem.TYPE_CATEGORY, ['https://anon-v.com/categories/'],'ANON-V', 'https://anon-v.com/logo350.png', None)) 
+           valTab.append(CDisplayListItem('BRAVOPORN',     'https://www.bravoporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.bravoporn.com/c/'],'bravoporn', 'https://www.bravoporn.com/v/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('BRAVOTEENS',     'https://www.bravoteens.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.bravoteens.com//cats/'],'bravoteens', 'https://www.bravoteens.com/tb/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('SLEAZYNEASY',     'https://www.sleazyneasy.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.sleazyneasy.com/categories/'],'sleazyneasy', 'https://cdni.sleazyneasy.com/images/favicon-152.png', None)) 
+           valTab.append(CDisplayListItem('VJAV',     'https://vjav.com', CDisplayListItem.TYPE_CATEGORY, ['https://vjav.com/categories/'],'vjav', 'https://vjav.com/images/favicons/apple-touch-icon.png', None)) 
+           valTab.append(CDisplayListItem('JAVHOHO',     'https://javhoho.com', CDisplayListItem.TYPE_CATEGORY, ['https://javhoho.com/category/free-jav-uncensored/'],'javhoho', 'https://javhoho.com/wp-content/uploads/2019/11/JAVhoho.com-logo.png', None)) 
+           valTab.append(CDisplayListItem('FORCEDCELEBS',     'https://forcedcelebs.net', CDisplayListItem.TYPE_CATEGORY, ['https://forcedcelebs.net'],'forcedcelebs', '', None)) 
+           valTab.append(CDisplayListItem('FAMILYPORN',     'https://familyporn.tv', CDisplayListItem.TYPE_CATEGORY, ['https://familyporn.tv/categories/'],'familyporn', 'https://familyporn.tv/images/logo-alt.png', None)) 
+           valTab.append(CDisplayListItem('BITPORNO',     'https://www.bitporno.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.bitporno.com/'],'bitporno', 'https://www.bitporno.com/images/logobt.png', None)) 
+           valTab.append(CDisplayListItem('EBUXXX',     'https://ebuxxx.net', CDisplayListItem.TYPE_CATEGORY, ['https://ebuxxx.net'],'ebuxxx', '', None)) 
+
+
+           if config.plugins.iptvplayer.xxxsortall.value:
+               valTab.sort(key=lambda poz: poz.name)
+
+           if config.plugins.iptvplayer.xxxsearch.value:
+               self.SEARCH_proc=name
+               valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+               valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),             CDisplayListItem.TYPE_SEARCH,             [''], '',        '', None)) 
+
+           #valTab.insert(0,CDisplayListItem(_('PROSZĘ PRZEKAŻ 1% PODATKU NA KRS 0000049063'),  _('KRS 0000049063\nSTOWARZYSZENIE "OTWÓRZMY PRZED NIMI ŻYCIE"\nUL. KOŚCIUSZKI 43   32-065 KRZESZOWICE\nPRZEKAŻ 1 % SWOJEGO PODATKU\nPODARUJ NASZYM NIEPEŁNOSPRAWNYM SŁOŃCE'),             CDisplayListItem.TYPE_MORE,             [''], '',        '', None)) 
+           valTab.append(CDisplayListItem('FOTKA-PL-KAMERKI',     'http://www.fotka.pl/kamerki', CDisplayListItem.TYPE_CATEGORY, ['http://api.fotka.pl/v2/cams/get?page=1&limit=100&gender=f'],'FOTKA-PL-KAMERKI', 'https://pbs.twimg.com/profile_images/3086758992/6fb5cc2ee2735c334d0363bcb01a52ca_400x400.png', None)) 
+           url = 'https://chaturbate.com/tags/%s' % config.plugins.iptvplayer.chaturbate.value
+           valTab.append(CDisplayListItem('CHATURBATE',     'chaturbate.com', CDisplayListItem.TYPE_CATEGORY, [url],'CHATURBATE','http://www.adultcamfriendx.com/wp-content/uploads/2016/11/chaturbate-cams-logo.png', None)) 
+           valTab.append(CDisplayListItem('XHAMSTERLIVE',       "Kamerki",       CDisplayListItem.TYPE_CATEGORY,['http://xhamsterlive.com'], 'xhamsterlive', 'https://cdn.stripst.com/assets/icons/favicon-196x196_xhamsterlive.com.png',None))
+           valTab.append(CDisplayListItem('CAM4',     'https://www.cam4.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.cam4.com'],'CAM4-KAMERKI', 'https://www.cam4models.com/images/c4logo_white.png', None)) 
+           #valTab.append(CDisplayListItem('MYFREECAMS',     'http://www.myfreecams.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.myfreecams.com/#Homepage'],'MYFREECAMS', 'http://www.adultcamfriendx.com/wp-content/uploads/2016/11/myfreecams-webcams-logo.png', None)) 
+           #valTab.append(CDisplayListItem('LIVEJASMIN',     'http://www.livejasmin.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/girl/free+chat?selectedFilters=12'],'LIVEJASMIN', 'http://livejasmins.fr/livejasmin-france.png', None)) 
+           valTab.append(CDisplayListItem('BONGACAMS',     'https://bongacams.com/', CDisplayListItem.TYPE_CATEGORY, ['https://en.bongacams.com/'],'BONGACAMS', 'http://i.bongacams.com/images/bongacams_logo3_header.png', None)) 
+           valTab.append(CDisplayListItem('SHOWUP   - live cams',       'showup.tv',          CDisplayListItem.TYPE_CATEGORY, ['http://showup.tv'],                     'showup',  'https://i.pinimg.com/originals/cd/73/1d/cd731d0be3bb2cabcecd6d7bdfe50ae9.png', None)) 
+           #valTab.append(CDisplayListItem('ZBIORNIK - live cams',       'zbiornik.tv',       CDisplayListItem.TYPE_CATEGORY, ['http://zbiornik.com/live/'],            'zbiornik','http://static.zbiornik.com/images/zbiornikBig.png', None)) 
+           valTab.append(CDisplayListItem('CAMSODA',       'http://www.camsoda.com',       CDisplayListItem.TYPE_CATEGORY, ['http://www.camsoda.com/api/v1/browse/online'],            'CAMSODA','https://cachew.camsoda.com/assets/img/camsoda-logo-160x50.png', None)) 
+           valTab.append(CDisplayListItem('STREAMATE',       'https://streamate.com',       CDisplayListItem.TYPE_CATEGORY, ['https://streamate.com'],            'STREAMATE','https://m2.nsimg.net/3.0/auto/skin/sm/assets/ffe71-1453326178-logo.png', None)) 
+           try: 
+               phImage = urlparser.decorateUrl('http://media4.nkdcdn.com/images/siteImages/textImages/common/phtml/whiteLabel/new.naked/logo.png', {'Referer': 'https://www.naked.com'})
+               valTab.append(CDisplayListItem('CAMSTER',       'https://www.naked.com',       CDisplayListItem.TYPE_CATEGORY, ['https://www.naked.com/'],            'NAKED', phImage, None)) 
+           except Exception: 
+               printExc()
+           valTab.append(CDisplayListItem('ADULT-TV',     'http://www.adulttvlive.net/category/live-18-tv/', CDisplayListItem.TYPE_CATEGORY, ['http://www.adulttvlive.net/category/live-18-tv/'],'ADULTTV', '', None)) 
+           valTab.append(CDisplayListItem('+++ XXXLIST +++   XXXversion = '+str(self.XXXversion), '+++ XXXLIST +++   XXXversion = '+str(self.XXXversion), CDisplayListItem.TYPE_CATEGORY, [''],'XXXLIST', '', None)) 
+           if config.plugins.iptvplayer.xxxupdate.value:
+               valTab.append(CDisplayListItem('CHANGELOG',                    'CHANGELOG',   CDisplayListItem.TYPE_CATEGORY, ['https://gitlab.com/iptv-host-xxx/iptv-host-xxx/commits/master.atom'], 'UPDATE-ZMIANY', '', None)) 
+           self.yourporn = config.plugins.iptvplayer.yourporn.value
+
+           return valTab
+
+        # ########## #
+        if 'HISTORY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           for histItem in self.history.getHistoryList():
+               valTab.append(CDisplayListItem(histItem['pattern'], 'Szukaj ', CDisplayListItem.TYPE_CATEGORY, [histItem['pattern'],histItem['type']], 'SEARCH', '', None))          
+            
+           return valTab           
+        # ########## #
+        if 'SEARCH' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           pattern = url 
+           if Index==-1: 
+              self.history.addHistoryItem( pattern, 'video')
+           if self.SEARCH_proc == '': return []               
+           if self.SEARCH_proc == 'main-menu':
+              valTab=[]
+              self.MAIN_URL = 'https://www.4tube.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='4TUBE - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'ahme-search')
+              for item in valtemp: item.name='AH-ME - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.cliphunter.com' 
+              valtemp = self.listsItems(-1, url, 'CLIPHUNTER-search')
+              for item in valtemp: item.name='CLIPHUNTER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.dachix.com' 
+              valtemp = self.listsItems(-1, url, 'DACHIX-search')
+              for item in valtemp: item.name='DACHIX - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.drtuber.com' 
+              valtemp = self.listsItems(-1, url, 'DRTUBER-search')
+              for item in valtemp: item.name='DRTUBER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.eporner.com' 
+              valtemp = self.listsItems(-1, url, 'eporner-search')
+              for item in valtemp: item.name='EPORNER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.fux.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='FUX - '+item.name
+              valTab = valTab + valtemp
+
+#              valtemp = self.listsItems(-1, url, 'hdzog-search')
+#              for item in valtemp: item.name='HDZOG - '+item.name              
+#              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.homemoviestube.com'
+              valtemp = self.listsItems(-1, url, 'HomeMoviesTube-search')
+              for item in valtemp: item.name='HomeMoviesTube - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'KATESTUBE-search')
+              for item in valtemp: item.name='KATESTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.koloporno.com' 
+              valtemp = self.listsItems(-1, url, 'KOLOPORNO-search')
+              for item in valtemp: item.name='KOLOPORNO - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'MOVIEFAP-search')
+              for item in valtemp: item.name='MOVIEFAP - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://porndoe.com' 
+              valtemp = self.listsItems(-1, url, 'porndoe-search')
+              for item in valtemp: item.name='PORNDOE - '+item.name              
+              valTab = valTab + valtemp 
+
+              self.MAIN_URL = 'https://www.pornerbros.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='PORNERBROS - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.pornhd.com' 
+              valtemp = self.listsItems(-1, url, 'pornhd-search')
+              for item in valtemp: item.name='PORNHD - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.pornhub.com' 
+              valtemp = self.listsItems(-1, url, 'pornhub-search')
+              for item in valtemp: item.name='PORNHUB - '+item.name              
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'pornicom-search')
+              for item in valtemp: item.name='PORNICOM - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.porntube.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='PORNTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'PORNFROMCZECH-search')
+              for item in valtemp: item.name='PORNFROMCZECH - '+item.name              
+              valTab = valTab + valtemp 
+
+              valtemp = self.listsItems(-1, url, 'REALGFPORN-search')
+              for item in valtemp: item.name='REALGFPORN - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.redtube.com' 
+              valtemp = self.listsItems(-1, url, 'redtube-search')
+              for item in valtemp: item.name='REDTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.thumbzilla.com' 
+              valtemp = self.listsItems(-1, url, 'THUMBZILLA-search')
+              for item in valtemp: item.name='THUMBZILLA - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.tube8.com' 
+              valtemp = self.listsItems(-1, url, 'tube8-search')
+              for item in valtemp: item.name='TUBE8 - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'xhamster-search')
+              for item in valtemp: item.name='XHAMSTER - '+item.name              
+              valTab = valTab + valtemp 
+ 
+              self.MAIN_URL = 'http://www.xnxx.com' 
+              valtemp = self.listsItems(-1, url, 'xnxx-search')
+              for item in valtemp: item.name='XNXX - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.xvideos.com' 
+              valtemp = self.listsItems(-1, url, 'xvideos-search')
+              for item in valtemp: item.name='XVIDEOS - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.youjizz.com' 
+              valtemp = self.listsItems(-1, url, 'YOUJIZZ-search')
+              for item in valtemp: item.name='YOUJIZZ - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.youporn.com' 
+              valtemp = self.listsItems(-1, url, 'youporn-search')
+              for item in valtemp: item.name='YOUPORN - '+item.name
+              valTab = valTab + valtemp
+ 
+              self.MAIN_URL = 'https://yourporn.sexy'
+              valtemp = self.listsItems(-1, url, 'yourporn-search')
+              for item in valtemp: item.name='YOURPORN.SEXY - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = '' 
+              return valTab
+           valTab = self.listsItems(-1, url, self.SEARCH_proc)
+           return valTab
+
+        if 'UPDATE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab.append(CDisplayListItem(self.XXXversion+' - Local version',   'Local  XXXversion', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           valTab.append(CDisplayListItem(self.XXXremote+ ' - Remote version',  'Remote XXXversion', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           valTab.append(CDisplayListItem('Changelog',                    'Changelog',   CDisplayListItem.TYPE_CATEGORY, ['https://gitlab.com/iptv-host-xxx/iptv-host-xxx/commits/master.atom'], 'UPDATE-ZMIANY', '', None)) 
+           valTab.append(CDisplayListItem('Update Now',                         'Update Now',        CDisplayListItem.TYPE_CATEGORY, [''], 'UPDATE-NOW',    '', None)) 
+           valTab.append(CDisplayListItem('Update Now & Restart Enigma2',                         'Update Now & Restart Enigma2',        CDisplayListItem.TYPE_CATEGORY, ['restart'], 'UPDATE-NOW',    '', None)) 
+           return valTab
+        if 'UPDATE-ZMIANY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           try:
+              data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host listsItems query error' )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phCats = re.findall("<entry>.*?<title>(.*?)</title>.*?<updated>(.*?)</updated>.*?<name>(.*?)</name>", data, re.S)
+           if phCats:
+              for (phTitle, phUpdated, phName ) in phCats:
+                  phUpdated = phUpdated.replace('T', '   ')
+                  phUpdated = phUpdated.replace('Z', '   ')
+                  phUpdated = phUpdated.replace('+01:00', '   ')
+                  phUpdated = phUpdated.replace('+02:00', '   ')
+                  printDBG( 'Host listsItems phTitle: '+phTitle )
+                  printDBG( 'Host listsItems phUpdated: '+phUpdated )
+                  printDBG( 'Host listsItems phName: '+phName )
+                  valTab.append(CDisplayListItem(phUpdated+' '+phName+'  >>  '+decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [''],'', '', None)) 
+           return valTab
+        if 'UPDATE-NOW' == name:
+           printDBG( 'HostXXX listsItems begin name='+name )
+           _url = 'https://gitlab.com/iptv-host-xxx/iptv-host-xxx/commits/master'
+           query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+              #printDBG( 'Host init data: '+data )
+              crc=self.cm.ph.getSearchGroups(data, '''/commit/([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'crc = '+crc )
+              if not crc: error
+           except:
+              printDBG( 'Host init query error' )
+              valTab.append(CDisplayListItem('ERROR - Błąd init: '+_url,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+           tmpDir = GetTmpDir() 
+           source = os_path.join(tmpDir, 'iptv-host-xxx.tar.gz') 
+           dest = os_path.join(tmpDir , '') 
+           _url = 'https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/archive.tar.gz?ref=master'              
+           output = open(source,'wb')
+           query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              output.write(self.cm.getURLRequestData(query_data))
+              output.close()
+              os_system ('sync')
+              printDBG( 'HostXXX pobieranie iptv-host-xxx.tar.gz' )
+           except:
+              if os_path.exists(source):
+                 os_remove(source)
+              printDBG( 'HostXXX Błąd pobierania iptv-host-xxx.tar.gz' )
+              valTab.append(CDisplayListItem('ERROR - Blad pobierania: '+_url,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+           if os_path.exists(source):
+              printDBG( 'HostXXX Jest plik '+source )
+           else:
+              printDBG( 'HostXXX Brak pliku '+source )
+
+           cmd = 'tar -xzf "%s" -C "%s" 2>&1' % ( source, dest )  
+           try: 
+              os_system (cmd)
+              os_system ('sync')
+              printDBG( 'HostXXX rozpakowanie  ' + cmd )
+           except:
+              printDBG( 'HostXXX Błąd rozpakowania iptv-host-xxx.tar.gz' )
+              os_system ('rm -f %s' % source)
+              os_system ('rm -rf %siptv-host-xxx-%s' % (dest, crc))
+              valTab.append(CDisplayListItem('ERROR - Blad rozpakowania %s' % source,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+
+           try:
+              od = '%siptv-host-xxx-master-%s/'% (dest, crc)
+              do = resolveFilename(SCOPE_PLUGINS, 'Extensions/') 
+              cmd = 'cp -rf "%s"/* "%s"/ 2>&1' % (os_path.join(od, 'IPTVPlayer'), os_path.join(do, 'IPTVPlayer'))
+              printDBG('HostXXX kopiowanie1 cmd[%s]' % cmd)
+              os_system (cmd)
+              #printDBG('HostXXX kopiowanie2 cmd[%s]' % cmd)
+              #iptv_system(cmd)
+              os_system ('sync')
+           except:
+              printDBG( 'HostXXX blad kopiowania' )
+              os_system ('rm -f %s' % source)
+              os_system ('rm -rf %siptv-host-xxx-master-%s' % (dest, crc))
+              valTab.append(CDisplayListItem('ERROR - blad kopiowania',   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+
+           ikony = GetPluginDir('icons/PlayerSelector/')
+           if os_path.exists('%sXXX100' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX100 ' )
+              os_system('mv %sXXX100 %sXXX100.png' % (ikony, ikony)) 
+           if os_path.exists('%sXXX120' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX120 '  )
+              os_system('mv %sXXX120 %sXXX120.png' % (ikony, ikony))
+           if os_path.exists('%sXXX135' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX135 '  )
+              os_system('mv %sXXX135 %sXXX135.png' % (ikony, ikony))
+
+           try:
+              cmd = GetPluginDir('hosts/hostXXX.py')
+              with open(cmd, 'r') as f:  
+                 data = f.read()
+                 f.close() 
+                 wersja = re.search('XXXversion = "(.*?)"', data, re.S)
+                 aktualna = wersja.group(1)
+                 printDBG( 'HostXXX aktualna wersja wtyczki '+aktualna )
+           except:
+              printDBG( 'HostXXX error openfile ' )
+
+
+           printDBG( 'HostXXX usuwanie plikow tymczasowych' )
+           os_system ('rm -f %s' % source)
+           os_system ('rm -rf %siptv-host-xxx-master-%s' % (dest, crc))
+
+           if url:
+              try:
+                 msg = '\n\n Wersja hostXXX w tunerze %s' % aktualna
+                 self.sessionEx.open(MessageBox, _("Update completed successfully. For the moment, the system will reboot.")+ msg, type = MessageBox.TYPE_INFO, timeout = 10)
+                 sleep (10)
+                 from enigma import quitMainloop
+                 quitMainloop(3)
+              except: pass
+           valTab.append(CDisplayListItem('Update End. Please manual restart enigma2',   'Restart', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           printDBG( 'HostXXX listsItems end' )
+           return valTab
+
+##################################################################
+        if 'tube8' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.tube8.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'categories-subnav', '</ul>', False)[1]
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'tube8-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Most Viewed ---', 'Most Viewed',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/most-viewed/page/1/'],      'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Top Rated ---', 'Top Rated',                 CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/top/page/1/'],       'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Longest ---', 'Longest', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/longest/page/1/'],      'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/newest/page/1/'],       'tube8-clips', '', None)) 
+           self.SEARCH_proc='tube8-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'tube8-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.tube8.com/searches.html?q='+url.replace(' ','+'), 'tube8-clips')
+           return valTab              
+        if 'tube8-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.tube8.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           nextPage = self.cm.ph.getSearchGroups(data, '''rel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="category_video_list', 'footer', False)[1]
+           if '' == data2: data2 = self.cm.ph.getDataBeetwenMarkers(data, 'Video Results For', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<figure', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''data-video_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''video-duration">([^>]+?)<''', 1, True)[0] 
+              if phUrl and not 'title]' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if nextPage:
+              valTab.append(CDisplayListItem('Next', 'Page: '+nextPage, CDisplayListItem.TYPE_CATEGORY, [nextPage], name, '', None))                
+           return valTab
+
+        if 'xnxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xnxx.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xnxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           parse = re.search('"categories":(.*?),"more_links"', data, re.S)
+           if not parse: return valTab
+           #printDBG( 'Host listsItems parse.group(1): '+parse.group(1) )
+           result = simplejson.loads(parse.group(1))
+           if result:
+              for item in result:
+                 phUrl = str(item["url"].replace('\/','/'))  
+                 phTitle = str(item["label"]) 
+                 if not 'jpg' in phTitle:
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'xnxx-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Hits ---', 'Hits',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/hits/'],      'xnxx-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Best Videos ---', 'Best Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/best/'],      'xnxx-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],       'xnxx-clips', '', None)) 
+           self.SEARCH_proc='xnxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),_('Search'),                  CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xnxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xnxx.com/?k='+url.replace(' ','+'), 'xnxx-clips')
+           return valTab              
+        if 'xnxx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xnxx.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xnxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.search("pagination(.*?)Next", data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'id="video', '</p></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/video[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''</span></span>([^>]+?)<''', 1, True)[0].strip()
+              if not phTime: phTime = self.cm.ph.getSearchGroups(item, '''<p class="metadata">([^>]+?)-''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if match: match = re.findall('href="(.*?)"', match.group(1), re.S)
+           if match:
+              phUrl = match[-1]
+              #printDBG( 'Host listsItems page phUrl: '+phUrl )
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl], name, '', None))                
+           return valTab
+
+        if 'zbiornik' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://zbiornik.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornik.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page('http://zbiornik.tv/accept/yes/Lw==')
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           sex = ''
+           hash = ''
+           ph1 = re.search('var streams = (.*?)}];', data, re.S)
+           if ph1: 
+              ph1 = ph1.group(1)+'}]'
+              #printDBG( 'Host listsItems json: '+ph1 )
+              result = simplejson.loads(ph1)
+              try:
+                 for item in result:
+                     phash = re.search('"phash":"(.*?)"', data, re.S)
+                     if phash: hash=phash.group(1)
+                     if str(item["accType"])=='1': sex = 'male'
+                     if str(item["accType"])=='2': sex = 'female'
+                     if str(item["accType"])=='3': sex = 'couple'
+                     phImage = 'http://camshot.zbiornik.com/'+str(item["broadcasturl"])+'-224.jpg'
+                     rtmpUrl = 'rtmp://'+str(item["server"])+'/videochat/?'+hash
+                     playpath = str(item["broadcasturl"])
+                     swfUrl = 'https://zbiornik.tv/wowza.swf?v50&b=100'
+                     baseUrl = 'https://zbiornik.tv/'+str(item["nick"])
+                     app = ' app=videochat/?'+hash
+                     flashVer = ' flashVer=WIN 28,0,0,161'
+                     #streamUrl = 'rtmp://'+str(item["server"])+'/videochat/?'+hash+' playpath='+str(item["broadcasturl"])+' swfUrl=http://zbiornik.tv/wowza.swf?v50&b=100 pageUrl=http://zbiornik.tv/'+str(item["nick"])+' live=1'
+                     #streamUrl = rtmpUrl + ' playpath=' + playpath +  ' tcUrl=' + rtmpUrl + ' swfUrl=' + swfUrl + ' pageUrl=' + baseUrl + ' app='+app+' live=1 conn=S:OK'+ flashVer
+                     streamUrl = 'rtmp://'+str(item["server"])+'/videochat/ playpath='+str(item["broadcasturl"])+' swfVfy=https://zbiornik.tv/wowza.swf?v50&b=100 pageUrl=https://zbiornik.tv/'+str(item["nick"])+app+' live=1'
+                     if str(item["accType"])<>'1':
+                        valTab.append(CDisplayListItem(str(item["nick"])+'    {'+sex+'}',str(item["nick"]),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', streamUrl, 0)], 0, phImage, None)) 
+              except Exception as e:
+                 printExc()
+           return valTab
+
+        if 'showup' == name:
+           self.MAIN_URL = 'http://showup.tv' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'showup.cookie')
+           #url = 'https://showup.tv/site/accept_rules?ref=https://showup.tv/'
+           url = 'https://showup.tv'
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           #accept_rules.showup.tv/
+           self.defaultParams['cookie_items'] = {'accept_rules':'true'}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li data-equalizer-watch class="stream"', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl[1:] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phDesc = self.cm.ph.getSearchGroups(item, '''<p>([^>]+?)</p>''', 1, True)[0]
+              transcoderaddr = self.cm.ph.getSearchGroups(item, '''transcoderaddr=['"]([^"^']+?)['"]''', 1, True)[0] 
+              streamid = self.cm.ph.getSearchGroups(item, '''streamid=['"]([^"^']+?)['"]''', 1, True)[0] 
+              uid = self.cm.ph.getSearchGroups(item, '''uid=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl =  'rtmp://'+transcoderaddr+':1935/webrtc/'+streamid+'_aac'
+              phImage = 'http://showup.tv/'+phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle+'     '+decodeHtml(phDesc),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 0)], 0, phImage, None)) 
+           return valTab
+
+        if 'xvideos' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="dyn', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''href=.*?>([^>]+?)</a>''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'xvideos-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name) 
+           valTab.insert(0,CDisplayListItem('--- Pornstars ---',   'Pornstars',   CDisplayListItem.TYPE_CATEGORY, ['https://www.xvideos.com/pornstars-index/list'], 'xvideos-pornstars', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Best Videos ---', 'Best Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/best/'],     'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],              'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- 100% Verified ---',  '100% Verified',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/verified/videos'],              'xvideos-clips', '', None)) 
+           #valTab.insert(0,CDisplayListItem('--- Channels ---',  'Channels',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/channels'],              'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Porno po polsku ---',  'Porno po polsku',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/porn/polski'],              'xvideos-clips', '', None)) 
+           self.SEARCH_proc='xvideos-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xvideos-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tags-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xvideos-clips', '', None)) 
+           return valTab
+        if 'xvideos-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xvideos.com/?k='+url.replace(' ','+'), 'xvideos-clips')
+           return valTab              
+        if 'xvideos-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '"active" href=', '</ul></div>', False)[1]
+           next = self.cm.ph.getSearchGroups(next, '''href=['"](/[^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace(' ','+')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'id="video', '</p></div>')
+           for item in data:
+              phTitle = re.compile('''title=['"]([^'^"]+?)['"]''').findall(item) 
+              for titel in phTitle:
+                 if not 'Verified' in titel: 
+                    phTitle = titel
+                    break
+              if not phTitle: phTitle = 'VIDEO'
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/video[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime.strip()+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Page: '+self.MAIN_URL+next, CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+next], name, '', None))                
+           return valTab
+
+        if 'hentaigasm' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://hentaigasm.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hentaigasm.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('Genres(.*?)</div></div>', data, re.S|re.I)
+           if not parse: return valTab
+           phCats = re.findall("<a href='(.*?)'.*?>(.*?)<", parse.group(1), re.S)
+           if phCats:
+              for (phUrl, phTitle) in phCats:
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hentaigasm-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- New ---", "New",        CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL], 'hentaigasm-clips', '',None))
+           return valTab
+        if 'hentaigasm-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('<div class="thumb">.*?title="(.*?)" href="(.*?)".*?<img src="(.*?)"', data, re.S)
+           if phMovies:
+              for (phTitle, phUrl, phImage) in phMovies:
+                  phImage = phImage.replace(' ','%20')
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           match = re.search("<div class='wp-pagenavi'>(.*?)</div>", data, re.S)
+           if match: match = re.findall("href='(.*?)'", match.group(1), re.S)
+           if match:
+                  phUrl = match[-1]
+                  valTab.append(CDisplayListItem('Next', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))                
+           return valTab
+
+        if 'youporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a data-espnode=', '</a>')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'categories_list porn-categories action', 'footer', False)[1]
+           if not data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href="/category/', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              #phTitle = self.cm.ph.getSearchGroups(item, '''ListElement">([^>]+?)<''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/category/[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl + 'time/?'
+              if phTitle and phUrl: 
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'youporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Discussed ---",     "Most Discussed",     CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_discussed/"],                   'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Favorited ---",     "Most Favorited",     CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_favorited/"],                   'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",        "Most Viewed",        CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_viewed/"],                      'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",          "Top Rated",          CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/top_rated/"],                        'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",                "New",                CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/"],                                  'youporn-clips', '',None))
+           self.SEARCH_proc='youporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'youporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.youporn.com/search/?query=%s' % url.replace(' ','+'), 'youporn-clips')
+           return valTab              
+        if 'youporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-video-id', '<i class="icon-thin-x">')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'data-espnode="videolist', 'footer', False)[1]
+           if len(data2): data = data2
+           data = data.split('data-video-id=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?jpg)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0].replace("&amp;","&")
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace("&amp;","&") 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.youporn.com' + phUrl
+              if len(phUrl)>5 and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime.strip()+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = next.replace("&amp;","&")
+              if next.startswith('/'): next = 'https://www.youporn.com' + next
+              valTab.append(CDisplayListItem('Next', 'Next: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           self.MAIN_URL = '' 
+           return valTab
+
+        if 'redtube' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.redtube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="categor', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'redtube-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Favored ---", "Most Favored", CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/mostfavored?period=alltime"], 'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",  "Most Viewed",  CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/mostviewed?period=alltime"],  'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",    "Top Rated",    CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/top?period=alltime"],         'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/"],                           'redtube-clips', '',None))
+           self.SEARCH_proc='redtube-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'redtube-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.redtube.com/?search=%s' % url.replace(' ', '+'), 'redtube-clips')
+           return valTab      
+        if 'redtube-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.redtube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul id="block_browse"', 'footer', False)[1]
+           if not data2: data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul id="search_results_block"', '</ul>', False)[1]
+           if not data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li id=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-mediumthumb=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getDataBeetwenMarkers(item, '<span class="duration">', '</a>', False)[1]
+              phRuntime = self._cleanHtmlStr(phRuntime).strip() 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phRuntime and not '/premium/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'xhamster' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://xhamster.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'letter-block', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/categories/[^"^']+?)['"]''', 1, True)[0]
+              if config.plugins.iptvplayer.xhamstertag.value and not phUrl:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/tags/[^"^']+?)['"]''', 1, True)[0] 
+                 if phUrl and phTitle: phTitle = phTitle+'   (tags)'
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle.strip(),phTitle.strip(),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xhamster-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/categories/hd-videos"], 'xhamster-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Best monthly ---",       "Best monthly",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/best/monthly"], 'xhamster-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---",       "Pornstars",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/pornstars"], 'xhamster-pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/"], 'xhamster-clips', '',None))
+           self.SEARCH_proc='xhamster-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xhamster-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xhamster.com/search.php?from=suggestion&q=%s&qcat=video' % url.replace(' ','+'), 'xhamster-clips')
+           return valTab              
+        if 'xhamster-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''data-page="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next: next = self.cm.ph.getSearchGroups(data, '''rel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('video-id=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              views =self.cm.ph.getSearchGroups(item, '''text">([^>]+?)</span''', 1, True)[0] 
+              like = self.cm.ph.getSearchGroups(item, '''like".*?text">([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+'\n'+views+'\n'+like,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = 'https://xhamster.com' + next
+              next = decodeUrl(next)
+              valTab.append(CDisplayListItem('Next', 'Page: '+next.split('/')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+        if 'xhamster-pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'letter-block', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/pornstars/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle.strip(),phTitle.strip(),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xhamster-clips', '', None)) 
+           return valTab
+
+        if 'xhamsterlive' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://xhamsterlive.com' 
+           #url='http://xhamsterlive.com/api/front/models'
+           url='https://go.hpyrdr.com/api/models?limit=9999'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           country = ''
+           Url = ''
+           result = simplejson.loads(data)
+           try:
+              for item in result["models"]:
+                 ID = str(item["id"]) 
+                 Name = str(item["username"])
+                 try:
+                    Url = str(item["stream"]['url'])
+                    #printDBG( 'Host Url: '+Url )
+                 except Exception:
+                    printExc()
+                 Image = str(item["snapshotUrl"].replace('\/','/'))  
+                 status = str(item["status"])
+                 try:
+                    country = ' [Country: '+str(item["modelsCountry"]).upper()+']'
+                 except Exception:
+                    printExc()
+                 if status == "public":
+                    valTab.append(CDisplayListItem(Name,Name+country,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 0)], 0, Image, None)) 
+           except Exception:
+              printExc()
+           return valTab
+
+        if 'eporner' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.eporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'div class="categoriesbox', '</div> </div>')
+           data = data.split('class="categoriesbox')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phTitle.replace(' movies', '').replace('Porn Videos', '')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'eporner-clips', phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- 4k ---",        "4k",        CDisplayListItem.TYPE_CATEGORY,["https://www.eporner.com/category/4k-porn/"], 'eporner-clips', '','/4k/'))
+           valTab.insert(0,CDisplayListItem("--- HD ---",        "HD",        CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/hd/"], 'eporner-clips', '','/hd/'))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/top_rated/"], 'eporner-clips', '','/top_rated/'))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",   "Popular",   CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/weekly_top/"], 'eporner-clips', '','/weekly_top/'))
+           valTab.insert(0,CDisplayListItem("--- On Air ---",    "On Air",    CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/currently/"], 'eporner-clips', '','/currently/'))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/"], 'eporner-clips', '',''))
+           self.SEARCH_proc='eporner-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'eporner-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.eporner.com/search/%s/' % url.replace(' ','+'), 'eporner-clips')
+           return valTab    
+        if 'eporner-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.eporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = data.split('data-vp')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''mbtim".+?>([^>]+?)<''', 1, True)[0]
+              mbrate = self.cm.ph.getSearchGroups(item, '''mbrate".+?>([^>]+?)<''', 1, True)[0]
+              mbvie = self.cm.ph.getSearchGroups(item, '''mbvie".+?>([^>]+?)<''', 1, True)[0]
+              if mbrate: mbrate = '['+mbrate+'] '
+              if mbvie: mbvie = '[Views: '+mbvie+'] '
+              size = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)</span>''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle)+'    '+size,'['+phRuntime+'] '+decodeHtml(phTitle)+'    '+size+'\n'+mbrate+mbvie,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', 'Next: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', catUrl))                
+           return valTab
+
+        if 'pornhub' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="cat', '</li>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'pornhub-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---",         "HD",          CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?c=38"], 'pornhub-clips', 'http://cdn1a.static.pornhub.phncdn.com/images/categories/38.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---",    "Longest",     CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=lg"], 'pornhub-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",  "Top Rated",   CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=tr"], 'pornhub-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed", CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=mv"], 'pornhub-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent", CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=mr"], 'pornhub-clips', '',None))
+           self.SEARCH_proc='pornhub-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornhub-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornhub.com/video/search?search=%s' % url.replace(' ','+'), 'pornhub-clips')
+           return valTab    
+        if 'pornhub-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host2 getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''"page_next"><a href=['"]([^"^']+?)['"]''')[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'videoblock', '</li>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-mediumthumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"duration">([^"^']+?)<''', 1, True)[0] 
+              phAdded = self.cm.ph.getSearchGroups(item, '''class="added">([^"^']+?)<''', 1, True)[0] 
+              OldImage = self.cm.ph.getSearchGroups(item, '''data-image=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.MAIN_URL+phUrl
+              if not OldImage:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+ '\n[Added: '+phAdded+'] ',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Next '+re.sub('.+page=', '', next), CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+next.replace('&amp;','&')], name, '', None))        
+           return valTab
+
+        if 'hdporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hdporn.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="content">', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.getFullUrl(phUrl, self.MAIN_URL)
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hdporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",           CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top-rated/"]  , 'hdporn-clips','', None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",           CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL]  , 'hdporn-clips','', None))
+           return valTab
+        if 'hdporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next = re.findall('<div id="pagination">.*?</div>', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="content', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''TIME:([^"^']+?)<''', 1, True)[0].strip()
+              phUrl = self.cm.getFullUrl(phUrl, self.MAIN_URL)
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+'] '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.findall("</a><a href='(.*?)'>", next[0], re.S)
+              if len(next)>0:
+                 #next = self.cm.getFullUrl(next[0], self.MAIN_URL)
+                 valTab.append(CDisplayListItem('Next', next[0].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [self.cm.getFullUrl(next[0], url)], name, '', None))                
+              return valTab
+  
+        if 'beeg' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://beeg.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'beeg.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           self.beeg_version = self.cm.ph.getSearchGroups(data, '''cpl/(\d+)\.js''', 1, True)[0] 
+           if not self.beeg_version: self.beeg_version = self.cm.ph.getSearchGroups(data, '''beeg_version = (\d+);''', 1, True)[0] 
+           if not self.beeg_version: self.beeg_version = '1589461492752' 
+
+           printDBG( 'Host beeg_version: '+str(self.beeg_version) )
+           url = 'https://beeg.com/static/cpl/%s.js' % self.beeg_version
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data2: '+data )
+           self.beeg_salt = self.cm.ph.getSearchGroups(data, '''beeg_salt=['"]([^"^']+?)['"]''', 1, True)[0] 
+           self.beeg_api = '//beeg.com/api/v6/' 
+
+           printDBG( 'Host self.beeg_salt: '+self.beeg_salt )
+           printDBG( 'Host self.beeg_api: '+self.beeg_api )
+
+           url = 'https:%s%s/index/main/0/mobile' % (self.beeg_api, self.beeg_version)
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data3: '+data )
+           result = byteify(simplejson.loads(data))
+           for item in result["tags"]:
+              phTitle = str(item["tag"]).title()
+              phUrl = 'http:%s%s/index/tag/$PAGE$/mobile?tag=%s' % (self.beeg_api, self.beeg_version, urllib.quote(phTitle, '').lower())
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'beeg-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           return valTab    
+        if 'beeg-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.beegfullhd = config.plugins.iptvplayer.beeg.value
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 0
+           else:
+              self.page += 1
+           url = url.replace('$PAGE$', '%s' % str(self.page))
+           printDBG( 'Host current url: '+url )
+           printDBG( 'Host current next: '+next )
+           printDBG( 'Host current page: '+ str(self.page) )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'beeg.cookie')
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 for item in result["videos"]:
+                    phTitle = str(item["title"])
+                    if not phTitle: phTitle = str(item["ps_name"])
+                    #phVideoId = str(item["id"])
+                    try:
+                       Added = str(item["datetime"])
+                    except Exception:
+                       printExc()
+                       Added = ''
+                    try:
+                       Time = str(item["duration"])
+                       m, s = divmod(int(Time), 60)
+                       Time = "[%02d:%02d] " % (m, s)
+                    except Exception:
+                       printExc()
+                       Time = ''
+                    try:
+                       pid = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''pid['"]:([^"^']+?),''', 1, True)[0].strip()
+                       start = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''start['"]:([^"^']+?),''', 1, True)[0].strip()
+                       end = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''end['"]:([^"^']+?),''', 1, True)[0].strip()
+                       phVideoSvId = str(item["svid"])+'?v=2&p='+pid+'&s='+start+'&e='+end
+                    except Exception:
+                       printExc()
+                       phVideoSvId = ''
+                    phUrl = 'https:%s%s/video/%s' % (self.beeg_api, self.beeg_version, phVideoSvId)
+                    try:
+                        Image = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''image['"]:\s['"]([^"^']+?)['"]''', 1, True)[0]
+                        phImage = 'http://img.beeg.com/236x177/%s' % Image
+                        if not Image: phImage = 'https://i.pinimg.com/474x/8e/89/91/8e89916e7e4d8c0b314d548578d4aba5.jpg'
+                    except:
+                        phImage = 'https://i.pinimg.com/474x/8e/89/91/8e89916e7e4d8c0b314d548578d4aba5.jpg'
+                    valTab.append(CDisplayListItem(phTitle,Time+phTitle+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, phVideoSvId)) 
+           except Exception:
+              printExc()
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+2), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+           return valTab
+
+        if 'pornrabbit' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornrabbit.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="top-category-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace(' Porn Videos','')
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornrabbit-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/most-viewed/'],             'pornrabbit-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/top-rated/'],             'pornrabbit-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/videos/'],             'pornrabbit-clips',    '', None))
+           self.SEARCH_proc='pornrabbit-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornrabbit-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornrabbit.com/%s/' % url.replace(' ','+'), 'pornrabbit-clips')
+           return valTab
+        if 'pornrabbit-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<!-- item -->', '<!-- item END -->')
+           data = data.split('data-video=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace(' Porn Videos','')
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0] 
+              if Runtime:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'https://www.pornrabbit.com' + next
+                 if next.startswith('page'): next = re.sub('page.+', '', url) + next
+                 valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+           return valTab
+
+        if 'pornhd' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhd.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tag-150', 'class="footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'http://www.pornhd.com' + phUrl 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornhd-clips', self.FullUrl(phImage), phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channel ---",       "Channel",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhd.com/channel"], 'pornhd-pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---",       "Pornstars",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhd.com/pornstars"], 'pornhd-pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhd.com/"], 'pornhd-clips', '',None))
+           self.SEARCH_proc='pornhd-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornhd-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornhd.com/search?search=%s' % url.replace(' ','+'), 'pornhd-clips')
+           return valTab
+        if 'pornhd-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article class="video-item ">', '</article>')
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0].replace('.webp','.jpg')
+              if not Image: Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('.webp','.jpg')
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              if Url.startswith('/'): Url = 'http://www.pornhd.com' + Url 
+              valTab.append(CDisplayListItem(decodeHtml(Title),'['+Runtime+'] '+decodeHtml(Title),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'http://www.pornhd.com' + next
+                 valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))             
+           return valTab
+        if 'pornhd-channel' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhd.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tag', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if Url.startswith('/'): Url = 'http://www.pornhd.com' + Url 
+              if Title:
+                 valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'pornhd-clips', Image, None)) 
+           return valTab
+        if 'pornhd-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhd.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article class="small-thumb">', '</article>')
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.FullUrl(self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0])
+              if not Image: Image = self.FullUrl(self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0])
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if Url.startswith('/'): Url = 'http://www.pornhd.com' + Url 
+              Image = strwithmeta(Image, {'Referer':url, 'Cookie':cookieHeader})
+              valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'pornhd-clips', Image, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'http://www.pornhd.com' + next
+                 valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+           return valTab
+
+        if 'AH-ME' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.ah-me.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="moviec', '</div>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'AH-ME-clips', phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Long movies ---",       "Long movies",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/long-movies/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top rated ---",       "Top rated",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/top-rated/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- High definition ---",       "High definition",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/high-definition/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most favorited ---",       "Most favorited",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/mostfavorites/page1.html"], 'AH-ME-clips', '',None))
+           self.SEARCH_proc='ahme-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ahme-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.ah-me.com/search/%s/' % url.replace(' ','+'), 'AH-ME-clips')
+           return valTab
+        if 'AH-ME-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.ah-me.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'next"><a class="color" href="', '">Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="moviec', '/span></p>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''class="time">([^"^']+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(Title),'['+Runtime+'] '+decodeHtml(Title),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if next:
+              printDBG( 'Host next: '+next )
+              valTab.append(CDisplayListItem('Next', 'Next', CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'CHATURBATE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://chaturbate.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="paging">', '</ul>', False)[1]
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl<>'next':
+              valTab.append(CDisplayListItem('Female', 'Female',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/female-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Featured', 'Featured',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Couple', 'Couple',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/couple-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Transsexual', 'Transsexual',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/transsexual-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('HD', 'HD',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/hd-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Teen (18+)', 'Teen',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/teen-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('18 to 21', '18 to 21',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/18to21-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('20 to 30', '20 to 30',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/20to30-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('30 to 50', '30 to 50',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/30to50-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Euro Russian', 'Euro Russian',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/euro-russian-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Exhibitionist', 'Exhibitionist',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/exhibitionist-cams/'],'CHATURBATE-clips', '', None)) 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/tag/', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'CHATURBATE-clips', '', None)) 
+           if next_page:
+              next_page = self.cm.ph.getAllItemsBeetwenMarkers(next_page, '<li', '</li>')
+              for item in next_page:
+                 next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next 
+              if next == '#': return valTab
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))  
+           return valTab
+        if 'CHATURBATE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           match = re.search('class="endless_separator".*?<li><a href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="room_list_room', 'viewers</li>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Gender=''
+              Age=self.cm.ph.getSearchGroups(item, '''<span class="age gender.">([^>]+?)<''', 1, True)[0]
+              Description=''
+              Location=self.cm.ph.getSearchGroups(item, '''location" style="display: none;">([^>]+?)<''', 1, True)[0]
+              Viewers=''
+              bitrate = self.cm.ph.getSearchGroups(item, '''thumbnail_label.*?>([^>]+?)<''', 1, True)[0]
+              if Url.startswith('/'): Url = self.MAIN_URL + Url 
+              Image = strwithmeta(Image, {'Referer':url, 'Cookie':cookieHeader})
+              valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title)+'   [Age: '+decodeHtml(Age)+']           [Location: '+decodeHtml(Location)+']   [info: '+bitrate+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if match:
+              printDBG( 'Host listsItems Next: '  +match.group(1) )
+              if match.group(1).startswith('/'): Url = self.MAIN_URL + match.group(1) 
+              valTab.append(CDisplayListItem('Next', match.group(1), CDisplayListItem.TYPE_CATEGORY, [Url], name, '', None))                
+           return valTab
+
+        if 'AMATEURPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.amateurporn.net' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           match = re.search('class="endless_separator".*?<li><a href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="item"', '</a>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Gender=''
+              Age=self.cm.ph.getSearchGroups(item, '''<span class="age gender.">([^>]+?)<''', 1, True)[0]
+              Description=''
+              Location=self.cm.ph.getSearchGroups(item, '''location" style="display: none;">([^>]+?)<''', 1, True)[0]
+              Viewers=''
+              bitrate = self.cm.ph.getSearchGroups(item, '''thumbnail_label.*?>([^>]+?)<''', 1, True)[0]
+              if Url.startswith('/'): Url = self.MAIN_URL + Url 
+              valTab.append(CDisplayListItem(Title,Url,CDisplayListItem.TYPE_CATEGORY, [Url],'AMATEURPORN-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='AMATEURPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'AMATEURPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.amateurporn.me/search/%s/' % url.replace(' ','+'), 'AMATEURPORN-clips')
+           return valTab
+        if 'AMATEURPORN-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+            data = data.split('<div class="item  ">')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('Model ','')
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+                Runtime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+                Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0] 
+                if Added: Added = 'Added: '+ Added
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+phTitle+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            if next:
+                page = self.cm.ph.getSearchGroups(str(next), '''from:([^"^']+?)['"]''')[0]
+                next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+                valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+            return valTab
+
+        if 'FOTKA-PL-KAMERKI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = url 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('"rooms":(.*?),"status":"OK"', data, re.S)
+           if not parse: return valTab
+           #printDBG( 'Host listsItems parse.group(1): '+parse.group(1) )
+           result = simplejson.loads(parse.group(1))
+           if result:
+              for item in result:
+                 try:
+                    Name = str(item["name"])
+                    Age = str(item["age"])
+                    Url = str(item["streamUrl"].replace('\/','/'))+' live=1'
+                    Title = str(item["title"])
+                    Viewers = str(item["viewers"])
+                    Image = str(item["av_126"].replace('\/','/'))
+                    hls = str(item["streamMPEGHLSUrl"].replace('\/','/'))
+                    try:
+                       Image = str(item["av_640"].replace('\/','/'))
+                    except Exception: printExc()
+                    if config.plugins.iptvplayer.fotka.value == '0': Url = hls.replace('https','http').replace('manifest.hls','index.m3u8')
+                    valTab.append(CDisplayListItem(Name,'[Age : '+Age+']'+'   [Views:  '+Viewers+']      '+Title, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 0)], 0, Image, None)) 
+                 except Exception: printExc()
+           return valTab
+
+        if 'CAM4-KAMERKI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.cam4.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cam4.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           url = 'https://cam4.com/tags?json=true&index=0&count=75&category='
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           self.page = 1
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 for item in result:
+                    phTitle = str(item["name"])
+                    valTab.append(CDisplayListItem(phTitle, phTitle, CDisplayListItem.TYPE_CATEGORY, [phTitle], 'CAM4-KAMERKI-clips', '', None))                
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["hd"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Poland ---",       "Polskie",       CDisplayListItem.TYPE_CATEGORY,["female&country=pl"], 'CAM4-KAMERKI-clips', '',None))
+           #valTab.insert(0,CDisplayListItem("--- Couples ---",       "Pary",       CDisplayListItem.TYPE_CATEGORY,["couple"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Male ---",       "Mężczyźni",       CDisplayListItem.TYPE_CATEGORY,["male"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Transsexual ---",       "Transseksualiści",       CDisplayListItem.TYPE_CATEGORY,["shemale"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "Nowe",       CDisplayListItem.TYPE_CATEGORY,["new"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Female ---",       "Kobiety",       CDisplayListItem.TYPE_CATEGORY,["female"], 'CAM4-KAMERKI-clips', '',None))
+           return valTab 
+        if 'CAM4-KAMERKI-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cam4.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           Url = 'https://www.cam4.com/directoryCams?directoryJson=true&online=true&url=true&gender={0}&page={1}'.format(url, str(self.page))
+           sts, data = self.get_Page(Url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 for item in result["users"]:
+                    phTitle = str(item["username"])
+                    try:
+                       phImage = 'https://snapshots.xcdnpro.com/thumbnails/{0}?s={1}'.format(str(item["username"]), str(item["thumbnailId"])) 
+                    except Exception:
+                       printExc()
+                       phImage = str(item["profileImageLink"])
+                    #phUrl = str(item["hlsPreviewUrl"])
+                    try:
+                       age = str(item["age"])
+                       countryCode = str(item["countryCode"])
+                    except Exception:
+                       printExc()
+                    phUrl = 'https://www.cam4.com/{0}'.format(str(item["username"]))
+                    valTab.append(CDisplayListItem(phTitle,'[Age: '+age+']  ' + phTitle+'\nCountry: '+countryCode.upper(),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+
+           valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))                
+           return valTab 
+
+        if 'CAMSODA' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            self.MAIN_URL = 'https://www.camsoda.com/' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'camsoda.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return
+            #printDBG( 'Host listsItems data: '+data )
+            #"template":["username","display_name","connections","sort_value","subject_html","stream_name","tsize","server_prefix"]
+            dane = re.search('"results":(.*?)}]', data, re.S)
+            if dane: 
+                dane = dane.group(1)+'}]'
+                printDBG( 'Host listsItems json: '+dane )
+                try:
+                    result = simplejson.loads(dane)
+                    tsize = '355x200'
+                    Image = ''
+                    if result:
+                        for item in result:
+                            subject_html = ''
+                            try:
+                                Name = str(item["username"]) #.encode("utf-8")
+                                printDBG( 'Host Name: '+Name )
+                            except Exception: printExc()
+                            try:
+                                Name = str(item["tpl"][1])
+                                printDBG( 'Host Name: '+Name )
+                            except Exception: printExc()
+                            try:
+                                stream_name = str(item["stream_name"]) #.encode("utf-8")
+                                printDBG( 'Host stream_name: '+stream_name )
+                            except Exception: printExc()
+                            try:
+                                stream_name = str(item["tpl"][2])
+                                printDBG( 'Host stream_name: '+stream_name )
+                            except Exception: printExc()
+                            try:
+                                subject_html = str(item["tpl"][5])
+                                printDBG( 'Host subject_html: '+subject_html )
+                            except Exception: printExc()
+                            try:
+                                enc = stream_name.split('-')[-1]
+                            except Exception: printExc()
+                            try:
+                                Image = str(item["tpl"][9])
+                            except Exception: printExc()
+         
+                            videourl = "https://www.camsoda.com/api/v1/video/vtoken/" + Name + "?username=guest_" + str(random.randrange(100, 55555))
+                            if Image.startswith('//'): Image = 'http:' + Image 
+                            try:
+                               phImage = urlparser.decorateUrl(phImage, {'Referer': 'http://www.camsoda.com'})
+                            except: pass
+                            if config.plugins.iptvplayer.camsoda.value == '1':
+                                videourl = 'rtmp'+videourl
+                                stream = 'rtmp'
+                            else:
+                                stream = 'm3u8'
+                            if stream_name:
+                                valTab.append(CDisplayListItem(stream_name, stream_name+'   '+stream+'\n'+subject_html, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', videourl, 1)], 0, Image, None)) 
+                except Exception: printExc()
+            return valTab 
+
+        if 'STREAMATE' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://streamate.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            query_data = { 'url': url,  'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="cats__content">', 'class="recents__list">', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+            for item in data:
+                Title = self._cleanHtmlStr(item).split(' ')[1]
+                Title = self.cm.ph.getDataBeetwenMarkers(item, '</span>', '</a>', False)[1]
+                Title = str(Title).strip()
+                Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if Url.startswith('/'): Url = 'https://streamate.com' + Url 
+                valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'STREAMATE-clips', '', None)) 
+            return valTab 
+        if 'STREAMATE-clips' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://streamate.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            query_data = { 'url': url,  'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination">', 'Next', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="js-dynamicsearch" data-status="online"', '</figure>')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''data-name=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-thumbid=['"]([^"^']+?)['"]''', 1, True)[0] 
+                age = self.cm.ph.getSearchGroups(item, '''"year">([^>]+?)<''', 1, True)[0].strip()
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                phImage = 'http://m2.nsimg.net/biopic/original4x3/' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'  [Age:'+age+']', CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phTitle, 1)], 0, phImage, None)) 
+            if next:
+                next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+                if next:
+                    next = next[-1]
+                    if next.startswith('/'): next = 'https://streamate.com' + next
+                    valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+            return valTab 
+
+        if 'NAKED' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://www.naked.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'naked.cookie')
+            host = 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Mobile Safari/537.36'
+            header = {'User-Agent': host, 'Accept':'application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest','Content-Type':'application/x-www-form-urlencoded'} 
+            query_data = {'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                sts, data = self.cm.getPage(url, query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            data = data.replace('\\','')
+            printDBG( 'Host listsItems data: '+data )
+            data = data.split('class="model-wrapper"')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('Model ','')
+                phUrl = self.cm.ph.getSearchGroups(item, '''class="modelLink"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''live-image-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                desc = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+                age = self.cm.ph.getSearchGroups(item, '''model-age">([^>]+?)<''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if not 'http' in phUrl: phUrl = 'https://www.naked.com/?model=' + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'\n'+desc, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            return valTab 
+
+        if 'YOUJIZZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youjizz.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'class="footer-category category-link', 'footer-links', False)[1]
+           if len(data2): data = data2
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li><a href="/categories/', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)<''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'YOUJIZZ-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/search/HighDefinition-1.html#"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/top-rated/1.html"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/newest-clips/1.html"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",       "Popular",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/most-popular/1.html"], 'YOUJIZZ-clips', '',None))
+           self.SEARCH_proc='YOUJIZZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'YOUJIZZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.youjizz.com/search/%s-1.html' % url.replace(' ','+'), 'YOUJIZZ-clips')
+           return valTab
+        if 'YOUJIZZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.youjizz.com' 
+           url = url.replace(' ','%20')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next=''
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '</div>', False)[1]
+           next_page = self.cm.ph.getAllItemsBeetwenMarkers(next_page, '<li', '</li>')
+           for item in next_page:
+              next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-thumb', 'format-views')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''html'>([^"^']+?)</a>''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage=='': phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"time">([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle).strip(),'['+phRuntime+'] '+decodeHtml(phTitle).strip(),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'DACHIX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.dachix.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="listing-categories">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl+"/videos"],'DACHIX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---",       "Longest",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=longest"], 'DACHIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=popular"], 'DACHIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",       "Most Viewed",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=viewed"], 'DACHIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=rated"], 'DACHIX-clips', '',None))
+           self.SEARCH_proc='DACHIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'DACHIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.dachix.com/s/%s' % url.replace(' ','+'), 'DACHIX-clips')
+           return valTab
+        if 'DACHIX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class=\'thumb_container video\'', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getSearchGroups(item, '''S">([^>]+?)[-<]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'http://www.dachix.com' + phUrl
+              if phUrl.startswith('www'): phUrl = 'http://' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'http://www.dachix.com' + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'DRTUBER' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.drtuber.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'drtuber.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'contain_cols', '</div> </div> </div> </div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if '/gay/' in phUrl: phTitle = phTitle + ' gay'
+              if '/shemale/' in phUrl: phTitle = phTitle + ' shemale'
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'DRTUBER-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='DRTUBER-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'DRTUBER-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.drtuber.com/search/videos/%s' % url.replace(' ','+'), 'DRTUBER-clips')
+           return valTab
+        if 'DRTUBER-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'drtuber.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/video/', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'http://www.drtuber.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next 
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'MYFREECAMS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.myfreecams.com/' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'myfreecams.cookie')
+           rm(COOKIEFILE)
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage('https://new.myfreecams.com/server', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #serwery = self.cm.ph.getDataBeetwenMarkers(data, 'ServerConfig = ', ';', False)[1]
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 self.h5video_servers = result["h5video_servers"]
+                 self.wzobs_servers = result["wzobs_servers"]
+                 self.ngvideo_servers = result["ngvideo_servers"]
+                 self.websocket_servers = result["websocket_servers"]
+                 self.chat_servers = result["chat_servers"]
+           except Exception:
+              printExc()
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(self.MAIN_URL, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+
+           self.cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           self.baf = 'baf='+self.cm.getCookieItem(COOKIEFILE,'baf')+';'
+           self.cid = 'cid='+self.cm.getCookieItem(COOKIEFILE,'cid')+';'
+
+           age = ''
+           country = ''
+           city = ''
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class=slm_c>', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,age +phTitle+'\n'+city+' '+country,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phTitle, 1)], 0, phImage, None)) 
+           if config.plugins.iptvplayer.xxxsortmfc.value: valTab.sort(key=lambda poz: poz.name)
+           return valTab 
+
+        if 'TNAFLIX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.tnaflix.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'TNAFLIX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Featured ---",       "Featured",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/featured/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/popular/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/toprated/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/new/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           self.SEARCH_proc='TNAFLIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'TNAFLIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.tnaflix.com/search.php?what=%s&tab=' % url.replace(' ','+'), 'TNAFLIX-clips')
+           return valTab
+        if 'TNAFLIX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-vid=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''videoDuration'>([^>]+?)<''', 1, True)[0] 
+              Added = self.cm.ph.getSearchGroups(item, '''floatLeft\'>([^>]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.tnaflix.com' + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'LIVEJASMIN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab.insert(0,CDisplayListItem('--- Transgender ---', 'Transgender', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/transgender'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Couple ---', 'Couple', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/couple'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Mature ---', 'Mature', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/mature'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Fetish ---', 'Fetish', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/fetish'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Lesbian ---', 'Lesbian', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/lesbian'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Soul_mate ---', 'Soul_mate', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/soul_mate'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Hot_flirt ---', 'Hot_flirt', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/hot_flirt'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Girl ---', 'Girl', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/girl'], 'LIVEJASMIN-clips', '', None))
+           return valTab 
+        if 'LIVEJASMIN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.livejasmin.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try: data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error cookie' )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           sessionID = self.cm.ph.getSearchGroups(data, '''"jsm2session":['"]([^"^']+?)['"]''')[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'listPagePerformers =', '];', False)[1]
+           result = simplejson.loads(data2+']')
+           phImage = ''
+           if result:
+              for item in result:
+                 try:
+                    phTitle = str(item["pid"])
+                    phUrl = 'http://www.livejasmin.com/en/chat/'+phTitle+'?session='+sessionID
+                    try:
+                       ID = str(item["id"])
+                       phImage = self.cm.ph.getDataBeetwenMarkers(data, 'container_'+ID, '</picture>', False)[1]
+                       phImage = self.cm.ph.getSearchGroups(phImage, '''jpg-src=['"]([^"^']+?)['"]''')[0] 
+                       #printDBG( 'Host phImage: '+str(phImage) )
+                    except Exception:
+                       printExc()
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 except Exception:
+                    printExc()
+           data2 = None
+           return valTab 
+
+        if 'EL-LADIES' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.el-ladies.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ladies.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data ) 
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Niches', 'Archive', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = decodeHtml(phTitle)
+              #phUrl = '%s/?search=%s&fun=0&niche=%s&pnum=%s&hd=%s' % (self.MAIN_URL, phTitle, ID, str(1), 1) 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'EL-LADIES-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://just.eroprofile.com/rss.xml"], 'EL-LADIES-new', '',None))
+           self.SEARCH_proc='EL-LADIES-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EL-LADIES-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://search.el-ladies.com/?hd=0&search=%s&fun=0&niche=0' % url.replace(' ','+'), 'EL-LADIES-clips')
+           return valTab
+        if 'EL-LADIES-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'ladies.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data ) 
+            data = data.split('<div class="cnt">')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self._cleanHtmlStr(item)
+                if '\n' in phTitle: phTitle = phTitle.split('\n')[0]
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle), CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            return valTab 
+
+        if 'EL-LADIES-new' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('CDATA\[(.*?)\].*?src="(.*?)".*?<link>(.*?)</link>', data, re.S) 
+           if phMovies:
+              for (phTitle, phImage, phUrl) in phMovies:
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'EXTREMETUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.extremetube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'extremetube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h1>', 'footer', False)[1]
+           printDBG( 'Host listsItems data: '+data )
+           if '<option value' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<option value', '</option>')
+           elif 'fromPage=categories' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="thumb-cat', '</a>')
+           else:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''value=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              #phUrl = phUrl.replace('?fromPage=categories', '') + '?format=json&page=$PAGE$'
+              #if not 'json' in phUrl: phUrl = phUrl + '?format=json&page=$PAGE$'
+              if phTitle != "Select a Category":
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'EXTREMETUBE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='EXTREMETUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EXTREMETUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.extremetube.com/videos?search=%s' % url.replace(' ','+'), 'EXTREMETUBE-clips')
+           return valTab
+        if 'EXTREMETUBE-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'extremetube.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0]
+            data = data.split('<li id="obj')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-srcmedium=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+                Runtime = self.cm.ph.getSearchGroups(item, '''data-duration=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            if next:
+                if next.startswith('/'): next = self.MAIN_URL + next
+                valTab.append(CDisplayListItem('Next', 'Next: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+            return valTab
+
+
+        if 'XXXLIST' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'xxxlist.txt' 
+           URLLIST_FILE    = 'xxxlist.txt'
+           self.filespath = config.plugins.iptvplayer.xxxlist.value
+           self.sortList = config.plugins.iptvplayer.xxxsortuj.value
+           self.currFileHost = IPTVFileHost() 
+           self.currFileHost.addFile(self.filespath + URLLIST_FILE, encoding='utf-8')
+           tmpList = self.currFileHost.getGroups(self.sortList)
+           for item in tmpList:
+               if '' == item: title = (_("Other"))
+               else:          title = item
+               valTab.append(CDisplayListItem(title,title,CDisplayListItem.TYPE_CATEGORY, [title],'XXXLIST-clips', '', None)) 
+           return valTab
+        if 'XXXLIST-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           desc = ''
+           icon = ''
+           tmpList = self.currFileHost.getAllItems(self.sortList)
+           for item in tmpList:
+               if item['group'] == url:
+                   Title = item['title_in_group']
+                   Url = item['url']
+                   if item.get('icon', '') != '':
+                      icon = item.get('icon', '')
+                   if item.get('desc', '') != '':
+                      desc = item['desc']
+                   if Url.endswith('.mjpg') or Url.endswith('.cgi'):
+                      valTab.append(CDisplayListItem(Title, Url,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', Url, 1)], 0, '', None)) 
+                   else:
+                      valTab.append(CDisplayListItem(Title, Url+'\n'+desc,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, icon, None)) 
+               elif url == (_("Other")) and item['group'] == '':
+                   Title = item['full_title']
+                   Url = item['url']
+                   if item.get('icon', '') != '':
+                      icon = item.get('icon', '')
+                   if item.get('desc', '') != '':
+                      desc = item['desc']
+                   if Url.endswith('.mjpg') or Url.endswith('.cgi'):
+                      valTab.append(CDisplayListItem(Title, Url,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', Url, 1)], 0, '', None)) 
+                   else:
+                      valTab.append(CDisplayListItem(Title, Url+'\n'+desc,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, icon, None)) 
+           return valTab
+
+        if 'BONGACAMS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pl.bongacams.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data ) 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="ht_item"', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].split('/')[-1]
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BONGACAMS-clips', '', phTitle)) 
+           valTab.insert(0,CDisplayListItem("--- Couples ---", "Pary",       CDisplayListItem.TYPE_CATEGORY,["couples"], 'BONGACAMS-clips', '',"---couples"))
+           valTab.insert(0,CDisplayListItem("--- Male ---",       "Mężczyźni",       CDisplayListItem.TYPE_CATEGORY,["male"], 'BONGACAMS-clips', '',"---male"))
+           valTab.insert(0,CDisplayListItem("--- Transsexual ---",       "Transseksualiści",       CDisplayListItem.TYPE_CATEGORY,["transsexual"], 'BONGACAMS-clips', '',"---transsexual"))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "Nowe",       CDisplayListItem.TYPE_CATEGORY,["new"], 'BONGACAMS-clips', '',"---new"))
+           valTab.insert(0,CDisplayListItem("--- Female ---",       "Kobiety",       CDisplayListItem.TYPE_CATEGORY,["females"], 'BONGACAMS-clips', '',"---females"))
+           return valTab 
+        if 'BONGACAMS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = url
+           if catUrl != 'Next': 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           if catUrl.startswith('---'): 
+              url1 = url
+           else:
+              url1 = 'females'
+           url = 'https://en.bongacams.com/tools/listing_v3.php?livetab=%s&online_only=true&offset=%s&tag=%s' % (url1, str((self.page*24)-24), url)
+           host = 'Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4'
+           header = {'User-Agent': host, 'Accept':'application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest','Content-Type':'application/x-www-form-urlencoded', 'Referer':'https://en.bongacams.com/', 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'second bonga-clips data: '+data )  
+
+           x = 0
+
+           result = byteify(simplejson.loads(data))
+           if result:
+              try:
+                 for item in result["models"]:
+                    age = ''
+                    phImage = ''
+                    #printDBG( 'Host item: '+str(item) )
+                    try:
+                       #online = str(item["online"])  
+                       room = str(item["room"])
+                       phTitle = str(item["username"]) 
+                       phTitle2 = str(item["display_name"])
+                    except Exception:
+                       printExc()
+                       continue
+                    try:
+                       phImage = str(item["thumb_image"]) 
+                       if phImage.startswith('//'): phImage = 'http:' + phImage
+                    except Exception:
+                       printExc()
+                    bitrate = '' 
+                    try:
+                       bitrate = str(item["vq"]) 
+                    except Exception:
+                       printExc()
+                    try: 
+                       age = ' [Age: '+str(item["display_age"])+']  ' 
+                    except Exception:
+                       printExc()
+                    printDBG( 'Host phTitle: '+phTitle )
+                    #printDBG( 'Host online: '+online )
+                    printDBG( 'Host room: '+room )
+                    phUrl = phTitle
+                    if room != 'vip':
+                       x += 1
+                       valTab.append(CDisplayListItem(phTitle2+'   ['+bitrate.upper()+']',phTitle2+'  ('+phTitle+')   '+age+' ['+bitrate.upper()+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 printDBG( 'Host ile: '+str(x) )
+              except Exception:
+                 printExc() 
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+
+           return valTab 
+
+        if 'RUSPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://rusporn.tv' 
+           url = 'https://rusvidos.tv/index2.php'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'rusporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'category-list', '<div class="cls">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)[<"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              printDBG( 'Host listsItems phUrl: '  +phUrl )
+              printDBG( 'Host listsItems phTitle: '+phTitle )
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'RUSPORN-clips', '', phUrl)) 
+           self.SEARCH_proc='RUSPORN-search'
+           #valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           #valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'RUSPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://rusvidos.tv/poisk/?q=%s' % url.replace(' ','+'), 'RUSPORN-clips')
+           return valTab
+        if 'RUSPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data = data.split('class="item')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if 'base64' in phImage:  phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              Time = self.cm.ph.getSearchGroups(item, '''</i>([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time.strip()+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'PORN720' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://porn720.net' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'id="menu-menu', 'class="sub-header', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phUrl.split('/')[-1],phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORN720-clips', '', phUrl)) 
+           return valTab
+        if 'PORN720-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = re.search('rel="next".*?href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<figure', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              phUrl = next.group(1)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', catUrl))                
+           return valTab
+
+        if 'PORNTREX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.porntrex.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           self.page = 0
+           #printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="list-categories', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="item"', '</a>')
+           for item in data:
+              #printDBG( 'Host item data: '+str(item) )
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNTREX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNTREX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNTREX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porntrex.com/search/%s/' % url.replace(' ','+'), 'PORNTREX-clips')
+           return valTab
+        if 'PORNTREX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s' % self.page
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href="#videos".*?data-parameters="sort_by:post_date;from:([^"^']+?)['"]''', 1, True)[0]
+           if not next:  next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href="#.*?from_albums:([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-', '</li></ul></div>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''fa-clock-o"></i>([^"^']+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': phUrl})
+              except: pass
+              if not '>Private<' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'PORNDOE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://porndoe.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndoe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/category/[^"^']+?)['"]''', 1, True)[0] 
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'PORNDOE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- By duration ---", "By duration", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=duration-down'], 'PORNDOE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most popular ---", "Most popular", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=likes-down'], 'PORNDOE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---", "Most viewed", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views-down'], 'PORNDOE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most recent ---", "Most recent", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos'], 'PORNDOE-clips', '',None))
+           self.SEARCH_proc='porndoe-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porndoe-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://porndoe.com/search?keywords=%s' % url.replace(' ','+'), 'PORNDOE-clips')
+           return valTab
+        if 'PORNDOE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://porndoe.com' 
+           host = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndoe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link\srel=['"]next['"]\shref=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-id=', 'item -->')
+           data = data.split('data-id=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.porndoe.com'+ phUrl
+
+              phImage = urlparser.decorateUrl(phImage, {'Referer': phUrl, 'User-Agent': host}) 
+
+              Time = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+            
+           return valTab
+
+        if 'PORNFROMCZECH' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornfromczech.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornfromczech.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornfromczech.cookie', 'pornfromczech.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNFROMCZECH-clips', '', phUrl)) 
+           self.SEARCH_proc='PORNFROMCZECH-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNFROMCZECH-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://pornfromczech.com/?s=%s&x=0&y=0' % url.replace(' ','+'), 'PORNFROMCZECH-clips')
+           return valTab              
+        if 'PORNFROMCZECH-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornfromczech.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornfromczech.cookie', 'pornfromczech.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           Movies = re.findall('<div\sclass="thumb">.*?<a\shref="(.*?)".*?title="(.*?)">.*?<img\ssrc="(.*?)".*?<p class="duration">(.*?)</p>', data, re.S) 
+           if Movies:
+              for (phUrl, phTitle, phImage, Time) in Movies:
+                  Time = Time.strip()
+                  phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle), '['+Time+']    '+decodeHtml(phTitle), CDisplayListItem.TYPE_CATEGORY, [phUrl], 'PORNFROMCZECH-serwer', phImage, decodeHtml(phTitle)))                
+           match = re.search('rel="next" href="(.*?)"', data, re.S)
+           if match:
+              phUrl = match.group(1)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))                
+           return valTab
+        if 'PORNFROMCZECH-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornfromczech.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornfromczech.cookie', 'pornfromczech.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           phserwer = ''
+           phName = catUrl 
+           data = ph.IFRAME.findall(data)
+           for item in data:
+              phUrl = self.cm.getFullUrl(item[1])
+              phserwer = phUrl.split('/')[2]+' - '
+              if 'exosrv' in phUrl: continue
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(phserwer+phName,phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, '', None)) 
+           return valTab
+
+        if 'FILMYPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.filmyporno.tv' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<h2>Kategorie', 'footer-top-col', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item--channel col', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FILMYPORNO-clips', phImage, phUrl)) 
+           valTab.insert(0,CDisplayListItem("--- NAJDŁUŻSZE ---",       "NAJDŁUŻSZE",                    CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/longest/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJCZĘŚCIEJ DYSKUTOWANE ---","NAJCZĘŚCIEJ DYSKUTOWANE", CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/most-discussed/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJLEPIEJ OCENIONE ---",     "NAJLEPIEJ OCENIONE",      CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/top-rated/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJPOPULARNIEJSZE ---",      "NAJPOPULARNIEJSZE",       CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/most-viewed/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NOWE FILMY ---",             "NOWE FILMY",              CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/videos/"], 'FILMYPORNO-clips', '',None))
+           self.SEARCH_proc='FILMYPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'FILMYPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.filmyporno.tv/search/%s/' % url.replace(' ','+'), 'FILMYPORNO-clips')
+           return valTab  
+        if 'FILMYPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item-col col', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              Time = Time.strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              url = re.sub('page.+', '', url)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+url+next_page, CDisplayListItem.TYPE_CATEGORY, [url+next_page], name, '', None))                
+           return valTab
+
+        if 'CLIPHUNTER' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.cliphunter.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cliphunter.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           parse = re.search('id="submenu-categories">(.*?)</div>', data, re.S)
+           if parse:
+              phCats = re.findall('href="(/categories/.*?)".*?>(.*?)<', parse.group(1), re.S)
+              if phCats:
+                 for (phUrl, phTitle) in phCats:
+                     phUrl = 'http://www.cliphunter.com%s/' % phUrl.replace(' ','%20')
+                     if phTitle <> "More ... " and phTitle <> "HD": 
+                        valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'CLIPHUNTER-clips', '', phUrl)) 
+           self.SEARCH_proc='CLIPHUNTER-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'CLIPHUNTER-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.cliphunter.com/search/%s' % url.replace(' ','+'), 'CLIPHUNTER-clips')
+           return valTab
+        if 'CLIPHUNTER-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cliphunter.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.search('rel="next" href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li mId=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''vttl.*?">([^>]+?)<''', 1, True)[0].strip() 
+              if not phTitle: phTitle = self._cleanHtmlStr(item).split('                    ')[4].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''pop-execute">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              Time = Time.strip()
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if match:
+              next = match.group(1)
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'EMPFLIX' == name:
+           self.MAIN_URL = 'https://www.empflix.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'empflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           #printDBG( 'Host listsItems data: '+data )
+           genre = re.findall('"thumb"\shref="(.*?)".*?src="(.*?)".*?title="(.*?)"', data, re.S) 
+           if genre:
+              for (phUrl, phImage, phTitle) in genre:
+                 phTitle = decodeHtml(phTitle).strip()
+                 phImage = 'http:'+phImage
+                 if not phTitle == "All": 
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'EMPFLIX-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- Featured ---",       "Featured",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/featured/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/toprated/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/new/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           self.SEARCH_proc='EMPFLIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EMPFLIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.empflix.com/search.php?what=%s&tab=' % url.replace(' ','+'), 'EMPFLIX-clips')
+           return valTab
+        if 'EMPFLIX-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'empflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.findall('<a class="llNav".*?href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-vid=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''data-name=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''videoDuration\'>([^>]+?)<''', 1, True)[0]
+              Added = self.cm.ph.getSearchGroups(item, '''floatLeft\'>([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,'['+phRuntime+'] '+phTitle+'\nAdded: '+ Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if match:
+              phUrl = match[0]
+              printDBG( 'Host listsItems page phUrl: '+phUrl )
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl.split('/')[-1].replace('?d=all',''), CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl], name, '', None))
+           return valTab
+
+        if 'THUMBZILLA' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.thumbzilla.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           Cats = re.findall('href="(/categories/.*?)".*?click\',\s\'(.*?)\'', data, re.S) 
+           if Cats:
+              for (phUrl, phTitle) in Cats:
+                 phTitle = decodeHtml(phTitle)
+                 if not phTitle == "All": 
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'THUMBZILLA-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- Homemade ---",     "Homemade",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/homemade"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- HD Videos ---","HD Videos", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/hd"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",     "Popular Videos",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Videos ---",     "Top Videos",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---",     "Trending",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/trending"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",     "Newest",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/newest"], 'THUMBZILLA-clips', '',None))
+           self.SEARCH_proc='THUMBZILLA-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'THUMBZILLA-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.thumbzilla.com/tags/%s' % url.replace(' ','+'), 'THUMBZILLA-clips')
+           return valTab          
+        if 'THUMBZILLA-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.thumbzilla.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('href="(/video/.*?)".*?src="(.*?)".*?"title">(.*?)<.*?"duration">(.*?)<', data, re.S)  
+           if phMovies:
+              for ( phUrl, phImage, phTitle, phRuntime) in phMovies:
+                  if phUrl[:2] == "//":
+                     phUrl = "http:" + phUrl
+                  else:
+                     phUrl = self.MAIN_URL + phUrl
+                  if phImage[:2] == "//":
+                     phImage = "http:" + phImage
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           match = re.findall('"next" href="(.*?)"', data, re.S)
+           if match:
+              phUrl = match[0]
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))
+           self.MAIN_URL = '' 
+           return valTab
+
+        if 'ADULTTV' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.adulttvlive.net' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'adulttv.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = 'http://www.adulttvlive.net' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'http://www.adulttvlive.net' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #if catUrl == None:
+           #   valTab.insert(0,CDisplayListItem('BSX24','BSX24',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', 'http://publish.thewebstream.co:1935/bsx24/livestream/playlist.m3u8', 0)], 0, 'http://ero-tv.org/wp-content/uploads/2014/08/babestation24.gif', None)) 
+           #   valTab.insert(0,CDisplayListItem('PassionXXX','PassionXXX',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', 'http://publish.thewebstream.co:1935/ppv/_definst_/rampanttv_passionxxx/playlist.m3u8', 0)], 0, 'https://pbs.twimg.com/profile_images/1001362356264464384/fQVOhNLk_400x400.jpg', None)) 
+
+           if next_page:
+              valTab.append(CDisplayListItem('Next', 'Page: '+next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))
+           return valTab
+
+        if 'YUVUTU' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.yuvutu.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           self.page = 1
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="yv-element', 'videos</span>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = re.sub(' - .+', '', phTitle)
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'YUVUTU-clips', phImage, None)) 
+           return valTab
+        if 'YUVUTU-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           self.page += 1
+           phMovies = re.findall('class="thumb-image">.*?href="(.*?)".*?src="(.*?)".*?title="(.*?)"', data, re.S)  
+           if phMovies:
+              for ( phUrl, phImage, phTitle ) in phMovies:
+                  phTitle = phTitle.replace(' - ','')
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           url = re.sub('page.+', '', url)
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page), CDisplayListItem.TYPE_CATEGORY, [url+'page/'+str(self.page)+'/'], name, '', None))
+           return valTab
+
+        if 'PORNICOM' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornicom.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="items-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item">', 'quantity')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNICOM-clips', phImage, None))
+           valTab.insert(0,CDisplayListItem("--- Most popular ---", "Most popular", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/most-popular/'], 'PORNICOM-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest updates ---", "Latest updates", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/latest-updates/'], 'PORNICOM-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top rated ---", "Top rated", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/top-rated/'], 'PORNICOM-clips', '',None))
+           self.SEARCH_proc='pornicom-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornicom-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.pornicom.com/search/?q=%s' % url.replace(' ','+'), 'PORNICOM-clips')
+           return valTab
+        if 'PORNICOM-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornicom.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '</div>', False)[1]
+           next_page = self.cm.ph.getDataBeetwenMarkers(next_page, '</span>', 'Page', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="link"', 'views-info')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''<img\sclass="thumb"\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''"duration">([^"^']+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''"duration" content=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(phTitle,'['+Time+']   '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              numer = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'HDZOG' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hdzog.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host getResolvedURL data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-categories">', 'video thumbs list', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''"title">([^"^']+?)<''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'HDZOG-clips', phImage, None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---", "Longest", CDisplayListItem.TYPE_CATEGORY,['http://www.hdzog.com/longest/'], 'HDZOG-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---", "Popular", CDisplayListItem.TYPE_CATEGORY,['http://www.hdzog.com/popular/'], 'HDZOG-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---", "Newest", CDisplayListItem.TYPE_CATEGORY,['http://www.hdzog.com/new/'], 'HDZOG-clips', '',None))
+           self.SEARCH_proc='hdzog-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hdzog-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hdzog.com/search/%s/' % url.replace(' ','+'), 'HDZOG-clips')
+           return valTab
+        if 'HDZOG-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="next">', '</li>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = 'http://www.hdzog.com' + next_page
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-videos">', 'video thumbs list', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''class="time">([^"^']+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,'['+Time+']   '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              numer = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'PORNOMENGE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornomenge.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', '</h4>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)</a>''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNOMENGE-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Kanale ---", "Kanale", CDisplayListItem.TYPE_CATEGORY,['https://www.pornomenge.com/websites/videos/'], 'PORNOMENGE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornostars ---", "Pornostars", CDisplayListItem.TYPE_CATEGORY,['https://www.pornomenge.com/pornostars/'], 'PORNOMENGE-Pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Beste Videos ---", "Beste Videos", CDisplayListItem.TYPE_CATEGORY,['https://www.pornomenge.com/am-meisten-gestimmt/m/'], 'PORNOMENGE-clips', '',None))
+           self.SEARCH_proc='PORNOMENGE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNOMENGE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.heuteporno.com/suchen/?q=%s' % url.replace(' ','+'), 'PORNOMENGE-clips')
+           return valTab
+        if 'PORNOMENGE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-ajax-url=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', 'class="votar-escena')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('aHR'): next_page = urllib.unquote(base64.b64decode(next_page))
+              if '/?page=0' in next_page: next_page = next_page.replace('page=0','page=2')
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PORNOMENGE-Pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-chica">', 'class="clear"></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNOMENGE-clips', '', None))
+           if next_page: 
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'TUBEPORNCLASSIC' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://tubepornclassic.com' 
+           url = 'https://tubepornclassic.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'tubepornclassic.cookie', 'tubepornclassic.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://tubepornclassic.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'TUBEPORNCLASSIC-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='TUBEPORNCLASSIC-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'TUBEPORNCLASSIC-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://tubepornclassic.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'TUBEPORNCLASSIC-clips')
+           return valTab
+        if 'TUBEPORNCLASSIC-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://tubepornclassic.com' 
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'tubepornclassic.cookie', 'tubepornclassic.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://tubepornclassic.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'KOLOPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.koloporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', '</h4>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)</a>''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'KOLOPORNO-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---", "Pornstars", CDisplayListItem.TYPE_CATEGORY,['https://www.koloporno.com/pornstars/'], 'KOLOPORNO-Pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Najlepsze Filmy ---", "Najlepsze Filmy", CDisplayListItem.TYPE_CATEGORY,['https://www.koloporno.com/najlepiej-oceniane/m/'], 'KOLOPORNO-clips', '',None))
+           self.SEARCH_proc='KOLOPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'KOLOPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.koloporno.com/search/?q=%s' % url.replace(' ','+'), 'KOLOPORNO-clips')
+           return valTab
+        if 'KOLOPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.koloporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-ajax-url=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', 'class="votar-escena')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('aHR'): next_page = urllib.unquote(base64.b64decode(next_page))
+              if '/?page=0' in next_page: next_page = next_page.replace ('page=0','page=2')
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'KOLOPORNO-Pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-chica">', 'class="clear"></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'KOLOPORNO-clips', '', None))
+           if next_page: 
+              numer = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'REALGFPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.realgfporn.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-spot">', 'clearfix')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'REALGFPORN-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---", "Longest", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/longest/'], 'REALGFPORN-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---", "Most Viewed", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/most-viewed/'], 'REALGFPORN-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/top-rated/'], 'REALGFPORN-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---", "Most Recent", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/most-recent/'], 'REALGFPORN-clips', '',None))
+           self.SEARCH_proc='REALGFPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'REALGFPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.realgfporn.com/search/%s/page1.html' % url.replace(' ','+'), 'REALGFPORN-clips')
+           return valTab
+        if 'REALGFPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.realgfporn.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           next_page = re.compile('href="(.*?)"').findall(next_page)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-spot', '</strong>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.realgfporn.com/videos/[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if Time<>'Link' and phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              url = re.sub('page.+', '', url)
+              valTab.append(CDisplayListItem('Next', url+next_page[-1], CDisplayListItem.TYPE_CATEGORY, [url+next_page[-1]], name, '', None))
+           return valTab
+
+        if 'PLAYVIDS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           if 'Rate Limit Exceeded' in data:
+              msg = _("Last error:\n%s" % 'Rate Limit Exceeded')
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="category-list', 'card-promotion', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1].replace('-',' ').replace('%20',' ').replace('%26','-')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstar ---", "Pornstar", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/pornstars&jsclick=1'], 'PLAYVIDS-pornstar', '',None))
+           valTab.insert(0,CDisplayListItem("--- Channels ---", "Channels", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/channels&jsclick=1'], 'PLAYVIDS-channels', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---", "Trending", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/Trending-Porn'], 'PLAYVIDS-clips', '',None))
+           self.SEARCH_proc='PLAYVIDS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PLAYVIDS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.playvids.com/sq?q=%s&jsclick=1&content=straight' % url.replace(' ','+'), 'PLAYVIDS-clips')
+           return valTab
+        if 'PLAYVIDS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == 'channels':
+              data = data.split('<div id=')
+           else:
+              data = data.split('<div class="card thumbs_rotate')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              added = self.cm.ph.getSearchGroups(item, '''addition">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle and Time:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']  '+decodeHtml(phTitle)+'\n'+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PLAYVIDS-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'Popular channels', 'pagination', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="card">', '</div>')
+           data = data.split('<div class="card">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('%20',' ').replace('%26','-') 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, 'channels'))
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PLAYVIDS-pornstar' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="stars_list">', '</ul>', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           data = data.split('<div class="card">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1].replace('-',' ')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, None))
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if '4TUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.4tube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '>Categories<', '>Channels<', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].lower().replace('sex movies','')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'4TUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","Channels",   CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/channels"]  ,         '4TUBE-channels', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/pornstars"],          '4TUBE-channels','',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos?sort=views&time=month"],             '4TUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Highest Rated ---","Highest Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos?sort=rating&time=month"],             '4TUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Lastest ---","Lastest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos"],             '4TUBE-clips',    '',None))
+           self.SEARCH_proc='4TUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if '4TUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search?q=%s' % url.replace(' ','+'), '4TUBE-clips')
+           return valTab              
+        if '4TUBE-channels' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\srel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="thumb-link"', '</div></a></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phVid = self.cm.ph.getSearchGroups(item, '''icon-video"></i>([^"^']+?)<''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\sdata-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'[Video: '+phVid+']   '+phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], '4TUBE-clips', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if '4TUBE-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.MAIN_URL = url.split('com/')[0]+'com'
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\srel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="col thumb_video"', '</div></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''img data-master=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"duration-top">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'HomeMoviesTube' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.homemoviestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homemoviestube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = data.split('class="category-item ')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'HomeMoviesTube-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/longest/"],          'HomeMoviesTube-clips','',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/most-viewed/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top-rated/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/most-recent/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest Videos ---","Latest Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'HomeMoviesTube-clips',    '',None))
+           self.SEARCH_proc='HomeMoviesTube-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'HomeMoviesTube-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/%s/page1.html' % url.replace(' ','+'), 'HomeMoviesTube-clips')
+           return valTab              
+        if 'HomeMoviesTube-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.homemoviestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homemoviestube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<li\sclass='next'><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('class="film-item ')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20')
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"film-time">([^"^']+?)<''', 1, True)[0]
+              added = self.cm.ph.getSearchGroups(item, '''"stat-added">([^"^']+?)<''', 1, True)[0] 
+              views = self.cm.ph.getSearchGroups(item, '''views">([^>]+?)<''', 1, True)[0].strip()
+              rated = self.cm.ph.getSearchGroups(item, '''rated">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+']  '+phTitle+'\n'+views+'\n'+rated,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('page'): next_page = '/' + next_page
+              next_page = re.sub('page.+', '', url)+next_page
+              valTab.append(CDisplayListItem(_("Next page"), next_page.split('/')[-1].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MOVIEFAP' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.moviefap.com'
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h1>', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'MOVIEFAP-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/browse/?category=mr&page="],             'MOVIEFAP-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/browse/?category=tr&page="],             'MOVIEFAP-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Being Watched ---","Being Watched",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/browse/?category=bw&page="],             'MOVIEFAP-clips',    '',None))
+           self.SEARCH_proc='MOVIEFAP-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'MOVIEFAP-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/%s' % url.replace(' ','+'), 'MOVIEFAP-clips')
+           return valTab              
+        if 'MOVIEFAP-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.moviefap.com'
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="current"', 'next', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video', '</div></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"videoleft">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'yourporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sxyprn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, "<a class='tdn'", '</a>')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''>#([^#]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'https://sxyprn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'yourporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Viewed ---","Top Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/top-viewed.html"],             'yourporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/top-rated.html"],             'yourporn-clips',    '',None))
+           self.SEARCH_proc='yourporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'yourporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://sxyprn.com/%s.html' % url.replace(' ','+'), 'yourporn-clips')
+           return valTab              
+        if 'yourporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sxyprn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('data-postid=')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/post/[^"^']+?)['"]''', 1, True)[0] 
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](http[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"](//[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''html\'\stitle=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'Host phTitle1: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''data-title=['"]([^"^'^{]+?)['"}]''', 1, True)[0]
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''class=\'tdn\'\stitle=['"]([^"^'^{]+?)['"}]''', 1, True)[0]
+              printDBG( 'Host phTitle2: '+phTitle )
+              if ' porn blog' in phTitle or len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''blog">([^"^']+?)<''', 1, True)[0] 
+              printDBG( 'Host phTitle3: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''title\'>([^>]+?)<''', 1, True)[0]
+              printDBG( 'Host phTitle4: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''text_el">([^>]+?)<''', 1, True)[0]
+              printDBG( 'Host phTitle5: '+phTitle )
+              #if len(phTitle)<4: phTitle = 'No Title'
+              phRuntime = self.cm.ph.getSearchGroups(item, '''>(\d\d:\d\d)<''', 1, True)[0] 
+              if not phRuntime: phRuntime = self.cm.ph.getSearchGroups(item, '''>(\d\d:\d\d:\d\d)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://sxyprn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              phTitle = phTitle.replace('\n','')
+              Title = phTitle[:95].split('#')[0]
+              if 'External Link' in item:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https?://gounlimited[^"^']+?)['"]''', 1, True)[0]
+                 phRuntime = 'External Link'
+                 Title = re.sub(r'http(.*?)mp4', '', Title)
+                 Title = re.sub(r'http(.*?) ', '', Title)
+                 if 'gounlimited.to' in phUrl:
+                    if not 'embed' in phUrl:
+                       phUrl = 'https://gounlimited.to' + '/embed-'+ phUrl.split('/')[3] +'.html'
+              if phRuntime=='': continue 
+              printDBG( 'Host phTitle6: '+phTitle )
+              printDBG( 'Host phUrl: '+phUrl )
+              printDBG( 'Host phImage: '+phImage )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(Title),'['+phRuntime+']  '+decodeHtml(phTitle[:95]),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'freeomovie' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.freeomovie.to/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.to', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories<', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'freeomovie-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.freeomovie.to'],             'freeomovie-clips',    '',None))
+           self.SEARCH_proc='freeomovie-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'freeomovie-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.freeomovie.to/?s=%s' % url.replace(' ','+'), 'freeomovie-clips')
+           return valTab              
+        if 'freeomovie-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.freeomovie.to/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="boxtitle">', 'class="metargt">')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [ phUrl], 'freeomovie-serwer', phImage, phImage)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'freeomovie-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           Title = self.cm.ph.getSearchGroups(data, '''"headline":['"]([^"^']+?)['"&]''', 1, True)[0] 
+           if not Title: Title = self.cm.ph.getSearchGroups(data, '''<title>([^>]+?)<''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div id="videocont"', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''(http[^"^']+?)['"&]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[2]
+              if phTitle=='': phTitle=phUrl
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              if not 'filecrypt' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(Title)+' > '+phTitle,decodeHtml(Title)+' > '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+
+        if 'KATESTUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.katestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'katestube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'KATESTUBE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/most-popular/'],             'KATESTUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/top-rated/'],             'KATESTUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/latest-updates/'],             'KATESTUBE-clips',    '',None))
+           self.SEARCH_proc='KATESTUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'KATESTUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.katestube.com/search/?q=%s' % url.replace(' ','+'), 'KATESTUBE-clips')
+           return valTab              
+        if 'KATESTUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'katestube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = ph.findall(data, '<a data=', 'Next') 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="thumb"', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration" class="length">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page[-1], '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'https://www.katestube.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'ZBIORNIKMINI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://mini.zbiornik.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="collapse navbar-collapse" id="photos-menu">', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href=', '</a>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              printDBG( 'Host phTitle: '+phTitle )
+              printDBG( 'Host phUrl: '+phUrl )
+              if len(phUrl)>3:
+                 if phTitle<>'2004' and phTitle<>'2005' and phTitle<>'2006':
+                    valTab.append(CDisplayListItem(phTitle,phUrl.split('/')[-1],     CDisplayListItem.TYPE_CATEGORY,[phUrl],'ZBIORNIKMINI-filmy','https://static.zbiornik.com/upimg/0160d9c44a354d20e81f0e6df5fe832e.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Ranking ---","Ranking",     CDisplayListItem.TYPE_CATEGORY,['https://mini.zbiornik.com/ludzie/ranking'],             'ZBIORNIKMINI-ranking',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Wyświetl profile ---","Wyświetl profile",     CDisplayListItem.TYPE_CATEGORY,['https://mini.zbiornik.com/ludzie/szukaj/0,1,1,1,0,1:0:0:0:18:50:2:0:0:1:0'],             'ZBIORNIKMINI-szukaj',    '',None))
+           data2 = None
+           return valTab    
+        if 'ZBIORNIKMINI-szukaj' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="search-profile-box">', '</h5>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''url\(['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?filmy)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ZBIORNIKMINI-filmy', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           return valTab
+        if 'ZBIORNIKMINI-ranking' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="panel-body">', '</h3>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''url\(['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl +'/filmy'
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ZBIORNIKMINI-filmy', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           return valTab
+        if 'ZBIORNIKMINI-filmy' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a></div>    </div>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a>')
+           for item in data2:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)\n''', 1, True)[0]  
+              exTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)Widoczne''', 1, True)[0]  
+              Name = re.compile('cropped-info"><a href="/(.*?)"').findall(item)
+              if Name: 
+                 Name = Name[-1]
+              else:
+                 Name = ''
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              if phTitle<>'#01':
+                 valTab.append(CDisplayListItem(Name+' - '+decodeHtml(phTitle),Name+' - '+decodeHtml(exTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 if Name != '' and config.plugins.iptvplayer.xxxzbiornik.value:
+                    valTab.append(CDisplayListItem(Name, Name, CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/' +Name+'/filmy'], name, '', None))  
+                    valTab.append(CDisplayListItem(Name+' fotki', Name, CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/' +Name+'/zdjecia'], 'ZBIORNIKMINI-fotki', '', None))  
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           data2 = None
+           return valTab
+        if 'ZBIORNIKMINI-fotki' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="cropped-wrap">', '</div>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a>')
+           for item in data2:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)\n''', 1, True)[0]  
+              exTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)Widoczne''', 1, True)[0]  
+              Name = re.compile('cropped-info"><a href="/(.*?)"').findall(item)
+              if Name: 
+                 Name = Name[-1]
+              else:
+                 Name = ''
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              if phTitle<>'#01':
+                 valTab.append(CDisplayListItem(phTitle, phTitle,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', phImage, 0)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           data2 = None
+           return valTab
+
+        if 'pornone' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornone.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornone.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '>All Categories<', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a', '</a>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''categoryName">([^>]+?)<''', 1, True)[0] 
+              #phTitle = self._cleanHtmlStr(item) 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornone-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/longest/'],             'pornone-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Votes ---","Most Votes",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/votes/'],             'pornone-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Comments ---","Most Comments",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/comments/'],             'pornone-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Favorited ---","Most Favorited",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/favorites/'],             'pornone-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/views/'],             'pornone-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/rating/'],             'pornone-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://www.pornone.com/newest/'],             'pornone-clips',    '',None))
+           self.SEARCH_proc='pornone-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornone-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornone.com/search?q=%s' % url.replace(' ','+'), 'pornone-clips')
+           return valTab              
+        if 'pornone-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornone.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next"', '>', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb"', '</div>')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video"', 'Rating')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"time">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://pornone.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'https://pornone.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'hotmovs' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://hotmovs.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hotmovs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="cats-all categories-list">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hotmovs-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/longest/'],             'hotmovs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/most-popular/'],             'hotmovs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/top-rated/'],             'hotmovs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/latest-updates/'],             'hotmovs-clips',    '',None))
+           self.SEARCH_proc='hotmovs-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hotmovs-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://hotmovs.com/search/?q=%s' % url.replace(' ','+'), 'hotmovs-clips')
+           return valTab              
+        if 'hotmovs-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hotmovs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="next"', '</a>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-video-id=', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="thumbnail__info__right">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'http://hotmovs.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'http://hotmovs.com' + next
+              if '/categories/' in next: next = next+'?mode=async&function=get_block&block_id=sphinx_list_cat_videos_videos_list'
+              if next <> '#search':
+                 valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'pornoxo' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornoxo.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornoxo.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'title="Main Page"', 'Top Users</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('Tube','') 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle.startswith('+'): phTitle = ''
+              if phTitle<>'':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornoxo-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/longest/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/most-popular/today/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/top-rated/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/newest/'],             'pornoxo-clips',    '',None))
+           self.SEARCH_proc='pornoxo-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornoxo-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornoxo.com/search/%s/?sort=mw&so=y' % url.replace(' ','+'), 'pornoxo-clips')
+           return valTab              
+        if 'pornoxo-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornoxo.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'Referer':url, 'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'vidItem', 'class="clear"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.pornoxo.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.pornoxo.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'pinflix' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pinflix.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pinflix-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/pornstars'], 'pinflix-pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=longest'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Featured ---","Featured", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=featured'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=top-rated'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=most-popular'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=newest'], 'pinflix-clips', '',None))
+           self.SEARCH_proc='pinflix-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pinflix-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pinflix.com/search?search=%s' % url.replace(' ','+'), 'pinflix-clips')
+           return valTab              
+        if 'pinflix-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-next-page=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''srcset=['"]([^"^']+?\.jpg)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''img alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if 'video-item' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              url = re.sub('&page.+', '', url)
+              url = re.sub('\?page.+', '', url)
+              if '?order' in url:
+                 next_page = url+'&page='+next_page
+              else:
+                 next_page = url+'?page='+next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'pinflix-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'page active">', '<', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'https://www.pinflix.com' + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pinflix-clips', phImage, None)) 
+           if next_page:
+              next_page = 'https://www.pinflix.com/pornstars?page=' + str(int(next_page)+1)
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab  
+
+        if 'upornia' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.upornia.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upornia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'upornia-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/longest/'],             'upornia-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/most-popular/'],             'upornia-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/top-rated/'],             'upornia-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/latest-updates/'],             'upornia-clips',    '',None))
+           self.SEARCH_proc='upornia-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'upornia-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://upornia.com/search/?q=%s' % url.replace(' ','+'), 'upornia-clips')
+           return valTab              
+        if 'upornia-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upornia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<li class="next">[^>]+?href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''right">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://upornia.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'txxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.txxx.com'
+           url = 'https://txxx.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://txxx.com/categories/%s/1/?sort=latest-updates&date=day&type=all' % str(item["dir"])
+                 phUrl = 'https://txxx.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'txxx-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/longest/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/most-popular/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/top-rated/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/latest-updates/'],             'txxx-clips',    '',None))
+           self.SEARCH_proc='txxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'txxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://txxx.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'txxx-clips')
+           return valTab              
+        if 'txxx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://txxx.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'hclips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hclips.com'
+           url = 'https://hclips.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://hclips.com/categories/%s/1/?sort=latest-updates&date=day&type=all' % str(item["dir"])
+                 phUrl = 'https://hclips.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hclips-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='hclips-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hclips-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hclips.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'hclips-clips')
+           return valTab              
+        if 'hclips-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://hclips.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'sunporno' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sunporno.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb-container', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'sunporno-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/long-movies/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-viewed/date-last-week/'],             'sunporno-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- HD Porn ---","HD Porn",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/high-definition/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/top-rated/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Recent videos ---","Recent videos",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-recent/date-last-week/'],             'sunporno-clips',    '',None))
+           self.SEARCH_proc='sunporno-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sunporno-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sunporno.com/search/%s/' % url.replace(' ','+'), 'sunporno-clips')
+           return valTab              
+        if 'sunporno-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''pag-next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('data-id=')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''"btime">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = 'https://www.sunporno.com' + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://www.sunporno.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'sexu' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://sexu.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/tag[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item).strip() 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'sexu-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Trending ---","Trending",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/trending/1'],             'sexu-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Hall of Fame ---","Hall of Fame",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/all/1'],             'sexu-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/1'],             'sexu-clips',    '',None))
+           self.SEARCH_proc='sexu-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sexu-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://sexu.com/search?q=%s' % url.replace(' ','+'), 'sexu-clips')
+           return valTab              
+        if 'sexu-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''pagination__arrow--next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="grid__item">', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''counter">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = 'http://sexu.com' + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'http://sexu.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'tubewolf' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = url #'http://www.tubewolf.com'
+           url = url + '/categories/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           if url.startswith('http://crocotube.com'): 
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'A-Z porn categories', 'Footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="ct-az-list-item', '</a>')
+           elif url.startswith('https://www.alphaporno.com'): 
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>Categories<', 'Footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb', '</li>')
+           else:
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories<', 'Categories<', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self._cleanHtmlStr(item).strip() 
+              phTitle = phTitle.replace(' Movies','')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = url + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'tubewolf-clips', phImage, url)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated'],             'tubewolf-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular'],             'tubewolf-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates'],             'tubewolf-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='tubewolf-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'tubewolf-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'tubewolf-clips')
+           return valTab              
+        if 'tubewolf-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next_page: next_page = self.cm.ph.getDataBeetwenMarkers(data, '<div class="ct-pagination">', 'Next', False)[1]
+           if url.startswith('https://www.alphaporno.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop="url"', '</li>')
+           if 'crocotube' in url: 
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'class="ct-videos-list', 'footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           if url.startswith('https://www.tubewolf.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop="url"', '</div>')
+           if url.startswith('https://zedporn.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title="([^"]+?)"''', 1, True)[0]  
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              if not 'Sponsored' in item and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if not next_page.startswith('http'):
+                 next_page = re.compile('<a href="(.*?)"').findall(next_page)
+                 next_page = next_page[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'PORNTUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.porntube.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PORNTUBE.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNTUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='PORNTUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNTUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'PORNTUBE-clips')
+           return valTab              
+        if 'PORNTUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PORNTUBE.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ASHEMALETUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.ashemaletube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not 'Tube' in phTitle: continue
+              if not '/videos/' in phUrl: continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.ashemaletube.com' + phUrl 
+              phTitle = phTitle.replace ('Porn Tube','').replace ('Tube','')
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'ASHEMALETUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Stories ---","Stories",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/stories/'],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Models ---","Models",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/models/'],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Best Recent ---","Best Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='ASHEMALETUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ASHEMALETUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.ashemaletube.com/search/%s/' % url.replace(' ','+'), 'ASHEMALETUBE-clips')
+           return valTab              
+        if 'ASHEMALETUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="js-pop thumb-item videospot', '</li>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb-item videospot', '</li>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.ashemaletube.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://www.ashemaletube.com' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MOMXXXFUN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://momxxxfun.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momxxxfun.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href', '</a>')
+           data = data.split('<div class="popular-tag">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/search/videos/[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1] #self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://momxxxfun.com' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://momxxxfun.com' + phImage 
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl+'?type=public'],'momxxxfun-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='momxxxfun-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'momxxxfun-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://momxxxfun.com/search/videos/%s' % url.replace(' ','+'), 'momxxxfun-clips')
+           return valTab              
+        if 'momxxxfun-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momxxxfun.cookie')
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = data.split('<div class=" col-sm')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://momxxxfun.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://momxxxfun.com' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'streamporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://streamporn.pw'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self._cleanHtmlStr(item).strip() 
+              if phTitle=='Studios': phTitle='.:'+phTitle+':.'
+              if phTitle=='Years': phTitle='.:'+phTitle+':.'
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://streamporn.pw' + phImage 
+              if phTitle<>'Hollywood Movies' and phTitle<>'Tvshows':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'streamporn-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='streamporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'streamporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://streamporn.pw/?s=%s' % url.replace(' ','+'), 'streamporn-clips')
+           return valTab              
+        if 'streamporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if next_page =='': next_page = self.cm.ph.getSearchGroups(data, '''class='active'>.*?class='page larger' href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div data-movie-id', '<div class="jtip-bottom">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'streamporn-serwer', phImage, phImage)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://streamporn.pw' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'streamporn-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+           return valTab
+
+        if 'onlinepornfree' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://onlinepornfree.xyz'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'onlinepornfree.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self._cleanHtmlStr(item).strip() 
+              #if phTitle=='Studios': phTitle='.:'+phTitle+':.'
+              #if phTitle=='Years': phTitle='.:'+phTitle+':.'
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://onlinepornfree.xyz' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://onlinepornfree.xyz' + phImage 
+              if phTitle<>'Studios' and phTitle<>'Sitemap'  and phTitle<>'Contact'  and phTitle<>'Movies TV Series':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'onlinepornfree-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='onlinepornfree-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'onlinepornfree-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://onlinepornfree.xyz/?s=%s' % url.replace(' ','+'), 'onlinepornfree-clips')
+           return valTab              
+        if 'onlinepornfree-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'onlinepornfree.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if next_page =='': next_page = self.cm.ph.getSearchGroups(data, '''class='active'>.*?class='page larger' href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0], self.cm.getBaseUrl(url)) 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://onlinepornfree.xyz' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'onlinepornfree-serwer', phImage, phImage)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [self.cm.getFullUrl(next_page, self.cm.getBaseUrl(url))], name, '', None))                
+           return valTab
+        if 'onlinepornfree-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'onlinepornfree.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://onlinepornfree.xyz' + phUrl 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+           return valTab
+
+        if 'fux' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.fux.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fux.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'fux-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'fux-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'fux-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'fux-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='fux-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'fux-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'fux-clips')
+           return valTab              
+        if 'fux-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fux.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'pornerbros' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornerbros.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornerbros.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornerbros-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'pornerbros-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'pornerbros-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'pornerbros-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='pornerbros-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornerbros-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'pornerbros-clips')
+           return valTab              
+        if 'pornerbros-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornerbros.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MYDIRTYHOBBY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.mydirtyhobby.to'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="well well-sm', 'div class="clearfix"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.mydirtyhobby.to' + phUrl 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             'MYDIRTYHOBBY-pornstars',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Videos ---","Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos'],             'MYDIRTYHOBBY-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='MYDIRTYHOBBY-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'MYDIRTYHOBBY-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.mydirtyhobby.to/search/videos?search_query=%s' % url.replace(' ','+'), 'MYDIRTYHOBBY-clips')
+           return valTab              
+        if 'MYDIRTYHOBBY-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '&raquo;', False)[1]
+           next_page = re.compile('href="(.*?)"').findall(next_page)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="well well-sm', 'div class="clearfix"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.mydirtyhobby.to' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next_page = next_page[-1]
+              if next_page.startswith('/'): next_page = 'https://www.mydirtyhobby.to' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'MYDIRTYHOBBY-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '&raquo;', False)[1]
+           next_page = re.compile('href="(.*?)"').findall(next_page)
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Neuste</a>', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="well well-sm', 'div class="clearfix"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.mydirtyhobby.to' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://www.mydirtyhobby.to' + phImage 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'MYDIRTYHOBBY-clips', phImage, phImage)) 
+           if next_page:
+              next_page = next_page[-1]
+              if next_page.startswith('/'): next_page = 'https://www.mydirtyhobby.to' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+ 
+        if 'xxxstreams' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xxxstreams.org'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxstreams.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxstreams.cookie', 'xxxstreams.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if not 'xxxstreams' in phUrl: phTitle=''
+              if 'Siterips' in phTitle: phTitle=''
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'xxxstreams-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='xxxstreams-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xxxstreams-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://xxxstreams.org/?s=%s' % url.replace(' ','+'), 'xxxstreams-clips')
+           return valTab              
+        if 'xxxstreams-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxstreams.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxstreams.cookie', 'xxxstreams.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              item = self.cm.ph.getDataBeetwenMarkers(item, '<h1 class="entry-title">', '</h1>', False)[1]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL, 'Cookie':cookieHeader})
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phUrl = strwithmeta(phUrl, {'Referer':self.MAIN_URL})
+              if not 'UBIQFILE' in phTitle.upper():
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xxxstreams-serwer', phImage, phTitle)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'http://xxxstreams.org' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'xxxstreams-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxstreams.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxstreams.cookie', 'xxxstreams.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTitle = self.cm.ph.getSearchGroups(data, '''title" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTime = self.cm.ph.getSearchGroups(data, '''description" content=['"]([^"^']+?)['"|]''', 1, True)[0].strip()
+           if len(phTime)>8: phTime=phTime.split(' ')[-1]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<span id=', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<p>', '</p>')
+           for item in data2:
+              if '|' in item:
+                 phTime = item.split('|')[0].replace('<p>','')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if 'HITFILE' in phTitle.upper(): continue
+              if 'SHARE-ONLINE' in phTitle.upper(): continue
+              if 'UBIQFILE' in phTitle.upper(): continue
+              if 'RAPIDGATOR' in phTitle.upper(): continue
+              if 'OPENLOAD' in phTitle.upper(): continue
+              if 'SEVEREPORN' in phTitle.upper(): continue
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              if 'clipwatching.com' in phUrl:
+                 if 'embed' not in phUrl:
+                     video_id = self.cm.ph.getSearchGroups(phUrl, 'clipwatching.com/([A-Za-z0-9]{12})[/.-]')[0]
+                     phUrl = 'http://clipwatching.com/embed-{0}.html'.format(video_id)
+              if phTitle and catUrl:
+                 phUrl = urlparser.decorateUrl(phUrl, {'Referer': self.MAIN_URL})
+                 valTab.append(CDisplayListItem(decodeHtml(catUrl),'['+str(phTime.strip())+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if '123PANDAMOVIE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pandamovie.info'
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="genres scrolling">', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             '123PANDAMOVIE-years',    '',self.MAIN_URL))
+           #valTab.insert(0,CDisplayListItem("--- Studios ---","Studios",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             '123PANDAMOVIE-years',    '', 'studios'))
+           valTab.insert(0,CDisplayListItem("--- Years ---","Years",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             '123PANDAMOVIE-years',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Movies ---","Movies",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/movies'],             '123PANDAMOVIE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='123PANDAMOVIE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if '123PANDAMOVIE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/?s=%s' % url.replace(' ','+'), '123PANDAMOVIE-clips')
+           return valTab              
+        if '123PANDAMOVIE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'arrow_pag', 'resppages', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-serwer', phImage, None)) 
+           if next_page:
+              #printDBG( 'Host listsItems next_page: '+next_page )
+              next_page = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next_page)[-1]
+              #printDBG( 'Host listsItems next_page one: '+next_page )
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if '123PANDAMOVIE-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTime = '' #self.cm.ph.getSearchGroups(data, '''description" content=['"]([^"^']+?)['"|]''', 1, True)[0].strip()
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item)
+              if 'RapidGator' in phTitle: phTitle=''
+              if 'Share-online' in phTitle: phTitle=''
+              if 'Ubiqfile' in phTitle: phTitle=''
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+        if '123PANDAMOVIE-years' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #printDBG( 'Host catUrl: '+str(catUrl) )
+           if catUrl == 'studios':
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>Studios<', '</ul>', False)[1]
+           else:
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Release Year', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-clips', '', None)) 
+           return valTab
+
+        if 'FULLXXXMOVIES' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://fullxxxmovies.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullxxxmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullxxxmovies.cookie', 'fullxxxmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''rel=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl.endswith('/'): phUrl = phUrl[ :(len(phUrl)-1)]
+              if '/tag/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FULLXXXMOVIES-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- NEW ---","NEW",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'FULLXXXMOVIES-clips',    '', None))
+           self.SEARCH_proc='FULLXXXMOVIES-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'FULLXXXMOVIES-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://fullxxxmovies.net/?s=%s' % url.replace(' ','+'), 'FULLXXXMOVIES-clips')
+           return valTab              
+        if 'FULLXXXMOVIES-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullxxxmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullxxxmovies.cookie', 'fullxxxmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''reader-text">([^>]+?)<''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''datetime=['"]([^"^']+?)['"]''', 1, True)[0].replace('T','').replace('+00:00','').replace('+01:00','')
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Added: '+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'FULLXXXMOVIES-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'FULLXXXMOVIES-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullxxxmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullxxxmovies.cookie', 'fullxxxmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="entry-content">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              if 'gounlimited.to' in phUrl:
+                 if not 'embed' in phUrl:
+                    phUrl = 'https://gounlimited.to' + '/embed-'+ phUrl.split('/')[3] +'.html'
+              if 'Streaming' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(catUrl)+' > '+phUrl.split('/')[2],phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'PORNREWIND' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornrewind.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           cats = ['3d','amateur','asmr','arab','anal','webcam','voyeur','teen','romantic', 'beards', 'big tits', 'big butt', 'big dick',
+           'bisexual', 'blonde', 'blowjob', 'bondage', 'bukkake', 'casting', 'college', 'compilation', 'cosplay', 'couples', 'cuckold',
+           'cumshots','dp', 'dildos toys', 'ebony', 'european', 'facial'
+           ]
+           for item in cats:
+              phUrl = 'https://www.pornrewind.com/categories/%s/' % item.replace(' ','-')
+              valTab.append(CDisplayListItem(item.upper(),item,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNREWIND-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNREWIND-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNREWIND-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornrewind.com/search/%s/' % url.replace(' ','+'), 'PORNREWIND-clips')
+           return valTab
+        if 'PORNREWIND-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s' % self.page
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="direction"><a', '</li>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="th', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''thumb-time">\s*<span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''thumb-added">\s*<span>([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.pornrewind.com'})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Time: ['+Time+']'+'\n'+'Added: ['+Added+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if next.startswith('/'): next = 'https://www.pornrewind.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+
+        if 'BALKANJIZZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.balkanjizz.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm', '</div> </a> </div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.balkanjizz.com' + phUrl
+              if phImage.startswith('/'): phImage = 'https://www.balkanjizz.com' + phImage
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.balkanjizz.com'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BALKANJIZZ-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='BALKANJIZZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'BALKANJIZZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.balkanjizz.com/search/videos?search_query=%s' % url.replace(' ','+'), 'BALKANJIZZ-clips')
+           return valTab
+        if 'BALKANJIZZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm', '</div> </div> </div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration-bar pull-right">([^>]+?)<''', 1, True)[0].strip()
+              Views = self.cm.ph.getSearchGroups(item, '''views-bar pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.balkanjizz.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.balkanjizz.com'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Time: ['+Time+']'+'\n'+'Views: ['+Views+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.balkanjizz.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'PORNORUSSIA' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornorussia.tv' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="th', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://pornorussia.tv' + phUrl
+              if phImage.startswith('/'): phImage = 'https://pornorussia.tv' + phImage
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://pornorussia.tv'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNORUSSIA-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNORUSSIA-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNORUSSIA-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornorussia.tv/s.php?poisk=%s' % url.replace(' ','+'), 'PORNORUSSIA-clips')
+           return valTab
+        if 'PORNORUSSIA-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="more" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="th', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''th-duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://pornorussia.tv' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = 'https://pornorussia.tv' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://pornorussia.tv'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://pornorussia.tv' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'LETMEJERK' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.letmejerk.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = url
+           self.defaultParams['header']['Origin'] = self.MAIN_URL
+           #sts, data = self.get_Page(url)
+           sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              clas = self.cm.ph.getSearchGroups(item, '''class=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.letmejerk.com' + phUrl
+              if clas=='category':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'LETMEJERK-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- TOP ---","TOP",     CDisplayListItem.TYPE_CATEGORY,['https://www.letmejerk.com/?sort=top'],             'LETMEJERK-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.letmejerk.com/?sort=latest'],             'LETMEJERK-clips',    '', None))
+           self.SEARCH_proc='LETMEJERK-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'LETMEJERK-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.letmejerk.com/search.php?q=%s' % url.replace(' ','+'), 'LETMEJERK-clips')
+           return valTab
+        if 'LETMEJERK-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           for x in range(1, 3): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              self.defaultParams['header']['Referer'] = url
+              self.defaultParams['header']['Origin'] = self.MAIN_URL
+              self.defaultParams['header']['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0"
+              self.defaultParams['cookie_items'] = {'visited':'yes'}
+              sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+              if not sts: return valTab
+              printDBG( 'Host listsItems data: '+data )
+              next = self.cm.ph.getDataBeetwenMarkers(data, 'class="next"', '</ul>', False)[1]
+              data = data.split('<div class="th">')
+              if len(data): del data[0]
+              if not len(data): continue
+              for item in data:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 Time = self.cm.ph.getSearchGroups(item, '''clock"></i>([^>]+?)<''', 1, True)[0].strip()
+                 if ''==Time: Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+                 if phUrl.startswith('/'): phUrl = 'https://www.letmejerk.com' + phUrl
+                 if phImage.startswith('//'): phImage = 'https:' + phImage
+                 try:
+                    phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.letmejerk.com'})
+                 except: pass
+                 if phTitle and not phUrl.endswith('/.html'):
+                    valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+              if len(next)>18:
+                 match = re.compile('href="(.*?)"').findall(next)
+                 if not match: return valTab
+                 next = match[-1].replace('&sort=','')
+                 #url1 = url.replace(url.split('/')[-1],'')
+                 #next = url1 + next
+                 if next.startswith('/'): next = 'https://www.letmejerk.com' + next
+                 valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+              if len(data): break
+           return valTab
+
+        if 'GOTPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.gotporn.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="list categories-list', '</ul>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'GOTPORN-clips', '', None)) 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="list tags-list', '</ul>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'GOTPORN-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- CHANNELS ---","CHANNELS",     CDisplayListItem.TYPE_CATEGORY,['https://www.gotporn.com/channels?src=hm'],             'GOTPORN-channels',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.gotporn.com'],             'GOTPORN-clips',    '', None))
+           self.SEARCH_proc='GOTPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'GOTPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.gotporn.com/results?search_query=%s' % url.replace(' ','+'), 'GOTPORN-clips')
+           return valTab
+        if 'GOTPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="video-item', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-default-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.gotporn.com'})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.gotporn.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        if 'GOTPORN-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="channel-card', '</li> </ul>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.gotporn.com'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'GOTPORN-clips', phImage, None)) 
+              #   valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.gotporn.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'ANALDIN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.analdin.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'class="list-categories', 'footer', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a class="item', '</a>')
+           for item in data2:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'ANALDIN-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- MOST VIEWED ---","MOST VIEWED",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/most-popular/?mode=async&action=js_stats'],             'ANALDIN-clips',    '', None))
+           #valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/top-rated/'],             'ANALDIN-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/latest-updates/'],             'ANALDIN-clips',    '', None))
+           self.SEARCH_proc='ANALDIN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ANALDIN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.analdin.com/search/%s/' % url.replace(' ','+'), 'ANALDIN-clips')
+           return valTab
+        if 'ANALDIN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s&_=%s' % (self.page, time_time())
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           if 'latest-updates' in url:
+              url = url.replace(url.split('/')[-1],'')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', 'Next', False)[1]
+           next = self.cm.ph.getSearchGroups(data, '''from:([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''class="title">([^>]+?)<''', 1, True)[0].strip() 
+              phImage = self.cm.ph.getSearchGroups(item, '''thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              #next = url
+              if next.startswith('/'): next = self.MAIN_URL + next
+              url = url.replace(url.split('/')[-1],'')
+              #printDBG( 'Host time data: '+str(time_time()*10)) #.encode('utf-8') )
+              valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'NETFLIXPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://netflixporno.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''rel=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl.endswith('/'): phUrl = phUrl[ :(len(phUrl)-1)]
+              if '/genre/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'NETFLIXPORNO-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- NEW ---","NEW",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'NETFLIXPORNO-clips',    '', None))
+           self.SEARCH_proc='NETFLIXPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'NETFLIXPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://netflixporno.net/?s=%s' % url.replace(' ','+'), 'NETFLIXPORNO-clips')
+           return valTab              
+        if 'NETFLIXPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''rel="tag">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Added: '+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'NETFLIXPORNO-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'NETFLIXPORNO-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="entry-content">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'fapset' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://fapset.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<nav class="menu-inner" id="menu-inner">', '</nav>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'fapset-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'fapset-clips',    '', None))
+           self.SEARCH_proc='fapset-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'fapset-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://fapset.com/search/%s/' % url.replace(' ','+'), 'fapset-clips')
+           return valTab
+        if 'fapset-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<span class="navigation">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</a></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = self.cm.ph.getSearchGroups(next, '''</span>\s*<a href=['"]([^"^']+?/page/\d+/)['"]''', 1, True)[0]
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'daftsex' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://daftsex.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'daftsex.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="video-item">', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'daftsex-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'daftsex-clips',    '', None))
+           self.SEARCH_proc='daftsex-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'daftsex-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://daftsex.com/video/%s' % url.replace(' ','+'), 'daftsex-clips')
+           return valTab
+        if 'daftsex-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'daftsex.cookie')
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == 'next':
+              self.page += 1
+              post_data = {'page' : str(self.page)}
+           else:
+              self.page = 0
+              post_data = {}
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams, post_data)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '>&uarr;<', '</div>', False)[1]
+           data = data.split('<div class="video-item">')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\nAdded['+Added+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'lovehomeporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://lovehomeporn.com/' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="tag2', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'lovehomeporn-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=mv'],             'lovehomeporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=tr'],             'lovehomeporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=mr'],             'lovehomeporn-clips',    '', None))
+           self.SEARCH_proc='lovehomeporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'lovehomeporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://lovehomeporn.com/search?search_type=videos&search_query=%s' % url.replace(' ','+'), 'lovehomeporn-clips')
+           return valTab
+        if 'lovehomeporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''info">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.endswith('.webp'): phImage = re.sub(r'/260(.*?)195/', '/260%D1%85195/', phImage.replace('webp','jpg'))
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'EROPROFILE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.eroprofile.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           cats = '[{"title":"Amateur Moms/Mature","url":"13"},{"title":"Amateur Teens","url":"14"},{"title":"Amateurs","url":"12"},\
+           {"title":"Asian","url":"19"},{"title":"Ass","url":"27"},{"title":"BDSM","url":"25"},{"title":"Big Ladies","url":"5"},\
+           {"title":"Big Tits","url":"11"},{"title":"Bisexual","url":"18"},{"title":"Black / Ebony","url":"20"},{"title":"Celeb","url":"23"},\
+           {"title":"Dogging","url":"33"},{"title":"Facial / Cum","url":"24"},{"title":"Fetish / Kinky","url":"10"},{"title":"Fucking / Sucking","url":"26"},\
+           {"title":"Hairy","url":"7"},{"title":"Interracial","url":"15"},{"title":"Lesbian","url":"6"},{"title":"Lingerie / Panties","url":"30"},\
+           {"title":"Nudist / Voyeur / Public","url":"16"},{"title":"Other / Cartoon","url":"28"},{"title":"Pregnant","url":"32"},\
+           {"title":"Shemale / TS","url":"9"},{"title":"Squirting","url":"34"},{"title":"Swingers / Gangbang","url":"8"}]'
+           result = simplejson.loads(cats)
+           for item in result:
+              title = str(item["title"])
+              id = str(item["url"])
+              url = 'http://www.eroprofile.com/m/videos/search?niche=%s&pnum=%s' % (id, '1')
+              valTab.append(CDisplayListItem(title,title,CDisplayListItem.TYPE_CATEGORY, [url],'EROPROFILE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Fun Videos ---",       "Fun Videos",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/search?niche=17"], 'EROPROFILE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",       "Popular Videos",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/popular"], 'EROPROFILE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Videos Home ---",       "Videos Home",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/home"], 'EROPROFILE-clips', '',None))
+           self.SEARCH_proc='EROPROFILE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EROPROFILE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.eroprofile.com/m/videos/search?niche=13.14.12.19.27.25.5.11.18.20.23.24.10.26.17.7.15.6.30.16.28.9.8.32.33.34&text=%s&pnum=1' % url.replace(' ','+'), 'EROPROFILE-clips')
+           return valTab
+        if 'EROPROFILE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'VideoListPageNav', 'marL', False)[1]
+           data = data.split('<div class="video">')
+           for item in data:
+              printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': phTitle = self.cm.ph.getSearchGroups(item, '''videoTtl">([^>]+?)<''', 1, True)[0].strip()
+              time = self.cm.ph.getSearchGroups(item, '''videoDur">([^>]+?)<''', 1, True)[0].strip()
+              added = self.cm.ph.getSearchGroups(item, '''fsSmall">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if time and not 'Web Analytics' in phTitle and not 'tools' in time:
+                 valTab.append(CDisplayListItem(phTitle,'['+time+'] '+phTitle+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'absoluporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.absoluporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl.replace('..','')
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'absoluporn-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-main-1.html'],             'absoluporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-note-1.html'],             'absoluporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-date-1.html'],             'absoluporn-clips',    '', None))
+           self.SEARCH_proc='absoluporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'absoluporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.absoluporn.com/en/search-%s-1.html' % url.replace(' ','+'), 'absoluporn-clips')
+           return valTab
+        if 'absoluporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           data = data.split('<div class="thumb-main">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'amateurcool' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.amateurcool.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurcool.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'amateurcool.cookie', 'amateurcool.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.amateurcool.com/channels/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'amateurcool-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.amateurcool.com/most-viewed/page1.html'],             'amateurcool-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.amateurcool.com/top-rated/page1.html'],             'amateurcool-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,['https://www.amateurcool.com/most-recent/page1.html'],             'amateurcool-clips',    '', None))
+           self.SEARCH_proc='amateurcool-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'amateurcool-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.amateurcool.com/search/%s/page1.html' % url.replace(' ','+'), 'amateurcool-clips')
+           return valTab
+        if 'amateurcool-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurcool.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'amateurcool.cookie', 'amateurcool.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'NEXT', False)[1]
+           data = data.split('<div class="item nb"')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = phImage.replace(' ','%20')
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('page'): next = url.replace(url.split('/')[-1],next)
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'porngo' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://porngo.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porngo.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porngo.cookie', 'porngo.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           if len(data)<100 and 'Maintenance' in data:
+              msg = _("Last error:\n%s" % data)
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              return valTab
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="letter-block">', '<div class="letter-block">', False)[1]
+           if ''==data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<div class="letter-block__item">', '</div>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              if phTitle.startswith('-') or ''== phTitle: continue
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'porngo-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'porngo-clips',    '', None))
+           self.SEARCH_proc='porngo-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porngo-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porngo.com/search/%s/' % url.replace(' ','+'), 'porngo-clips')
+           return valTab
+        if 'porngo-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porngo.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porngo.cookie', 'porngo.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '>Next', False)[1]
+           data = data.split('<div class="thumb item ">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''pull-right no-rating">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+ next.split('/')[-2],CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'anybunny' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://anybunny.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class=linkscts', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).replace('\n','').strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/top/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'anybunny-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://anybunny.com/top/'],             'anybunny-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,['http://anybunny.com/new/'],             'anybunny-clips',    '', None))
+           self.SEARCH_proc='anybunny-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anybunny-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://anybunny.com/top/%s' % url.replace(' ','+'), 'anybunny-clips')
+           return valTab
+        if 'anybunny-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'topbtmse', '>Next page', False)[1]
+           data = data.split('nuyrfe')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'datoporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://datoporn.co' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'dato.porn', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://dato.porn' + phUrl
+              if not 'sort_by' in phUrl: phUrl= phUrl+'?sort_by=post_date'     
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'datoporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='datoporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'datoporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://dato.porn/search/%s/' % url.replace(' ','+'), 'datoporn-clips')
+           return valTab
+        if 'datoporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'datoporn.co', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data = data.split('<div class="item')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','')
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://dato.porn' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://dato.porn'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'hqporner' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://hqporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<section', '</section>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hqporner-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='hqporner-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hqporner-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hqporner.com/?s=%s' % url.replace(' ','+'), 'hqporner-clips')
+           return valTab
+        if 'hqporner-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '>Next', False)[1]
+           data = data.split('<div class="6u">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''fa-clock-o meta-data">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'spankbang' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://spankbang.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/s/[^"^']+?)['"]''', 1, True)[0]
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/tag/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'spankbang-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Trending ---","Trending",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/trending_videos/'],             'spankbang-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most_popular/?period=week'],             'spankbang-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new_videos/'],             'spankbang-clips',    '', None))
+           self.SEARCH_proc='spankbang-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'spankbang-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://spankbang.com/s/%s/' % url.replace(' ','+'), 'spankbang-clips')
+           return valTab
+        if 'spankbang-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           if next == '': next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data = data.split('data-id=')
+           if len(data): del data[0]
+           for item in data:
+              Added = ''
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''i-len">([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''</use></svg>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''&nbsp;<span>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('//'): next = 'http:' + next
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-2].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'cumlouder' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.cumlouder.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a tag-url=', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'cumlouder-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","channels",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'cumlouder-girls',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Series ---","series",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/series/'],             'cumlouder-girls',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Girls ---","girls",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/girls/'],             'cumlouder-girls',    '', None))
+           self.SEARCH_proc='cumlouder-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'cumlouder-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.cumlouder.com/search/?q=%s' % url.replace(' ','+'), 'cumlouder-clips')
+           return valTab
+        if 'cumlouder-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           if next == '': next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data = data.split('<a class="muestra-escena')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''minutos sprite"></span>([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''i-len">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''fecha sprite"></span>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('//'): next = 'http:' + next
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-2].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        if 'cumlouder-girls' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('class="muestra-escena')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'cumlouder-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           return valTab
+
+        if 'porn00' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.porn00.org'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="category-menu', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="item"', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              if ''==phTitle: continue
+              if ''==phUrl: continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'porn00-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='porn00-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porn00-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porn00.org/search/?q=%s' % url.replace(' ','+'), 'porn00-clips')
+           return valTab              
+        if 'porn00-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+           data = data.split('<div class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              Added = self.cm.ph.getSearchGroups(item, '''added">[<em>]?([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              page = self.cm.ph.getSearchGroups(str(next), '''from:([^"^']+?)['"]''')[0]
+              next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+              valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+           return valTab
+
+        if 'watchpornx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://watchpornx.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="cat-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    '',"Pornstars"))
+           valTab.insert(0,CDisplayListItem("--- Years ---","Years",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    '',"Years"))
+           valTab.insert(0,CDisplayListItem("--- Studios ---","Studios",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    '',"Studios"))
+           #valTab.insert(0,CDisplayListItem("--- Clips & Scenes ---","Clips & Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/clips-scenes'],             'watchpornx-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Featured ---","Featured",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/featured-movies'],             'watchpornx-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-clips',    '', None))
+           self.SEARCH_proc='watchpornx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'watchpornx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://watchpornx.com/?s=%s' % url.replace(' ','+'), 'watchpornx-clips')
+           return valTab              
+        if 'watchpornx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''rel="tag">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'watchpornx-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="entry-content">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+        if 'watchpornx-years' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #printDBG( 'Host catUrl: '+str(catUrl) )
+           if catUrl == 'Studios':
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Studios<', '</ul>', False)[1]
+           elif catUrl == 'Years':
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Years', '</ul>', False)[1]
+           elif catUrl == 'Pornstars':
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Pornstars', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-clips', '', None)) 
+           return valTab
+
+        if 'volimeee' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.volimeee.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'volimeee.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'volimeee.cookie', 'volimeee.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="pull-right">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?type=public'],'volimeee-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---","HD",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/hd?type=public'],             'volimeee-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Videos ---","Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?type=public'],             'volimeee-clips',    '',None))
+           self.SEARCH_proc='volimeee-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'volimeee-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.volimeee.com/search/videos?search_query=%s' % url.replace(' ','+'), 'volimeee-clips')
+           return valTab              
+        if 'volimeee-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'volimeee.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'volimeee.cookie', 'volimeee.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination', '&raquo', False)[1]
+           n = '<div class="video-views pull-right'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added">([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next_page = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next_page)[-1]
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page 
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'P720' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://p720.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'P720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'P720.cookie', 'p720.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'P720-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'+'?sort_by=post_date'],             'P720-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'+'?sort_by=post_date'],             'P720-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'+'?sort_by=post_date'],             'P720-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'P720-clips',    '',None))
+           self.SEARCH_proc='P720-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'P720-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://p720.net/search/%s/?sort_by=post_date' % url.replace(' ','+'), 'P720-clips')
+           return valTab              
+        if 'P720-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'P720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'P720.cookie', 'p720.net', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'pornopersik' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornopersik.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornopersik.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornopersik.cookie', 'pornopersik.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'pornopersik-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           self.SEARCH_proc='pornopersik-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornopersik-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornopersik.com/search/%s/?sort_by=post_date' % url.replace(' ','+'), 'pornopersik-clips')
+           return valTab              
+        if 'pornopersik-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornopersik.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornopersik.cookie', 'pornopersik.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ANYPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://anyporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'anyporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---","HD",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/categories/hd/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/popular/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/newest/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           self.SEARCH_proc='anyporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anyporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://anyporn.com/search/%s/' % url.replace(' ','+'), 'anyporn-clips')
+           return valTab              
+        if 'anyporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".*?from:(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = "<div class='item"
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''durationid.*?innerHTML\s*?=\s*?"([^"^']+?)"''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if '?' in url:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              else:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'?from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ANON-V' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://anon-v.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'anon-v-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://anon-v.com/most-popular/?sort_by=post_date'],             'anon-v-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://anon-v.com/latest-updates/?sort_by=post_date'],             'anon-v-clips',    '',None))
+           self.SEARCH_proc='anon-v-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anon-v-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://anon-v.com/search/%s/' % url.replace(' ','+'), 'anon-v-clips')
+           return valTab              
+        if 'anon-v-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".*?from:(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if '?' in url:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              else:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'?from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'bravoporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.bravoporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoporn.cookie', 'bravoporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/c/' in phUrl: continue
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'bravoporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'bravoporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'bravoporn-clips',    '',None))
+           self.SEARCH_proc='bravoporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bravoporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bravoporn.com/s/?q=%s' % url.replace(' ','+'), 'bravoporn-clips')
+           return valTab              
+        if 'bravoporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoporn.cookie', 'bravoporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''<a href=['"]([^"^']+?)['"]\sclass="next nopop"''', 1, True)[0] 
+           n = 'class="video_block'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              #printDBG( 'Host listsItems next: '+next )
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'bravoteens' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.bravoteens.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoteens.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoteens.cookie', 'bravoteens.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="preview-item">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'bravoteens-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top/'],             'bravoteens-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/popular/'],             'bravoteens-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new/'],             'bravoteens-clips',    '',None))
+           self.SEARCH_proc='bravoteens-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bravoteens-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bravoteens.com/search/?q=%s' % url.replace(' ','+'), 'bravoteens-clips')
+           return valTab              
+        if 'bravoteens-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoteens.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoteens.cookie', 'bravoteens.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination', '</div>', False)[1]
+           n = 'class="preview-item"'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next_page = re.compile('</span>.+?<a href="(.+?)"', re.DOTALL).findall(next)[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next_page.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'sleazyneasy' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sleazyneasy.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="thumb">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'sleazyneasy-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'sleazyneasy-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'sleazyneasy-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'sleazyneasy-clips',    '',None))
+           self.SEARCH_proc='sleazyneasy-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sleazyneasy-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sleazyneasy.com/search/?q=%s' % url.replace(' ','+'), 'sleazyneasy-clips')
+           return valTab              
+        if 'sleazyneasy-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pager', '</div>', False)[1]
+           n = '<span class="thumb-info">'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.sleazyneasy.com/videos/[^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''data-poster=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''<i>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''truncate">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next_page = re.compile('href="(.+?)"', re.DOTALL).findall(next)[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next_page.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'vjav' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://vjav.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vjav.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'vjav.cookie', 'vjav.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'vjav-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'vjav-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'vjav-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'vjav-clips',    '',None))
+           self.SEARCH_proc='vjav-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'vjav-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.vjav.com/search/?q=%s' % url.replace(' ','+'), 'vjav-clips')
+           return valTab              
+        if 'vjav-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vjav.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'vjav.cookie', 'vjav.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+           n = 'data-id='
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''truncate">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 page = self.cm.ph.getSearchGroups(str(next), '''page:([^"^']+?)['"]''')[0]
+                 url = url.replace(url.split('/')[-1],'')
+                 next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+                 valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'javhoho' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://javhoho.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'javhoho.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'javhoho.cookie', 'javhoho.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'javhoho-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Free Asian Porn ---","Free Asian Porn",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-asian-porn/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free Korean Porn ---","Free Korean Porn",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-korean-porn/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free Chinese Porn ---","Free Chinese Porn",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-chinese-porn/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free JAV Censored ---","Free JAV Censored",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-jav-censored/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free JAV Uncensored ---","Free JAV Uncensored",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-jav-uncensored/'],             'javhoho-clips',    '',None))
+           self.SEARCH_proc='javhoho-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'javhoho-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://javhoho.com/search/%s/' % url.replace(' ','+'), 'javhoho-clips')
+           return valTab              
+        if 'javhoho-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'javhoho.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'javhoho.cookie', 'javhoho.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           n = '<div id="post-'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+   
+        if 'forcedcelebs' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://forcedcelebs.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'forcedcelebs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'forcedcelebs-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Free Scenes ---","Free Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/free'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Celebrity Scenes ---","Celebrity Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/celebrities'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Porn Rape Scenes ---","Porn Rape Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/pornrape'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Porn Scenes ---","Porn Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/porn'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Rape Scenes ---","Rape Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/rape'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Incest Scenes ---","Incest Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/incest'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Forced Scenes ---","Forced Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos/forced'],             'forcedcelebs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'forcedcelebs-clips',    '',None))
+           self.SEARCH_proc='forcedcelebs-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'forcedcelebs-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://forcedcelebs.net/search?query=%s' % url.replace(' ','+'), 'forcedcelebs-clips')
+           return valTab              
+        if 'forcedcelebs-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'forcedcelebs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           tmp = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a ', '</a>')
+           next = ''
+           for item in tmp:
+              if '&raquo;' not in item: continue
+              next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''')[0]
+              if next.startswith('/'): next = self.MAIN_URL + next
+           tmp = '' 
+           n = '<div class="thumb">'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+
+        if 'familyporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://familyporn.tv'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'familyporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = data.split('<div class="th">')
+           if len(data2): del data2[0]
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'familyporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/tags/' in phUrl: continue
+              phTitle = self._cleanHtmlStr(item).strip()+'   [tag]'
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'familyporn-clips', phImage, None)) 
+           self.SEARCH_proc='familyporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'familyporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://familyporn.tv/search/%s/' % url.replace(' ','+'), 'familyporn-clips')
+           return valTab              
+        if 'familyporn-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'familyporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="page-current">', '</nav>', False)[1]
+           n = 'data-item-id='
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''data-poster=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''calendar"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 tmp = self.cm.ph.getAllItemsBeetwenMarkers(next, '<li>', '</li>')
+                 for item in tmp:
+                    next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''')[0]
+                    if next=='': error
+                    if next.startswith('/'): next = self.MAIN_URL + next
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+
+        if 'bitporno' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://bitporno.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bitporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/cat-' in phUrl: continue
+              phTitle = self._cleanHtmlStr(item).strip()
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'bitporno-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='bitporno-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bitporno-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bitporno.com/?q=%s' % url.replace(' ','+'), 'bitporno-clips')
+           return valTab              
+        if 'bitporno-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bitporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pages-active"', 'class="pages"', False)[1]
+           n = '<div class="entry square_entry'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''<div style.*?>([^>]+?)<''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''</a> - ([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''')[0]
+                 if next.startswith('/'): next = self.MAIN_URL + next
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('-')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+
+        if 'ebuxxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://ebuxxx.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ebuxxx.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="nav"', '</nav>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item).strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'ebuxxx-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='ebuxxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ebuxxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://ebuxxx.net/index.php?do=search&subaction=search&story=%s' % url.replace(' ','+'), 'ebuxxx-clips')
+           return valTab              
+        if 'ebuxxx-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ebuxxx.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pnext', 'Next', False)[1]
+           n = '<div class="item">'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].split('|')[0].strip()
+              if phTitle=='': continue
+              if phUrl=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''calendar"></i><span>([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+decodeHtml(phTime)+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ebuxxx-serwer', phImage, None)) 
+           if next:
+              try:
+                 next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''')[0]
+                 if next.startswith('/'): next = self.MAIN_URL + next
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page : '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+        if 'ebuxxx-serwer' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ebuxxx.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           phTitle = self.cm.ph.getSearchGroups(data, '''title" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phImage = self.cm.ph.getSearchGroups(data, '''image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           videoPage = self.cm.ph.getAllItemsBeetwenMarkers(data, '<iframe', '</iframe>')
+           for item in videoPage:
+              printDBG( 'Host  videoPage: '+item )
+              phUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phUrl),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab 
+		   
+        return valTab
+
+    def getLinksForVideo(self, url):
+        printDBG("Urllist.getLinksForVideo url[%s]" % url)
+        videoUrls = []
+        uri, params   = DMHelper.getDownloaderParamFromUrl(url)
+        printDBG(params)
+        uri = urlparser.decorateUrl(uri, params)
+       
+        urlSupport = self.up.checkHostSupport( uri )
+        if 1 == urlSupport:
+            retTab = self.up.getVideoLinkExt( uri )
+            videoUrls.extend(retTab)
+            printDBG("Video url[%s]" % videoUrls)
+            return videoUrls
+
+    def getParser(self, url):
+        printDBG( 'Host getParser begin' )
+        printDBG( 'Host getParser mainurl: '+self.MAIN_URL )
+        printDBG( 'Host getParser url    : '+url )
+        if url.startswith('http://www.4tube.com'):                    return 'http://www.4tube.com'
+        if url.startswith('https://www.4tube.com'):                   return 'http://www.4tube.com'
+        if url.startswith('https://www.fux.com'):                     return 'http://www.4tube.com'
+        if url.startswith('http://www.pornerbros.com'):               return 'http://www.4tube.com'
+        if url.startswith('https://www.pornerbros.com'):              return 'http://www.4tube.com'
+        if url.startswith('https://www.porntube.com'):                return 'http://www.4tube.com'
+        if url.startswith('https://www.ah-me.com'):                   return 'http://www.ah-me.com'
+        if url.startswith('http://www.cliphunter.com'):               return 'http://www.cliphunter.com'
+        if url.startswith('http://www.dachix.com'):                   return 'http://www.dachix.com'
+        if url.startswith('http://www.drtuber.com'):                  return 'http://www.drtuber.com'
+        if url.startswith('http://www.eporner.com'):                  return 'http://www.eporner.com'
+        if url.startswith('http://www.yourupload.com'):               return 'https://www.yourupload.com'
+        if url.startswith('http//yourupload.com'):                    return 'https://www.yourupload.com'
+        if url.startswith('https://www.yourupload.com'):              return 'https://www.yourupload.com'
+        if url.startswith('https://yourupload.com'):                  return 'https://www.yourupload.com'
+        if url.startswith('https://www.hclips.com'):                  return 'http://www.hclips.com'
+        if url.startswith('https://hclips.com'):                      return 'http://www.hclips.com'
+        if url.startswith('http://www.hdporn.net'):                   return 'http://www.hdporn.net'
+        if url.startswith('http://hdsite.net'):                       return 'https://hdsite.net'
+        if url.startswith('https://hdsite.net'):                      return 'https://hdsite.net'
+        if url.startswith('http://www.hdzog.com'):                    return 'http://www.hdzog.com'
+        if url.startswith('http://hentaigasm.com'):                   return 'http://hentaigasm.com'
+        if url.startswith('http://www.homemoviestube.com'):           return 'http://www.homemoviestube.com'
+        if url.startswith('http://hotmovs.com'):                      return 'http://www.hdzog.com'
+        if url.startswith('https://www.katestube.com'):               return 'https://www.katestube.com'
+        if url.startswith('http://www.katestube.com'):                return 'https://www.katestube.com'
+        if url.startswith('https://www.koloporno.com'):               return 'https://www.koloporno.com'
+        if url.startswith('https://mangovideo'):                      return 'https://mangovideo'
+        if url.startswith('https://www.pinflix.com'):                 return 'https://www.pinflix.com'
+        if url.startswith('https://videos.porndig.com'):              return 'https://porndig.com'
+        if url.startswith('https://www.playvids.com'):                return 'https://www.playvids.com'
+        if url.startswith('http://porndoe.com'):                      return 'http://porndoe.com'
+        if url.startswith('https://porndoe.com'):                     return 'http://porndoe.com'
+        if url.startswith('https://www.porndoe.com'):                 return 'http://porndoe.com'
+        if url.startswith('http://www.pornhd.com'):                   return 'http://www.pornhd.com'
+        if url.startswith('http://www.pornhub.com/embed/'):           return 'http://www.pornhub.com/embed/'
+        if url.startswith('https://www.pornhub.com/embed/'):          return 'http://www.pornhub.com/embed/'
+        if url.startswith('http://pl.pornhub.com/embed/'):            return 'http://www.pornhub.com/embed/'
+        if url.startswith('http://pl.pornhub.com'):                   return 'http://www.pornhub.com'
+        if url.startswith('http://www.pornhub.com'):                  return 'http://www.pornhub.com'
+        if url.startswith('https://www.pornhub.com'):                 return 'http://www.pornhub.com'
+        if url.startswith('http://m.pornhub.com'):                    return 'http://m.pornhub.com'
+        if url.startswith('http://pornicom.com'):                     return 'http://pornicom.com'
+        if url.startswith('https://pornicom.com'):                    return 'http://pornicom.com'
+        if url.startswith('http://www.pornicom.com'):                 return 'http://pornicom.com'
+        if url.startswith('https://www.pornicom.com'):                return 'http://pornicom.com'
+        if url.startswith('https://www.pornoxo.com'):                 return 'https://www.pornoxo.com'
+        if url.startswith('http://www.pornrabbit.com'):               return 'http://www.pornrabbit.com'
+        if url.startswith('https://www.pornrewind.com'):              return 'https://www.pornrewind.com'
+        if url.startswith('https://www.realgfporn.com'):              return 'https://www.realgfporn.com'
+        if url.startswith('http://embed.redtube.com'):                return 'http://embed.redtube.com'
+        if url.startswith('http://www.redtube.com'):                  return 'http://www.redtube.com'
+        if url.startswith('https://spankbang.com'):                   return 'https://spankbang.com'
+        if url.startswith('http://www.thumbzilla.com'):               return 'http://www.thumbzilla.com'
+        if url.startswith('http://www.tnaflix.com'):                  return 'https://www.tnaflix.com'
+        if url.startswith('https://alpha.tnaflix.com'):               return 'https://alpha.tnaflix.com'
+        if url.startswith('http://www.tube8.com/embed/'):             return 'http://www.tube8.com/embed/'
+        if url.startswith('http://www.tube8.com'):                    return 'http://www.tube8.com'
+        if url.startswith('http://m.tube8.com'):                      return 'http://m.tube8.com'
+        if url.startswith('https://www.tube8.com'):                   return 'http://www.tube8.com'
+        if url.startswith('https://pornone.com'):                     return 'https://pornone.com'
+        if url.startswith('http://xhamster.com'):                     return 'http://xhamster.com'
+        if url.startswith('https://xhamster.com'):                    return 'http://xhamster.com'
+        if url.startswith('http://www.xnxx.com'):                     return 'http://www.xnxx.com'
+        if url.startswith('http://www.xvideos.com'):                  return 'http://www.xvideos.com'
+        if url.startswith('https://porngo.com'):                      return 'https://porngo.com'
+        if url.startswith('http://www.youjizz.com'):                  return 'http://www.youjizz.com'
+        if url.startswith('http://www.youporn.com/embed/'):           return 'http://www.youporn.com/embed/'
+        if url.startswith('http://www.youporn.com'):                  return 'http://www.youporn.com'
+        if url.startswith('https://www.youporn.com'):                 return 'http://www.youporn.com'
+        if url.startswith('https://sxyprn.com'):                      return 'https://yourporn.sexy'
+        if url.startswith('https://mini.zbiornik.com'):               return 'https://mini.zbiornik.com'
+        if url.startswith('http://sexkino.to'):                       return 'http://sexkino.to'
+        if url.startswith('http://www.plashporn.com'):                return 'http://sexkino.to'
+        if url.startswith('http://www.alphaporno.com'):               return 'http://www.tubewolf.com'
+        if url.startswith('http://crocotube.com'):                    return 'http://www.tubewolf.com'
+        if url.startswith('http://www.tubewolf.com'):                 return 'http://www.tubewolf.com'
+        if url.startswith('http://zedporn.com'):                      return 'http://www.tubewolf.com'
+        if url.startswith('https://www.alphaporno.com'):               return 'http://www.tubewolf.com'
+        if url.startswith('https://crocotube.com'):                    return 'http://www.tubewolf.com'
+        if url.startswith('https://www.tubewolf.com'):                 return 'http://www.tubewolf.com'
+        if url.startswith('https://zedporn.com'):                      return 'http://www.tubewolf.com'
+        if url.startswith('https://www.ashemaletube.com'):            return 'https://www.ashemaletube.com'
+        if url.startswith('https://upstream.to'):                     return 'https://upstream.to'
+        if url.startswith('https://prostream.to'):                    return 'https://prostream.to'
+
+# URLPARSER
+        if url.startswith('https://gounlimited.to'):                  return 'xxxlist.txt'
+        if url.startswith('http://gounlimited.to'):                  return 'xxxlist.txt'
+        if url.startswith('http://openload.co'):                      return 'xxxlist.txt'
+        if url.startswith('https://oload.tv'):                        return 'xxxlist.txt'
+        if url.startswith('http://www.cda.pl'):                       return 'xxxlist.txt'
+        if url.startswith('http://hqq.tv'):                           return 'xxxlist.txt'
+        if url.startswith('https://hqq.tv'):                          return 'xxxlist.txt'
+        if url.startswith('https://www.rapidvideo.com'):              return 'xxxlist.txt'
+        if url.startswith('http://videomega.tv'):                     return 'xxxlist.txt'
+        if url.startswith('http://www.flashx.tv'):                    return 'xxxlist.txt'
+        if url.startswith('http://streamcloud.eu'):                   return 'xxxlist.txt'
+        if url.startswith('http://thevideo.me'):                      return 'xxxlist.txt'
+        if url.startswith('https://vidoza.net'):                      return 'xxxlist.txt'
+        if url.startswith('http://fileone.tv'):                       return 'xxxlist.txt'
+        if url.startswith('https://fileone.tv'):                      return 'xxxlist.txt'
+        if url.startswith('https://streamcherry.com'):                return 'xxxlist.txt'
+        if url.startswith('https://vk.com'):                          return 'xxxlist.txt'
+        if url.startswith('https://www.fembed.com'):                  return 'xxxlist.txt'
+        if url.startswith('https://videobin.co'):                     return 'https://videobin.co'
+        if url.startswith('http://dato.porn'):                        return 'http://dato.porn'
+        if url.startswith('https://dato.porn'):                       return 'http://dato.porn'
+        if url.startswith('http://datoporn.co'):                      return 'http://dato.porn'
+        if url.startswith('https://datoporn.co'):                     return 'http://dato.porn'
+        if url.startswith('http://datoporn.com'):                     return 'http://dato.porn'
+        if url.startswith('https://datoporn.com'):                    return 'http://dato.porn'
+        if url.startswith('https://vidlox.tv'):                       return 'https://vidlox.tv'
+        if self.MAIN_URL == 'https://www.freeomovie.to/':             return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://streamporn.pw':                  return 'xxxlist.txt' 
+        if self.MAIN_URL == 'https://onlinepornfree.xyz':             return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://www.xxxstreams.org':              return 'xxxlist.txt' 
+        if self.MAIN_URL == 'https://pandamovie.info':                return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://fullxxxmovies.net':               return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://www.pornrewind.com':             return 'xxxlist.txt'
+        if self.MAIN_URL == 'http://www.pornfromczech.com':           return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://netflixporno.net':                return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://watchpornx.com':                 return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://ebuxxx.net':                     return 'xxxlist.txt'
+
+# A TO DO ...
+        if url.startswith('http://www.slutsxmovies.com/embed/'): return 'http://www.nuvid.com'
+        if url.startswith('http://www.cumyvideos.com/embed/'):   return 'http://www.nuvid.com'
+        #if url.startswith('http://www.x3xtube.com'):         return 'file: '
+        if url.startswith('http://www.nuvid.com'):           return 'http://www.nuvid.com'
+        if url.startswith('http://www.wankoz.com'):          return 'file: '
+        if url.startswith('http://hornygorilla.com'):        return 'file: '
+        #if url.startswith('http://www.vikiporn.com'):        return '1file: "'
+        if url.startswith('http://www.fetishshrine.com'):    return 'file: '
+        if url.startswith('http://www.sunporno.com'):        return 'http://www.sunporno.com'
+        if url.startswith('http://theclassicporn.com'):      return "video_url: '"
+        if url.startswith('http://www.faphub.xxx'):          return 'http://www.faphub.xxx'
+        if url.startswith('http://www.sleazyneasy.com'):     return 'file: '
+        if url.startswith('http://www.proporn.com'):         return 'http://www.proporn.com'
+        if url.startswith('http://www.tryboobs.com'):        return "video_url: '"
+        if url.startswith('http://www.viptube.com'):         return 'http://www.nuvid.com'
+        if url.startswith('http://pervclips.com'):           return 'http://www.wankoz.com'
+        if url.startswith('http://www.jizz.us'):             return 'http://www.x3xtube.com'
+        if url.startswith('http://www.pornstep.com'):        return 'videoFile="'
+        if url.startswith('http://www.azzzian.com'):         return "video_url: '"
+        if url.startswith('http://www.porndreamer.com'):     return 'http://www.x3xtube.com'
+        if url.startswith('http://www.tubeon.com'):          return 'http://www.tubeon.com'
+        if url.startswith('http://www.finevids.xxx'):        return "video_url: '"
+        if url.startswith('http://www.pornwhite.com'):       return 'file: '
+        if url.startswith('http://www.xfig.net'):            return 'videoFile="'
+        if url.startswith('http://www.pornoid.com'):         return "video_url: '"
+        if url.startswith('http://tubeq.xxx'):               return 'http://www.faphub.xxx'
+        if url.startswith('http://www.wetplace.com'):        return "video_url: '"
+        if url.startswith('http://sexylies.com'):            return 'http://sexylies.com'
+        if url.startswith('http://www.eskimotube.com'):      return 'http://www.eskimotube.com'
+        if url.startswith('http://www.pornalized.com'):      return "video_url: '"
+        if url.startswith('http://www.porn5.com'):           return 'http://www.porn5.com'
+        if url.startswith('http://www.pornyeah.com'):        return 'http://www.pornyeah.com'
+        if url.startswith('http://www.porn.com'):            return 'http://www.porn5.com'
+        if url.startswith('http://www.yeptube.com'):         return 'http://www.yeptube.com'
+        if url.startswith('http://www.pornpillow.com'):      return 'http://www.pornpillow.com'
+        if url.startswith('http://porneo.com'):              return 'http://www.nuvid.com'
+        if url.startswith('http://www.5fing.com'):           return 'file: '
+        if url.startswith('http://www.pornroxxx.com'):       return "0p'  : '"
+        if url.startswith('http://www.hd21.com'):            return "0p'  : '"
+        if url.startswith('http://www.pornrox.com'):         return "0p'  : '"
+        if url.startswith('http://www.flyflv.com'):          return 'http://www.flyflv.com'
+        if url.startswith('http://www.xtube.com'):           return 'https://vidlox.tv'
+        if url.startswith('http://xxxkingtube.com'):         return 'http://xxxkingtube.com'
+        if url.startswith('http://www.boyfriendtv.com'):     return 'source src="'
+        if url.startswith('http://pornxs.com'):              return 'http://pornxs.com'
+        if url.startswith('http://pornsharing.com'):         return 'http://pornsharing.com'
+        if url.startswith('http://www.vivatube.com'):        return 'http://vivatube.com'
+        if url.startswith('http://www.clipcake.com'):        return 'videoFile="'
+        if url.startswith('http://www.cliplips.com'):        return 'videoFile="'
+        if url.startswith('http://www.sheshaft.com'):        return 'file: '
+        if url.startswith('http://www.vid2c.com'):           return 'videoFile="'
+        if url.startswith('http://www.bonertube.com'):       return 'videoFile="'
+
+# Test mjpg
+        if url.endswith('.mjpg'):                            return 'mjpg_stream'
+        if url.endswith('.cgi'):                             return 'mjpg_stream'
+        if self.MAIN_URL == 'http://hotmovs.com':            return 'http://www.hdzog.com'
+        if self.MAIN_URL == 'https://pornone.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://sxyprn.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.moviefap.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.homemoviestube.com': return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hdzog.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.4tube.com':         return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.fux.com':           return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.pornerbros.com':    return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.porntube.com':      return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.playvids.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.realgfporn.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://tubepornclassic.com':    return 'http://tubepornclassic.com'
+        if self.MAIN_URL == 'https://www.koloporno.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornomenge.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.yuvutu.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.camsoda.com/':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.thumbzilla.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.cliphunter.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.filmyporno.tv':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://porndoe.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.porntrex.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://porn720.net':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://rusporn.tv':             return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.extremetube.com':   return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.el-ladies.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.livejasmin.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://pl.bongacams.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.tnaflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.empflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.myfreecams.com/':   return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.drtuber.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.dachix.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.youjizz.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.cam4.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.amateurporn.net':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://chaturbate.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.ah-me.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornhd.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornrabbit.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://beeg.com':               return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.tube8.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.redtube.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.youporn.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://showup.tv':              return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.xnxx.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.xvideos.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://hentaigasm.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://xhamsterlive.com':       return 'http://xhamster.com/cams'
+        if self.MAIN_URL == 'http://xhamster.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.eporner.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornhub.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.4tube.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hdporn.net':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://m.tube8.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://m.pornhub.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.katestube.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hclips.com':         return 'http://www.hclips.com'
+        if self.MAIN_URL == 'https://www.pinflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.upornia.com':        return 'http://www.hdzog.com'
+        if self.MAIN_URL == 'https://www.txxx.com':          return 'https://www.txxx.com'
+        if self.MAIN_URL == 'https://www.sunporno.com':      return 'http://www.sunporno.com'
+        if self.MAIN_URL == 'http://sexu.com':               return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.tubewolf.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://streamate.com':         return self.MAIN_URL 
+        if self.MAIN_URL == 'https://momxxxfun.com':         return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.mydirtyhobby.to':   return self.MAIN_URL 
+        if self.MAIN_URL == 'http://www.adulttvlive.net':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.balkanjizz.com':    return self.MAIN_URL 
+        if self.MAIN_URL == 'https://pornorussia.tv':        return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.letmejerk.com':     return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.gotporn.com':       return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.analdin.com':       return self.MAIN_URL 
+        if self.MAIN_URL == 'https://fapset.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://daftsex.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://lovehomeporn.com/':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.eroprofile.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.absoluporn.com':     return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.amateurcool.com':   return self.MAIN_URL 
+        if self.MAIN_URL == 'http://anybunny.com':           return self.MAIN_URL  
+        if self.MAIN_URL == 'https://hqporner.com':          return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.naked.com':         return self.MAIN_URL  
+        if self.MAIN_URL == 'https://www.cumlouder.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.porn00.org':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.volimeee.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://p720.net':              return self.MAIN_URL
+        if self.MAIN_URL == 'https://pornopersik.com':       return 'https://p720.net'
+        if self.MAIN_URL == 'https://anyporn.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://anon-v.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.bravoporn.com':     return 'https://anyporn.com'
+        if self.MAIN_URL == 'https://www.bravoteens.com':    return 'https://anyporn.com'
+        if self.MAIN_URL == 'https://www.sleazyneasy.com':   return 'https://www.sleazyneasy.com'
+        if self.MAIN_URL == 'https://vjav.com':              return 'http://www.hdzog.com'
+        if self.MAIN_URL == 'https://javhoho.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://forcedcelebs.net':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://porngo.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://familyporn.tv':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://bitporno.com':         return self.MAIN_URL
+
+
+        return ''
+
+    def getResolvedURL(self, url):
+        printDBG( 'Host getResolvedURL begin' )
+        printDBG( 'Host getResolvedURL url: '+url )
+        videoUrl = ''
+        parser = self.getParser(url)
+        printDBG( 'Host getResolvedURL parser: '+parser )
+        #if parser == '': return url
+
+        if 'gounlimited.to' in url:
+            if 'embed' not in url:
+                url = 'https://gounlimited.to/embed-{0}.html'.format(url.split('/')[3])
+        if 'clipwatching.com' in url:
+            if 'embed' not in url:
+                video_id = self.cm.ph.getSearchGroups(url, 'clipwatching.com/([A-Za-z0-9]{12})[/.-]')[0]
+                url = 'http://clipwatching.com/embed-{0}.html'.format(video_id)
+
+        if parser == 'mjpg_stream':
+           try:
+              stream=urllib.urlopen(url)
+              bytes=''
+              while True:
+                 bytes+=stream.read(1024)
+                 a = bytes.find('\xff\xd8')
+                 b = bytes.find('\xff\xd9')
+                 if a!=-1 and b!=-1:
+                    jpg = bytes[a:b+2]
+                    bytes= bytes[b+2:]
+                    with open('/tmp/obraz.jpg', 'w') as titleFile:  
+                       titleFile.write(jpg) 
+                       return 'file:///tmp/obraz.jpg'
+           except: pass
+           return ''
+
+        if parser == 'http://www.porntrex.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porntrex.cookie', 'porntrex.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+str(data) )
+           if 'video is a private' in data:
+              SetIPTVPlayerLastHostError(_(' This video is a private.'))
+              return []
+           if self.format4k:
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url5: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url5 4k: '+videoPage )
+                 return strwithmeta(videoPage, {'Referer':url})
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url4: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url4 High HD: '+videoPage )
+                 return strwithmeta(videoPage, {'Referer':url})
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url3: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url3 Full High: '+videoPage )
+                 return strwithmeta(videoPage, {'Referer':url})
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url2: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_alt_url2 HD: '+videoPage )
+              return strwithmeta(videoPage, {'Referer':url})
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_alt_url Medium: '+videoPage )
+              return strwithmeta(videoPage, {'Referer':url})
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_url Low: '+videoPage )
+              return strwithmeta(videoPage, {'Referer':url})
+           return ''
+
+        if parser == 'http://www.hclips.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://hclips.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://tubepornclassic.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'tubepornclassic.cookie', 'tubepornclassic.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = ph.search(data, '''video_url":"([^"]+?)"''')[0]
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://tubepornclassic.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.hdzog.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hdzog.cookie', 'hdzog.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           posturl = 'https://%s/sn4diyux.php' % url.split('/')[2]
+           pC3 = re.search('''pC3:'([^']+)''', data)
+           if not pC3: return ''
+           pC3 = pC3.group(1)
+           vidid = re.search('''video_id["|']?:\s?(\d+)''', data).group(1)
+           postdata = '%s,%s' % (vidid, pC3)
+           sts, data = self.getPage(posturl, 'hclips.cookie', 'hclips.com', self.defaultParams, post_data={'param': postdata})
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           printDBG( 'Host videoUrl:%s' % videoUrl )
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.upornia.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upornia.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           try:
+              video_url = self.cm.ph.getSearchGroups(data, '''var video_url=['"]([^"^']+?)['"]''')[0]
+              hash = self.cm.ph.getSearchGroups(data, '''/get_file/(\d+/[^"^']+?)/''')[0] 
+              #printDBG( 'Host video_url: '+video_url )
+              decoder = 'Dpww3Dw64=function(b){var c="",d=0;/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g.exec(b)'\
+              '&&console.log("error decoding url");b=b.replace(/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g,"");'\
+              'do{var f="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),e="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),g="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),h="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),f=f<<2|e>>4,e=(e&15)<<4|g>>2,k=(g&3)<<6|h,c=c+String.fromCharCode(f);'\
+              '64!=g&&(c+=String.fromCharCode(e));64!=h&&(c+=String.fromCharCode(k))}while(d<b.length);return unescape(c)};'
+              js = decoder + '\n' + 'var video_url="'+video_url+'";\n'+'vidurl = (Dpww3Dw64(video_url));'  
+              #printDBG( 'Host getResolvedURL js: '+js )
+              urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+              videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''vidurl=([^"^']+?);''')[0]
+              if hash: videoUrl = videoUrl.replace(videoUrl.split('/')[-6]+'/'+videoUrl.split('/')[-5],hash)
+              if videoUrl: return videoUrl
+           except Exception:
+              printExc()
+           printDBG( 'Host start embed' )
+           videoPage = self.cm.ph.getSearchGroups(data, '''(https://upornia.com/embed/[^"^']+?)[&"]''')[0] 
+           if not videoPage: videoPage = self.cm.ph.getSearchGroups(data, '''(https://www.txxx.com/embed/[^"^']+?)[&"]''')[0] 
+           if videoPage:
+              try: data2 = self.cm.getURLRequestData({ 'url': videoPage, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+              except:
+                 printDBG( 'Host getResolvedURL query error url: '+videoPage )
+                 return ''
+              #printDBG( 'Host getResolvedURL data embed: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data2, '''video_url=['"]([^"^']+?)['"]''')[0]
+              if 'http' in videoUrl: return videoUrl
+           printDBG( 'Host direct link' )
+           videoPage = self.cm.ph.getSearchGroups(data, '''(https://upornia.com/get_file/[^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage
+           videoPage = self.cm.ph.getSearchGroups(data, '''(https://www.txxx.com/get_file/[^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage
+           return ''
+
+        if parser == 'http://beeg.com':
+           URL = url
+           sts, data = self.get_Page(URL)
+           if not sts: return
+           printDBG( 'second beeg-clips data: '+data )
+           if '"error"' in data: 
+              URL = url.replace('/'+url.split('/')[-2], '')
+              sts, data = self.get_Page(URL)
+              if not sts: return
+              printDBG( 'second beeg-clips data2: '+data )
+              #SetIPTVPlayerLastHostError(_(' Video not found.'))
+              #return []
+           phUrl=''
+           try:
+              if data.startswith('{'): data = '['+data+']'
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 if str(item["240p"]) != 'None': phUrl = str(item["240p"])
+                 if str(item["480p"]) != 'None': phUrl = str(item["480p"])
+                 if str(item["720p"]) != 'None': phUrl = str(item["720p"])
+                 if self.beegfullhd: 
+                    if str(item["1080p"]) != 'None': phUrl = str(item["1080p"])
+                 if self.format4k:
+                    if str(item["2160p"]) != 'None': phUrl = str(item["2160p"])
+           except Exception:
+              printExc()
+           if phUrl== '':
+              SetIPTVPlayerLastHostError(_(' Video not found.'))
+              return []
+           if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+           phUrl = phUrl.replace('{DATA_MARKERS}','data=pc.DE')
+           if not self.beeg_salt: return phUrl
+           key = re.search(r'/key=(.*?)%2Cend=', phUrl, 0) 
+           key = key.group(1)
+           printDBG( 'key encrypt : '+key )
+           key = decrypt_key(key, self.beeg_salt)
+           printDBG( 'key decrypt: '+key )
+           videoUrl = re.sub(r'/key=(.*?)%2Cend=', '/key='+key+',end=', phUrl)
+           return videoUrl
+  
+        if parser == 'http://showup.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'showup.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           parse = re.search("var srvE = '(.*?)'", data, re.S)
+           if parse:
+              printDBG( 'Host Url: '+url)
+              printDBG( 'Host rtmp: '+ parse.group(1))
+              rtmp = parse.group(1)
+           startChildBug = re.search("startChildBug\(user\.uid, '', '([\s\S]+?)'", data, re.I);
+           if startChildBug:
+              s = startChildBug.group(1)
+              printDBG( 'Host startChildBug: '+ s)
+              ip = ''
+              t = re.search(r"(.*?):(.*?)", s, re.I)
+              if t.group(1) == 'j12.showup.tv': ip = '94.23.171.122'
+              if t.group(1) == 'j13.showup.tv': ip = '94.23.171.121'
+              if t.group(1) == 'j11.showup.tv': ip = '94.23.171.115'
+              if t.group(1) == 'j14.showup.tv': ip = '94.23.171.120'
+              printDBG( 'Host IP: '+ip)
+              port = s.replace(t.group(1)+':', '')
+              printDBG( 'Host Port: '+port)
+              modelName = url.replace('http://showup.tv/','')
+              printDBG( 'Host modelName: '+modelName)
+
+              libsPath = GetPluginDir('libs/')
+              import sys
+              sys.path.insert(1, libsPath)
+              import websocket 
+              wsURL1 = 'ws://'+s
+              wsURL2 = 'ws://'+ip+':'+port
+              printDBG( 'Host wsURL1: '+wsURL1)
+              printDBG( 'Host wsURL2: '+wsURL2)
+              ws = websocket.create_connection(wsURL2)
+
+              zapytanie = '{ "id": 0, "value": ["", ""]}'
+              zapytanie = zapytanie.decode("utf-8")
+              printDBG( 'Host zapytanie1: '+zapytanie)
+              ws.send(zapytanie) 
+              result = ws.recv()
+              printDBG( 'Host result1: '+result)
+
+              zapytanie = '{ "id": 2, "value": ["%s"]}' % modelName
+              zapytanie = zapytanie.decode("utf-8")
+              printDBG( 'Host zapytanie2: '+zapytanie)
+              ws.send(zapytanie) 
+              result = ws.recv()
+              printDBG( 'Host result2: '+result)
+
+              playpath = re.search('value":\["(.*?)"', result)
+
+              if playpath:
+                 Checksum =  playpath.group(1)  
+                 if len(Checksum)<30: 
+                    for x in range(1, 10): 
+                       ws.send(zapytanie)
+                       result = ws.recv()
+                       czas = re.search('(\d+)\[:\](\d+)\[', result )
+                       if czas:
+                          printDBG( 'Host czas.group(1): '+czas.group(1) )
+                          printDBG( 'Host czas.group(2): '+czas.group(2) )
+                          czas = int(czas.group(1)) - int(czas.group(2))
+                          printDBG( 'Host a: '+str(czas) )
+                          a = str(czas)
+                          if a=='0': a = 'kilka'
+                          Checksum = 'PRIVATE - Czekaj '+a+' sekund'
+                          break
+                    if Checksum=='' or Checksum=='failure': Checksum='OFFLINE'
+                    ws.close() 
+                    SetIPTVPlayerLastHostError(Checksum)
+                    return []
+                 videoUrl = 'rtmp://cdn-t0.showup.tv:1935/webrtc/'+Checksum+'_aac' # token=fake'
+                 ws.close() 
+                 try:
+                    import commands
+                    for x in range(1, 9): 
+                       cmd = '/usr/bin/rtmpdump -B 1 -r "%s"' % videoUrl.replace('cdn-t0','cdn-t0'+str(x))
+                       wow = commands.getoutput(cmd)
+                       printDBG( 'HostXXX cmd > '+ cmd )
+                       #printDBG( 'HostXXX rtmpdump > '+ wow )
+                       if not 'StreamNotFound' in wow:
+                          return videoUrl.replace('cdn-t0','cdn-t0'+str(x))+' live=1'
+                       printDBG( 'HostXXX GUZIK ' )
+                 except:
+                    printDBG( 'HostXXX error commands.getoutput ' )
+                 return videoUrl.replace('cdn-t0','cdn-t01')+' live=1'
+
+           return ''
+
+        def base_myfreecam(serwer, url):
+           data = ''
+           newurl = 'http://video%s.myfreecams.com:1935/NxServer/mfc_%s.f4v_aac/playlist.m3u8' % (serwer, url)
+           try:
+              data = urllib2.urlopen(newurl, timeout=1)
+              #printDBG( 'Host data.meta:  '+str(data.meta) )
+           except:
+              printDBG( 'Host error newurl:  '+newurl )
+           if data:
+              return newurl
+
+        if parser == 'https://www.myfreecams.com/':
+           printDBG("Connecting to Chat Server:%s" % str(random.choice(self.chat_servers)))
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           videoUrl = myfreecam_start(url, str(random.choice(self.chat_servers)))
+           if videoUrl != '':
+              key = self.cm.ph.getSearchGroups(videoUrl, '''video([^"^']+?)\.''')[0] 
+              id = self.cm.ph.getSearchGroups(videoUrl, '''mfc_([^"^']+?)\.''')[0] 
+              printDBG( 'Host key:  '+key )
+              printDBG( 'Host id:  '+id )
+              referer = 'https://www.myfreecams.com/_html/player.html?broadcaster_id={0}&target=new_window&username={1}'.format(id, url)
+              try:
+                 server_type = None
+                 value = None
+                 if self.h5video_servers.get(str(key)):
+                    value = self.h5video_servers[str(key)]
+                    server_type = 'h5video_servers'
+                    videoUrl = videoUrl.replace('video'+key,value)
+                 elif self.wzobs_servers.get(str(key)):
+                    value = self.wzobs_servers[str(key)]
+                    server_type = 'wzobs_servers'
+                    videoUrl = videoUrl.replace('video'+key,value)
+                    videoUrl = videoUrl.replace('mfc_','mfc_a_')
+                 elif self.ngvideo_servers.get(str(key)):
+                    value = self.ngvideo_servers[str(key)]
+                    server_type = 'ngvideo_servers'
+                    SetIPTVPlayerLastHostError(_('Not supported.'))
+                    return []
+                 printDBG( 'value: %s server_type: %s' % (value, server_type) )
+              except Exception:
+                 printExc()
+              printDBG( 'Host videoUrl:  '+videoUrl )
+              videoUrl = strwithmeta(videoUrl, {'Origin': 'https://www.myfreecams.com'})
+              videoUrl = strwithmeta(videoUrl, {'Cookie':self.cookieHeader})
+              videoUrl = strwithmeta(videoUrl, {'iptv_proto':'m3u8', 'iptv_livestream':True})
+
+              #videoUrl = strwithmeta(videoUrl, {'Cookie':self.cookieHeader+'gw=1; user_id=0; _gat_gtag_UA_295864_20=1;'})
+              #videoUrl = strwithmeta(videoUrl, {'Origin': 'https://new.myfreecams.com', 'Cookie':self.cid, 'Referer':'https://new.myfreecams.com', 'User-Agent': ''})
+              #videoUrl = urlparser.decorateUrl(videoUrl, {'Origin': 'https://new.myfreecams.com', 'iptv_proto':'m3u8', 'iptv_livestream':True, 'User-Agent':host, 'Referer':'https://new.myfreecams.com'})
+
+              tmp = getDirectM3U8Playlist(videoUrl, checkExt=False, variantCheck=False, checkContent=True, sortWithMaxBitrate=99999999)
+              for item in tmp:
+                 printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url']
+           return ''
+
+
+        def _get_stream_uid(username):
+           m = hashlib.md5(username.encode('utf-8') + str(time_time()).encode('utf-8'))
+           return m.hexdigest()
+
+        if parser == 'https://pl.bongacams.com':
+           printDBG( 'Host url:  '+url )
+           username = url 
+           printDBG( 'Host username:  '+username )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           host = 'Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4'
+           header = {'User-Agent': host, 'Accept':'text/html,application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3', 'Referer':'https://en.bongacams.com/'+username, 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+           sts, data = self.cm.getPage('https://en.bongacams.com/'+username, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Parser Bonga data: '+data ) 
+           amf = self.cm.ph.getSearchGroups(data, '''MobileChatService\(\'\/([^"^']+?)\'\+\$''')[0] 
+           if not amf: amf = 'tools/amf.php?x-country=pl&m=1&res='
+           url_amf = 'https://en.bongacams.com/' + amf + str(random.randint(2100000, 3200000))
+           printDBG( 'Host url_amf:  '+url_amf )
+           postdata = {'method' : 'getRoomData', 'args[]' : username} 
+           header = {'User-Agent': host, 'Accept':'text/html,application/xhtml+xml,application/xml,application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest', 'Referer':'https://en.bongacams.com/'+username, 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'url': url_amf, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': True, 'return_data': True }
+           sts, data = self.cm.getPage(url_amf, self.defaultParams, postdata)
+           if not sts: return ''
+           #printDBG( 'Parser Bonga link2: '+data ) 
+           serwer = self.cm.ph.getSearchGroups(data, '''"videoServerUrl":['"]([^"^']+?)['"]''', 1, True)[0] 
+           printDBG( 'Parser Bonga serwer: '+serwer ) 
+           url_m3u8 = 'https:' + serwer.replace('\/','/') + '/hls/stream_' +username + '/playlist.m3u8'
+           if serwer: 
+              videoUrl = urlparser.decorateUrl(url_m3u8, {'User-Agent': host, 'Referer':'https://bongacams.com/'+username})
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 #if not tmp: return ''
+                 try: tmp = sorted(tmp, key=lambda item: int(item.get('bitrate', '0')))
+                 except Exception: pass
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 try:
+                    if item['bitrate']=='unknown': 
+                       return ''
+                    return item['url']
+                    printDBG( 'item bitrate: '  +str(item['bitrate']))
+                 except Exception: pass
+           return ''
+
+        if parser == 'http://www.livejasmin.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'livejasmin.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'livejasmin.cookie', 'livejasmin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           performerid = self.cm.ph.getSearchGroups(data, '''performerid":['"]([^"^']+?)['"]''', 1, True)[0] 
+           sbip = self.cm.ph.getSearchGroups(data, '''sbip":['"]([^"^']+?)['"]''', 1, True)[0] 
+           sbhash = self.cm.ph.getSearchGroups(data, '''sbhash":['"]([^"^']+?)['"]''', 1, True)[0] 
+           #stream = urllib.unquote('https://dss-live-109-71-162-52.dditscdn.com/stream?url=rtmp%3A%2F%2F109.71.162.52%2FmemberChat%2FjasminSoniaCrystall3a6ac2233e19448a3ee26466ed126451%3FsessionId-7133bcde23b0f6ea7ee68440b313d4d1%7CclientInstanceId-44077313838477700147795168240074&stream=free%2Fstream_864_480_830&cid=420210&pid=83906493378')
+           stream = 'https://dss-live-'+sbip.replace('.','-')+'.dditscdn.com/stream?url=rtmp://'+sbip+'/memberChat/'+performerid+sbhash
+           #stream = 'https://dss-hls-'+sbip.replace('.','-')+'.dditscdn.com/h5live/http/playlist.m3u8'
+           #self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(stream, 'livejasmin.cookie', 'livejasmin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+
+           return data.meta['url']
+
+           return ''
+
+        if parser == 'https://www.cam4.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cam4.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           self.page = 1
+           printDBG( 'Host listsItems data: '+data )
+
+           Url = self.cm.ph.getSearchGroups(data, '''hlsUrl: ['"]([^"^']+?)['"]''')[0]+'?referer=cam4.com&timestamp='+str(int(time_time()*1000))
+           #Url = urlparser.decorateUrl(Url, {'User-Agent': host})
+           if self.cm.isValidUrl(Url): 
+              tmp = getDirectM3U8Playlist(Url, checkExt=False, variantCheck=False, checkContent=True, sortWithMaxBitrate=99999999)
+              for item in tmp:
+                 printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url'] #urlparser.decorateUrl(item['url'], {'User-Agent': host})
+           return ''
+
+        if parser == 'https://www.camsoda.com/':
+            if 'rtmp' in url:
+                rtmp = 1
+            else:
+                rtmp = 0
+            url = url.replace('rtmp','')
+            query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+            try: data = self.cm.getURLRequestData(query_data)
+            except:
+                printDBG( 'Host getResolvedURL query error url: '+url )
+                return ''
+            #printDBG( 'Host getResolvedURL data: '+data )
+            dane = '['+data+']'
+            #printDBG( 'Host listsItems json: '+dane )
+            result = simplejson.loads(dane)
+            if result:
+                try:
+                    for item in result:
+                        token = str(item["token"])
+                        app = str(item["app"])
+                        serwer = str(item["edge_servers"][0])
+                        #edge_servers2 = str(item["edge_servers"][1])
+                        stream_name = str(item["stream_name"])
+                        #printDBG( 'Host listsItems token: '+token )
+                        #printDBG( 'Host listsItems app: '+app )
+                        #printDBG( 'Host listsItems edge_servers1: '+serwer )
+                        #printDBG( 'Host listsItems edge_servers2: '+edge_servers2 )
+                        #printDBG( 'Host listsItems stream_name: '+stream_name )
+                        name = re.sub('-enc.+', '', stream_name)
+                        if rtmp == 0:
+                            #Url = 'https://%s/%s/mp4:%s_mjpeg/playlist.m3u8?token=%s' % (serwer, app, stream_name, token )
+                            Url = 'https://%s/%s/mp4:%s_aac/playlist.m3u8?token=%s' % (serwer, app, stream_name, token )
+                            USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0'
+                            Url = urlparser.decorateUrl(Url, {'User-Agent': USER_AGENT})
+                            if self.cm.isValidUrl(Url): 
+                                tmp = getDirectM3U8Playlist(Url)
+                                for item in tmp:
+                                    #printDBG( 'Host listsItems valtab: '  +str(item))
+                                    if str(item["with"])=='0':
+                                        SetIPTVPlayerLastHostError(' OFFLINE')
+                                        return []
+                                    return item['url']
+                            SetIPTVPlayerLastHostError(' OFFLINE')
+                            return []
+                        else:
+                            Url = 'rtmp://%s:1935/%s?token=%s/ playpath=?mp4:%s swfUrl=https://www.camsoda.com/lib/video-js/video-js.swf live=1 pageUrl=https://www.camsoda.com/%s' % (serwer, app, token, stream_name, name)
+                            return Url
+                except Exception: printExc()
+            return ''
+
+        if parser == 'xxxlist.txt':
+           videoUrls = self.getLinksForVideo(url)
+           if videoUrls:
+              for item in videoUrls:
+                 Url = item['url']
+                 Name = item['name']
+                 printDBG( 'Host url:  '+Url )
+                 return Url
+           return ''
+
+        if parser == 'http://xhamster.com/cams':
+           config='http://xhamsterlive.com/api/front/config'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(config)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+           parse = re.search('"sessionHash":"(.*?)"', data, re.S) 
+           if not parse: return ''
+           sessionHash = parse.group(1) 
+           printDBG( 'Host sessionHash: '+sessionHash )
+
+           models='http://xhamsterlive.com/api/front/models'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(models)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           result = simplejson.loads(data)
+           try:
+              for item in result["models"]:
+                 ID = str(item["id"]) 
+                 Name = item["username"]
+                 BroadcastServer = item["broadcastServer"]
+                 swf_url = 'http://xhamsterlive.com/assets/cams/components/ui/Player/player.swf?bgColor=2829099&isModel=false&version=1.5.892&bufferTime=1&camFPS=30&camKeyframe=15&camQuality=85&camWidth=640&camHeight=480'
+                 Url = 'rtmp://b-eu10.stripcdn.com:1935/%s?sessionHash=%s&domain=xhamsterlive.com playpath=%s swfUrl=%s pageUrl=http://xhamsterlive.com/cams/%s live=1 ' % (BroadcastServer, sessionHash, ID, swf_url, Name) 
+                 Url = 'rtmp://b-eu10.stripcdn.com:1935/%s?sessionHash=%s&domain=xhamsterlive.com playpath=%s swfVfy=%s pageUrl=http://xhamsterlive.com/cams/%s live=1 ' % (BroadcastServer, sessionHash, ID, swf_url, Name) 
+                 if ID == url: 
+                    return urlparser.decorateUrl(Url, {'Referer': 'https://xhamsterlive.com/cams/'+Name, 'iptv_livestream': True}) 
+           except Exception:
+              printExc()
+           return ''
+
+        if parser == 'http://www.cliphunter.com':
+           host = 'Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3'
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'} 
+           query_data = { 'url': url, 'header': header, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              return ''
+           #printDBG( 'Host listsItems data: '+data )
+           url = re.findall('"url":"(.*?)"}', data, re.S)
+           if url:
+              url = url[-1]
+              url = url.replace('\u0026', '.').replace(r"\/",r"/")
+              if url.startswith('http'): return url
+           url = re.findall('"url":"(.*?)"}', data, re.S)
+           if url:
+              url = url[-1]
+              url = url.replace('\u0026', '.')
+              translation_table = {
+                 'm': 'a', 'b': 'b', 'c': 'c', 'i': 'd', 'd': 'e', 'g': 'f', 'a': 'h',
+                 'z': 'i', 'y': 'l', 'n': 'm', 'l': 'n', 'f': 'o', 'v': 'p', 'x': 'r',
+                 'r': 's', 'q': 't', 'p': 'u', 'e': 'v',
+                 '$': ':', '&': '.', '(': '=', '^': '&', '=': '/',
+              }
+              url = ''.join(translation_table.get(c, c) for c in url) 
+              return url
+           else: return ''
+
+        if parser == 'http://www.redtube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('mediaDefinition: (.*?)],', data, re.S) 
+           if not parse: return ''
+           result = simplejson.loads(parse.group(1)+']')
+           if result:
+              for item in result:
+                 videoUrl = str(item["videoUrl"]) 
+                 quality = item["quality"]
+                 printDBG( 'Host quality'+quality )
+                 printDBG( 'Host videoUrl'+videoUrl )
+                 if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.tube8.com/embed/':
+           return self.getResolvedURL(url.replace(r"embed/",r""))
+        
+        if parser == 'http://www.pornhub.com/embed/':
+           return self.getResolvedURL(url.replace(r"embed/",r"view_video.php?viewkey="))
+
+        if parser == 'http://www.tube8.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''quality_720p['"]:['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''quality_480p['"]:['"]([^"^']+?)['"]''')[0] 
+           return videoUrl.replace('\/','/') 
+
+        if parser == 'http://www.4tube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           if url.startswith('https://www.4tube.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.4tube.com'
+           elif url.startswith('https://www.fux.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.fux.com'
+           elif url.startswith('https://www.pornerbros.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.pornerbros.com'
+           elif url.startswith('https://www.porntube.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.porntube.com'
+           self.HTTP_HEADER['Referer'] = url
+
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           domena = url.split('/')[2].replace ('www.','')
+           printDBG( 'Host domain: '+domena )
+
+           videoID = re.findall('data-id="(\d+)".*?data-quality="(\d+)"', data, re.S)
+           try:
+              init = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE\s*?=\s*?['"]([^"^']+?)['"]''', 1, True)[0] 
+              init = urllib.unquote(base64.b64decode(init))
+              #printDBG( 'Host listsItems init: '+init )
+              try:
+                 result = byteify(simplejson.loads(init)["page"])
+              except Exception:
+                 printExc()
+                 result = byteify(simplejson.loads(data))
+              videoID = result["video"]["mediaId"]
+              info = {}
+              res = ''
+              for item in result["video"]["encodings"]:
+                 res += str(item["height"]) + "+"
+              res.strip('+')
+              posturl = "https://token.%s/0000000%s/desktop/%s" % (domena, videoID, res)
+              printDBG( 'Host getResolvedURL posturl: '+posturl )
+              sts, data = self.get_Page(posturl)
+              if not sts: return ''
+              printDBG( 'Host getResolvedURL posturl data1: '+data )
+              videoUrl = re.findall('token":"(.*?)"', data, re.S)
+              if videoUrl: return videoUrl[-1]     
+           except Exception:
+              printExc()
+           if videoID:
+              res = ''
+              for x in videoID:
+                  res += x[1] + "+"
+              res.strip('+')
+              posturl = "https://token.%s/0000000%s/desktop/%s" % (domena, videoID[-1][0], res)
+              printDBG( 'Host getResolvedURL posturl: '+posturl )
+              sts, data = self.get_Page(posturl)
+              if not sts: return ''
+              printDBG( 'Host getResolvedURL posturl data2: '+data )
+              videoUrl = re.findall('token":"(.*?)"', data, re.S)
+              if videoUrl: return videoUrl[-1]                 
+              else: return ''
+           return ''
+
+        if parser == 'http://hotmovs.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hotmovs.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           videoPage = self.cm.ph.getSearchGroups(data, '''var video_url=['"]([^"^']+?)['"]''')[0] 
+           hash = self.cm.ph.getSearchGroups(data, '''/get_file/(\d+/[^"^']+?)/''')[0] 
+           printDBG( 'Host getResolvedURL videoPage: '+videoPage )
+           if videoPage:
+              decoder = "decrypt=function(_0xf4bdx6) {"\
+                 "var _0xf4bdx7 = '',"\
+                 "    _0xf4bdx8 = 0;"\
+                 "/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g ['exec'](_0xf4bdx6) && console['log']('error decoding url');"\
+                 "_0xf4bdx6 = _0xf4bdx6['replace'](/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g, '');"\
+                 "do {"\
+                 "var _0xf4bdx9 = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdxa = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdxb = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdxc = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdx9 = _0xf4bdx9 << 2 | _0xf4bdxa >> 4,"\
+                 "_0xf4bdxa = (_0xf4bdxa & 15) << 4 | _0xf4bdxb >> 2,"\
+                 "_0xf4bdxd = (_0xf4bdxb & 3) << 6 | _0xf4bdxc,"\
+                 "_0xf4bdx7 = _0xf4bdx7 + String['fromCharCode'](_0xf4bdx9);"\
+                 "64 != _0xf4bdxb && (_0xf4bdx7 += String['fromCharCode'](_0xf4bdxa));"\
+                 "64 != _0xf4bdxc && (_0xf4bdx7 += String['fromCharCode'](_0xf4bdxd))"\
+                 "} while (_0xf4bdx8 < _0xf4bdx6['length']);;"\
+                 "return unescape(_0xf4bdx7)"\
+                 "};" 
+              js = decoder + "\n" + "vidurl = decrypt('"+videoPage+"');"  
+              printDBG( 'Host getResolvedURL js: '+js )
+              urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+              videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''vidurl=([^"^']+?);''')[0] 
+              printDBG( 'Host hash: '+hash )
+              printDBG( 'Host videoUrl.split4: '+videoUrl.split('/')[-6] )
+              printDBG( 'Host videoUrl.split5: '+videoUrl.split('/')[-5] )
+
+              if hash: videoUrl = videoUrl.replace(videoUrl.split('/')[-6]+'/'+videoUrl.split('/')[-5],hash)
+              if videoUrl: return videoUrl
+              if videoPage.startswith('http'): return videoPage
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'https://www.txxx.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://txxx.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.youporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = url
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           if 'mediaDefinition' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'mediaDefinition = ', '];', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    if str(item["quality"])=='720' : return str(item["videoUrl"]).replace('\u0026', '&')
+                    if str(item["quality"])=='480' : return str(item["videoUrl"]).replace('\u0026', '&')
+                    if str(item["quality"])=='360' : return str(item["videoUrl"]).replace('\u0026', '&')
+                    if str(item["quality"])=='240' : return str(item["videoUrl"]).replace('\u0026', '&')
+              except Exception as e:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"videoUrl":['"]([^'"]+?)['"]''')[0].replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: return videoUrl.replace('\u0026', '&')
+           return ''
+
+        # make by 12asdfg12
+        def ssut51(str):
+            str = re.sub(r'\D', '', str)
+            sut = 0
+            for i in range(0, len(str)):
+                sut += int(str[i])
+            return sut
+
+        if parser == 'https://yourporn.sexy':
+           for x in range(1, 99): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+              self.defaultParams['header']['Origin'] = 'https://sxyprn.com'
+              sts, data = self.getPage(url, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data: '+str(data) )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''data-vnfo=['"].*?:['"]([^"^']+?)['"]''')[0].replace(r"\/",r"/")
+              if videoUrl:
+                 printDBG( 'Host listsItems videoUrl: '+videoUrl )
+                 if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+                 if videoUrl.startswith('/'): videoUrl = 'https://sxyprn.com' + videoUrl
+                 try:
+                    match = re.search('src="(/js/main[^"]+)"', data, re.DOTALL | re.IGNORECASE)
+                    if match.group(1).startswith('/'): result = 'https://sxyprn.com' + match.group(1)
+                    sts, jsscript = self.getPage(result, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+                    replaceint = re.search(r'tmp\[1\]\+= "(\d+)";', jsscript, re.DOTALL | re.IGNORECASE).group(1)
+                    videoUrl = videoUrl.replace('/cdn/', '/cdn%s/' % replaceint)
+                 except:
+                    if '/cdn/' in videoUrl: videoUrl = videoUrl.replace('/cdn/','/cdn'+str(self.yourporn)+'/')
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'Origin': 'https://sxyprn.com'}) 
+                 tmp = videoUrl.split('/')
+                 a = str(int(tmp[-3]) - ssut51(re.sub(r'\D', '', tmp[-2])) - ssut51(re.sub(r'\D', '', tmp[-1])))
+                 if int(a)>0: 
+                    tmp[-3] = a
+                 else: 
+                    tmp[-3] = str(int(tmp[-3])-101)
+                 videoUrl = '/'.join(tmp)
+              self.defaultParams['max_data_size'] = 0
+              sts, data = self.getPage(videoUrl, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+              if not sts: return ''
+              if not 'sxyprn' in data.meta['url']: return data.meta['url']
+           return ''
+
+        if parser == 'https://www.playvids.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''hls-src720=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''hls-src480=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''hls-src360=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src720=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src480=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src360=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           return ''
+
+        if parser == 'http://www.tubewolf.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           for x in range(1, 10): 
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              sts, data = self.get_Page(url)
+              if not sts: return ''
+              printDBG( 'Host listsItems data: '+data )
+              data = self.cm.ph.getDataBeetwenMarkers(data, '<video id', '</video>', False)[1]
+              videoUrl = re.findall('<source\ssrc="(.*?)"', data, re.S)
+              if videoUrl:
+                 return videoUrl[-1]
+
+        if parser == 'https://streamate.com':
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            url = 'https://streamate.com/blacklabel/hybrid/?name={}&lang=en&manifestUrlRoot=https://sea1c-ls.naiadsystems.com/sea1c-edge-ls/80/live/s:'.format(url)
+            query_data = { 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                printDBG( 'Host listsItems query error url:'+url )
+                return ''
+            printDBG( 'Host listsItems data: '+data )
+            url =  self.cm.ph.getSearchGroups(data, '''data-manifesturl=['"]([^"^']+?)['"]''')[0] 
+            header = {'Referer': 'https://streamate.com', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
+            query_data = { 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                printDBG( 'Host listsItems query error url:'+url )
+                return ''
+            printDBG( 'Host listsItems data2: '+data )
+            try:
+                videoinfo = simplejson.loads(data)
+                videoUrl = videoinfo['formats']['mp4-hls']['manifest']
+                videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': 'https://streamate.com', 'iptv_livestream': True}) 
+                if '.m3u8' in videoUrl:
+                    if self.cm.isValidUrl(videoUrl): 
+                        tmp = getDirectM3U8Playlist(videoUrl)
+                        for item in tmp:
+                            printDBG( 'Host listsItems valtab: '  +str(item))
+                            return item['url']
+                return videoUrl
+            except Exception as e:
+                printExc()
+            return ''
+
+        if parser == 'http://www.youjizz.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+
+           #host = 'iPhone'
+           #header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'X-Requested-With':'XMLHttpRequest'}   
+           #try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           #except:
+           #   printDBG( 'Host getResolvedURL query error url: '+url )
+           #   return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"1080","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"720","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"480","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"360","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&") 
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"288","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&") 
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"270","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+
+           error = self.cm.ph.getDataBeetwenMarkers(data, '<p class="text-gray">', '</p>', False)[1]
+           if error:
+              SetIPTVPlayerLastHostError(_(error))
+              return []
+           return ''
+
+        if parser == 'https://www.ashemaletube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'sources: ' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'sources: ', ']', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    if str(item["desc"])=='720p' and str(item["active"])=='true': return str(item["src"])
+                    if str(item["desc"])=='480p' and str(item["active"])=='true': return str(item["src"])
+                    if str(item["desc"])=='360p' and str(item["active"])=='true': return str(item["src"])
+              except Exception as e:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl 
+
+           if 'To watch this video please' in data:
+              SetIPTVPlayerLastHostError(_(' Login Protected.'))
+              return []
+           return ''
+
+        if parser == 'http://www.pornhub.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              match = re.compile(r"""quality_([0-9]{3,4})p\s*=(?:"|')?([^'";]+)(?:"|')?;""", re.DOTALL | re.IGNORECASE).findall(data)
+              match = sorted(match, key=lambda x: int(x[0]), reverse=True)
+              videolink = match[0][1]
+              if "/*" in videolink:
+                 videolink = re.sub(r"/\*[^/]+/", "", videolink).replace("+","")
+                 linkparts = re.compile(r"(\w+)", re.DOTALL | re.IGNORECASE).findall(videolink)
+                 for part in linkparts:
+                    partval = re.compile(part+'="(.*?)";', re.DOTALL | re.IGNORECASE).findall(data)[0]
+                    partval = partval.replace('" + "','')
+                    videolink = videolink.replace(part, partval)
+              videoUrl = videolink.replace(" ","")
+              printDBG( 'Host videoUrl: '+videoUrl )
+              if videoUrl: return strwithmeta(videoUrl, {'Referer':url})
+           except Exception:
+              printExc()  
+
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"720","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"480","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"240","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           try:
+              #js = re.findall('(var flashvars_(?:\d+).*?)loadScriptUniqueId', data, re.S)
+              js = re.findall('type="text/javascript">.*?(var\sflashvars.*?)</script>', data, re.S)
+              #js = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars_', 'loadScriptUniqueId', False)[1]
+              printDBG( 'Host data js: '+js[0] )
+              if js:
+                 urls = js_execute( js[0]+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_1080p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_720p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_480p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_240p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+           except Exception:
+              printExc()
+              embed = re.search('"embedCode":"<iframe src=."(.*?)"', data, re.S)
+              if embed:
+                 url = embed.group(1).replace('\/','/').replace('\\','')
+                 printDBG( 'Host data embed: '+url )
+                 sts, data = self._getPage(url, self.defaultParams)
+                 if not sts: return ''
+                 printDBG( 'Host listsItems data: '+data )
+                 videoPage = re.findall('quality_720p":"(.*?)"', data, re.S)
+                 if videoPage: return videoPage[0].replace('\/','/')
+                 videoPage = re.findall('quality_480p":"(.*?)"', data, re.S)
+                 if videoPage: return videoPage[0].replace('\/','/')
+           return ''
+
+        if parser == 'https://chaturbate.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER}
+           for x in range(1, 3): 
+              sts, data = self.get_Page(url)
+              if not sts: return
+              printDBG( 'Host listsItems data: '+str(data) )
+              if '/auth/login/' in self.cm.meta['url']:
+                 SetIPTVPlayerLastHostError(_(' PRIVATE.'))
+              if 'Room is currently offline' in data:
+                 SetIPTVPlayerLastHostError(_(' OFFLINE.'))
+              host = 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.18) Gecko/20110621 Mandriva Linux/1.9.2.18-0.1mdv2010.2 (2010.2) Firefox/3.6.18'
+              videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+              if not videoPage: 
+                 data = data.replace(r'\u0022','"').replace(r'\u002D','-')
+                 videoPage = self.cm.ph.getSearchGroups(data, '''hls_source":\s*['"]([^"^']+?)['"]''')[0] 
+              try:
+                 item = []
+                 videoUrl = videoPage.replace('&amp;','&')
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':host}) 
+                 tmp = getDirectM3U8Playlist(videoUrl, checkExt=True, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab1: '  +str(item))
+                 if self.format4k:
+                    return tmp[0]['url']
+                 else:
+                    if tmp[0]['height']<=1080 : return tmp[0]['url']
+                    if tmp[1]['height']<=1080 : return tmp[1]['url']
+                    if tmp[2]['height']<=1080 : return tmp[2]['url']
+              except Exception:
+                 printExc()
+           return ''
+  
+        if parser == 'https://www.mydirtyhobby.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = self.cm.ph.getSearchGroups(data, '''<iframe src=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if videoPage: 
+              videoPage = urlparser.decorateUrl(videoPage, {'Referer': url})
+              return self.getResolvedURL(videoPage)
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 data = packed[-1]
+              else:
+                 return ''
+              printDBG( 'Host data4: '+str(data) )
+              try:
+                 videoUrl = unpackJSPlayerParams(data, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+                 printDBG( 'OK4: ')
+              except Exception: pass 
+              printDBG( 'Host videoUrl: '+str(videoUrl) )
+              videoPage = self.cm.ph.getSearchGroups(str(videoUrl), '''sources:\[['"]([^"^']+?)['"]''')[0] 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              if videoPage: return videoPage
+           return ''
+
+        if parser == 'https://www.tnaflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tnaflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           vid = self.cm.ph.getSearchGroups(data, '''data-vid=['"]([^"^']+?)['"]''')[0]
+           nk =  self.cm.ph.getSearchGroups(data, '''data-nk=['"]([^"^']+?)['"]''')[0]
+           vk =  self.cm.ph.getSearchGroups(data, '''data-vk=['"]([^"^']+?)['"]''')[0]
+           xml = 'https://cdn-fck.tnaflix.com/tnaflix/%s.fid?key=%s&VID=%s&nomp4=1&catID=0&rollover=1&startThumb=31&embed=0&utm_source=0&multiview=0&premium=1&country=0user=0&vip=1&cd=0&ref=0&alpha' % (vk, nk, vid) 
+           sts, data = self.get_Page(xml, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+           if videoPage: return 'http://' + videoPage[-1]
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''download href=['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"contentUrl" content=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url})
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'https://www.empflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'empflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           vid = self.cm.ph.getSearchGroups(data, '''data-vid=['"]([^"^']+?)['"]''')[0]
+           nk =  self.cm.ph.getSearchGroups(data, '''data-nk=['"]([^"^']+?)['"]''')[0]
+           vk =  self.cm.ph.getSearchGroups(data, '''data-vk=['"]([^"^']+?)['"]''')[0]
+           xml = 'https://cdn-fck.empflix.com/empflix/%s-1.fid?key=%s&VID=%s&nomp4=1&catID=0&rollover=1&startThumb=31&embed=0&utm_source=0&multiview=0&premium=1&country=0user=0&vip=1&cd=0&ref=0&alpha' % (vk, nk, vid)
+           sts, data = self.get_Page(xml, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+           if videoPage: return 'http://' + videoPage[-1]
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''download href=['"]([^"^']+?)['"]''')[0]
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"contentUrl" content=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url})
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.moviefap.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'moviefap.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+           self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html'}
+           self.defaultParams = {'header':dict(self.HEADER)}
+           self.defaultParams['header']['Referer'] = url
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           xml = self.cm.ph.getSearchGroups(data, '''flashvars.config.*?//([^"^']+?)['"]''')[0]
+           if not xml: xml = self.cm.ph.getSearchGroups(data, '''name="config".*?//([^"^']+?)['"]''')[0] 
+           if xml:
+              videoUrl = "https://" + xml
+              sts, data = self.get_Page(videoUrl, self.defaultParams)
+              if not sts: return 
+              printDBG( 'Host listsItems data2: '+str(data) )
+              url = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+              if url:
+                 return "http://" + url[-1].replace('&amp;','&')  
+           return ''
+
+        if parser == 'https://www.pinflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pinflix.cookie', 'pinflix.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"720p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"480p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"360p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.pinflix.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'pinflix.cookie', 'pinflix.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'http://www.pornhd.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"1080p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"720p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"480p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"360p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.pornhd.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'http://www.adulttvlive.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'adulttv.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"](https://adult-channels.com/channels/[^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"](https://www.adulttvlive.net[^"^']+?embed/)['"]''')[0] 
+
+           sts, data = self.getPage(videoUrl, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           if 'porndig' in data:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"]([^"^']+?)['"]''')[0] 
+              return self.getResolvedURL(videoUrl)
+
+           if 'unescape' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'eval(', ');', False)
+              try:
+                 ddata = ''
+                 for idx in range(len(data)):
+                    tmp = data[idx].split('+')
+                    for item in tmp:
+                       item = item.strip()
+                       if item.startswith("'") or item.startswith('"'):
+                          ddata += self.cm.ph.getSearchGroups(item, '''['"]([^'^"]+?)['"]''')[0]
+                       else:
+                          tmp2 = re.compile('''unescape\(['"]([^"^']+?)['"]''').findall(item)
+                          for item2 in tmp2:
+                             ddata += urllib.unquote(item2)
+                
+                 printDBG('Host listsItems ddata2: '+ddata)
+                
+                 funName = self.cm.ph.getSearchGroups(ddata, '''function\s*([^\(]+?)''')[0].strip()
+                 sp      = self.cm.ph.getSearchGroups(ddata, '''split\(\s*['"]([^'^"]+?)['"]''')[0]
+                 modStr  = self.cm.ph.getSearchGroups(ddata, '''\+\s*['"]([^'^"]+?)['"]''')[0] 
+                 modInt  = int( self.cm.ph.getSearchGroups(ddata, '''\+\s*(-?[0-9]+?)[^0-9]''')[0] )
+                
+                 ddata =  self.cm.ph.getSearchGroups(ddata, '''document\.write[^'^"]+?['"]([^'^"]+?)['"]''')[0]
+                 data  = ''
+                 tmp   = ddata.split(sp)
+                 ddata = urllib.unquote(tmp[0])
+                 k = urllib.unquote(tmp[1] + modStr)
+                 for idx in range(len(ddata)):
+                    data += chr((int(k[idx % len(k)]) ^ ord(ddata[idx])) + modInt)
+                      
+                 printDBG('host data2: '+data)
+                
+                 if 'rtmp://' in data:
+                    rtmpUrl = self.cm.ph.getDataBeetwenMarkers(data, '&source=', '&', False)[1]
+                    if rtmpUrl == '':
+                       rtmpUrl = self.cm.ph.getSearchGroups(data, r'''['"](rtmp[^"^']+?)['"]''')[0]
+                    return rtmpUrl
+                 elif '.m3u8' in data:
+                    file = self.cm.ph.getSearchGroups(data, r'''['"](http[^"^']+?\.m3u8[^"^']*?)['"]''')[0]
+                    if file == '': file = self.cm.ph.getDataBeetwenMarkers(data, 'src=', '&amp;', False)[1]
+                    return file
+              except Exception:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl:
+              link = self.cm.ph.getSearchGroups(data, '''streamer":['"]([^"^']+?)['"]''')[0].replace(r"\/",r"/")
+              return 'http://www.filmon.com' + link
+           if not videoUrl: return ''
+           sts, data = self.getPage(videoUrl, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data3: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''sources:\[\{file:['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''source:['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?)['"]''', 1, True)[0] 
+           return videoUrl
+
+        if parser == 'https://www.balkanjizz.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           return self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''', 1, True)[0]
+
+        if parser == 'https://pornorussia.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           for x in range(1, 10): 
+              sts, data = self.getPage(url, 'pornorussia.cookie', 'pornorussia.tv', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if videoUrl: return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+
+        if parser == 'https://www.letmejerk.com':
+           for x in range(1, 10): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              self.defaultParams['header']['Referer'] = url
+              sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data1: '+data )
+              file = str(self.cm.ph.getAllItemsBeetwenMarkers(data, '<script', '</script>'))
+              tmp = file.split('|')
+              post = ''
+              for item in tmp:
+                 item = item.strip()
+                 if item.endswith("="): post = item
+                 if item.startswith("eX"): post = item
+                 if 'IWh0dHB' in item: post = item
+              #printDBG( 'Host post:%s' % base64.b64decode(post) )
+              #printDBG( 'Host post:%s' % base64.b64decode(post)[1:] )
+              #printDBG( 'Host post:%s' % base64.b64decode(post)[:len(post)] )
+              postdata = {'id' : url.split('/')[4]} 
+              self.defaultParams['header']['X-Requested-With'] = 'XMLHttpRequest'
+              self.defaultParams['header']['Host'] = 'letmejerk.com'
+              sts, data = self.getPage('https://letmejerk.com/load/video/'+post+'/', 'letmejerk.cookie', 'letmejerk.com', self.defaultParams, postdata)
+              if not sts: return ''
+              printDBG( 'Host listsItems data2: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''', 1, True)[0]
+              poster = self.cm.ph.getSearchGroups(videoUrl, '''(@[^"^']+?#)''', 1, True)[0]
+              videoUrl = videoUrl.replace(poster,'')
+
+              if 'm3u8' in videoUrl: 
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, "Origin": "https://letmejerk.com"})
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    return item['url']
+
+              HTTP_HEADER = {'Accept-Encoding': 'gzip, deflate', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'} 
+              defaultParams = {'header':HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              defaultParams['header']['Referer'] = url
+              defaultParams['max_data_size'] = 0
+              defaultParams['header']['Host'] = videoUrl.split('/')[2]
+              #defaultParams['header']['User-Agent'] = ua
+              defaultParams['header']['Accept'] = "video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"
+              defaultParams['header']['Range'] = "bytes=0-" 
+              defaultParams['header']['Referer'] = url
+              defaultParams['ignore_http_code_ranges'] = []
+              sts, data = self.getPage(videoUrl, 'letmejerk.cookie', 'letmejerk.com', defaultParams)
+              #if not sts: return ''
+              try:
+                 if data.meta['location']: return self.FullUrl(data.meta['location'])
+              except Exception: 
+                 printExc() 
+           return videoUrl 
+
+        if parser == 'https://www.gotporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'gotporn.cookie', 'gotporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.gotporn.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'gotporn.cookie', 'gotporn.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'https://www.analdin.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'analdin.cookie', 'analdin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:\s*['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.analdin.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'analdin.cookie', 'analdin.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'https://www.pornomenge.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return videoUrl
+
+        if parser == 'https://www.koloporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return videoUrl
+
+        if parser == 'http://www.sunporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = re.findall('video src="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return urlparser.decorateUrl(videoPage[0], {'Referer': url})
+           return ''
+
+        if parser == 'https://mini.zbiornik.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'http://dato.porn':
+           #if not 'embed' in url:
+           #   url = 'https://datoporn.co/embed-%s-658x400.html' % url.split('/')[-1]
+           USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'datoporn.co', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if 'login' in videoUrl or ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )		   
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': USER_AGENT}) 
+
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 packed = packed[-1]
+              else:
+                 return ''
+              printDBG( 'Host data4: '+str(packed) )
+              try:
+                 videoPage = unpackJSPlayerParams(packed, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+                 printDBG( 'OK4: ')
+              except Exception: pass 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              videoUrl = ph.search(videoPage, '''file:['"]([^'^"]+?)['"]''')[0]
+              if not videoUrl: videoUrl = ph.search(videoPage, '''src:['"]([^'^"]+?)['"]''')[0]
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              videoUrl = urlparser.decorateUrl(videoUrl, {'User-Agent': USER_AGENT, 'Referer': url})
+              if 'm3u8' in videoUrl:
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    videoUrl = item['url']
+              return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?\.mp4)['"]''')[0].replace('&amp;','&')
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?\.m3u8)['"]''')[0].replace('&amp;','&')
+           if videoUrl: return videoUrl
+           if 'File Not Found' in data: 
+              SetIPTVPlayerLastHostError(_(' File Not Found.'))
+              return []
+           if 'File is awaiting for moderation' in data: 
+              SetIPTVPlayerLastHostError(_(' File is awaiting for moderation.'))
+              return []
+           return ''
+
+        if parser == 'http://porn720.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'porn720.cookie', 'porn720.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return self.getResolvedURL(self.FullUrl(videoUrl))
+           videoUrl = re.compile('<source src="(.+?)"', re.DOTALL).findall(data)
+           if videoUrl:
+              videoUrl = urlparser.decorateUrl(videoUrl[-1], {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+              self.defaultParams['max_data_size'] = 0
+              sts, data = self.getPage(videoUrl, 'porn720.cookie', 'porn720.org', self.defaultParams)
+              if not sts: return ''
+              return data.meta['url']
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''720p['"]:['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''480p['"]:['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+           return ''
+
+        if parser == 'https://fapset.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return self.getResolvedURL(videoUrl)
+
+        if parser == 'http://www.filmyporno.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           match = re.findall('source src="(.*?)"', data, re.S)
+           if match: return match[0]
+           else: return ''
+
+        if parser == 'https://daftsex.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'daftsex.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = parser
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           #printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"](https://da[^"^']+?)['"]''')[0] 
+           sts, data2 = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data2 )
+           server = self.cm.ph.getSearchGroups(data2, '''server:\s*?['"]([^"^']+?)['"]''')[0] 
+           printDBG( 'Host  server1:%s' % server )
+           s = list(server)
+           printDBG( 'Host  server list:%s' % s )
+           s.reverse()
+           printDBG( 'Host  server list2:%s' % s )
+           server = base64.b64decode(str(''.join(s)))
+           printDBG( 'Host  server2:%s' % server)
+           try:
+              try:
+                 match = re.compile('id: "([^"]+)_([^"]+)".+:"(\d+)\.([^"]+)"}', re.DOTALL | re.IGNORECASE).findall(data2)[0]
+                 (id1, id2, res, extra) =  match
+                 video =  id1 + '/' + id2 + '/' + res + '.mp4?extra=' + extra
+                 printDBG( 'Host  video: '+video )
+                 return 'https://' + server + '/videos/' + video
+              except Exception: 
+                 printExc()
+              try:
+                 match = re.compile('id: "([^"]+)_([^"]+)".+"(\d+)"\:"([^"]+)"}', re.DOTALL | re.IGNORECASE).findall(data2)[0] 
+                 (id1, id2, res, extra) =  match
+                 video =  id1 + '/' + id2 + '/' + res + '.mp4?extra=' + extra
+                 printDBG( 'Host  video: '+video )
+                 return 'https://' + server + '/videos/' + video
+              except Exception: 
+                 printExc()
+           except Exception: 
+              printExc()
+           return ''
+
+        if parser == 'https://videobin.co':
+            baseUrl = strwithmeta(url)
+            referer = baseUrl.meta.get('Referer', '')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            if referer != '': self.HTTP_HEADER['Referer'] = referer
+            COOKIEFILE = os_path.join(GetCookieDir(), 'videobin.cookie')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return ''
+            printDBG( 'Host  data: %s' % data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, 'sources:', ']', False)[1]
+            data = re.compile('"(http[^"]+?)"').findall(data)
+            for videoUrl in data:
+                if videoUrl.split('?')[0].endswith('m3u8'):
+                    printDBG( 'Host  videoUrl: %s' % videoUrl )
+                    #if self.cm.isValidUrl(videoUrl): 
+                    #    videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': referer}) 
+                    #    tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                    #    for item in tmp:
+                    #        printDBG( 'Host listsItems valtab: '  +str(item))
+                    #        return item['url']
+                elif videoUrl.split('?')[0].endswith('mp4'):
+                    printDBG( 'Host  videoUrl: %s' % videoUrl )
+                    videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': referer, 'User-Agent': self.USER_AGENT}) 
+                    return videoUrl
+            return ''
+
+        if parser == 'https://lovehomeporn.com/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = parser
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           id = self.cm.ph.getSearchGroups(data, '''video_id\s*=\s*['"]([^"^']+?)['"]''')[0] 
+           videoUrl = "https://lovehomeporn.com/media/nuevo/config.php?key=%s" % id
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           videoUrl = ph.search(data, '''<file>([^>]+?)<''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'http://www.pornrabbit.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0]
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://www.eroprofile.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'http://www.absoluporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://www.amateurcool.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurcool.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'amateurcool.cookie', 'amateurcool.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://mangovideo':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mangovideo.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )		   
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']}) 
+
+        if parser == 'http://anybunny.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = self.cm.ph.getAllItemsBeetwenMarkers(data, '<iframe', '</iframe>')
+           for item in videoPage:
+              if 'exoclick' in item: continue
+              printDBG( 'Host  videoPage: '+item )
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''')[0] 
+           if ''== videoUrl:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0] 
+              if 'm3u8' in videoUrl:
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    return item['url']
+              else:
+                 return strwithmeta(videoUrl, {'Referer': url, 'User-Agent': self.USER_AGENT})
+
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           self.domains = ['vartuc.com', "azblowjobtube.com"]
+           try:
+              js_link = re.compile("src='(/kt_player/.*?)'", re.DOTALL | re.IGNORECASE).search(data).group(1)
+           except Exception: 
+              printExc()
+              videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0] 
+              printDBG( 'Host  videoUrl: '+videoUrl )
+
+           js_path = 'https://' + self.domains[0] + js_link + '&ver=x'
+           sts, data = self.getPage(js_path, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           js = data.split(";")
+           js = [line for line in js if (line.startswith("gh") or line.startswith("irue842")) and '=' in line and '(' not in line and ')' not in line]
+           js = "\n".join(js)
+           printDBG( 'Host  js: %s' % js )
+           urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+           videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return strwithmeta(videoUrl, {'Referer': url, 'User-Agent': self.USER_AGENT})
+           return ''
+
+        if parser == 'https://hqporner.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return ''
+           if 'page not found' in data:
+              SetIPTVPlayerLastHostError(_(' Oops, page not found!'))
+              return []
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           p1080 = ''
+           p720 = ''
+           p360 = ''
+           p240 = ''
+           subData = data.split('<source')
+           if len(subData): del subData[0]
+           if subData:
+              for item in subData:
+                 src = self.cm.ph.getSearchGroups(item, '''['"](//[^"^']+?)['"]''')[0].replace('\\','')
+                 if '1080' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p1080 = src
+                 if '720' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p720 = src
+                 if '360' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p360 = src
+                 if '240' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p240 = src
+              if p1080: return p1080
+              if p720: return p720
+              if p360: return p360
+              if p240: return p240
+           subData = self.cm.ph.getDataBeetwenMarkers(data, 'var srca', ']', False)[1].split('}')
+           if subData:
+              for item in subData:
+                 label   = self.cm.ph.getSearchGroups(item, 'label:\s*?"([^"]+?)"')[0]
+                 src     = self.cm.ph.getSearchGroups(item, 'file:\s*?"([^"]+?)"')[0]
+                 if '1080' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p1080 = src
+                 if '720' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p720 = src
+                 if '360' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p360 = src
+                 if '240' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p240 = src
+              if p1080: return p1080
+              if p720: return p720
+              if p360: return p360
+              if p240: return p240
+           videoUrl = re.compile("<source src='([^']+)'", re.DOTALL | re.IGNORECASE).findall(data)
+           if videoUrl:
+              videoUrl = videoUrl[0]
+              if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+              return videoUrl
+           videoUrl = re.compile("<script type='text/javascript' src='([^']+)'></script>", re.DOTALL | re.IGNORECASE).findall(data)
+           if videoUrl:
+              videoUrl = videoUrl[-1]
+              sts, data = self.get_Page(videoUrl)
+              if not sts: return ''
+              printDBG( 'Host  data2: '+data )
+              videoUrl = re.compile('file": "([^"]+)"', re.DOTALL | re.IGNORECASE).findall(data)
+              videoUrl = videoUrl[-1]
+              if videoUrl.startswith('//'):
+                 videoUrl = 'https:' + videoUrl
+              return videoUrl
+           videoUrl = re.compile('file": "([^"]+)"', re.DOTALL | re.IGNORECASE).findall(data)
+           if videoUrl:
+              videoUrl = videoUrl[-1]
+              if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'https://www.naked.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'naked.cookie')
+           UA = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36"
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'naked.cookie', 'naked.com', self.defaultParams)
+           if not sts: return ''
+           modelname = self.cm.meta['url'].split('=')[-1]
+           id = ''
+           host = ''
+           data = data.replace('\\','')
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="live clearfix')
+           if len(data): del data[0]
+           for item in data:
+              id = self.cm.ph.getSearchGroups(item, '''data-model-id=['"]([^"^']+?)['"]''')[0] 
+              host = self.cm.ph.getSearchGroups(item, '''data-video-host=['"]([^"^']+?)['"]''')[0] 
+              if modelname == self.cm.ph.getSearchGroups(item, '''data-model-seo-name=['"]([^"^']+?)['"]''', 1, True)[0]: 
+                 if 'multi-user-private' in item: 
+                    SetIPTVPlayerLastHostError(_(' Private Show.'))
+                    return []
+                 break
+           videoUrl = 'https://manifest.vscdns.com/manifest.m3u8?key=nil&provider=highwinds&host='+host+'&model_id='+id+'&secure=true&prefix=amlst&youbora-debug=1'
+           PHPSESSID = self.cm.getCookieItem(COOKIEFILE, 'PHPSESSID')
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': self.cm.meta['url'], 'Cookie':'PHPSESSID=%s' % PHPSESSID, 'User-Agent': UA, 'iptv_livestream':True, 'Origin':'https://www.naked.com'})
+           tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+           for item in tmp:
+              return item['url']
+           return ''
+
+        if parser == 'https://www.pornrewind.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:\s*['"]([^"^']+?)['"]''')[0] 
+           return videoUrl
+
+        if parser == 'https://spankbang.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoid = self.cm.ph.getSearchGroups(data, '''data-videoid=['"]([^"^']+?)['"]''')[0]
+           streamkey = self.cm.ph.getSearchGroups(data, '''data-streamkey=['"]([^"^']+?)['"]''')[0]
+           sb_csrf_session = self.cm.getCookieItem(COOKIEFILE,'sb_csrf_session')
+           api = 'https://spankbang.com/api/videos/stream'
+           postdata = {'id' : streamkey, 'data': 0, 'sb_csrf_session': sb_csrf_session} 
+           self.defaultParams['header']['X-Requested-With'] = 'XMLHttpRequest'
+           self.defaultParams['header']['X-CSRFToken'] = sb_csrf_session
+           sts, data = self.getPage(api, 'spankbang.cookie', 'spankbang.com', self.defaultParams, postdata)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           try:
+              if data.startswith('{'): data = '['+data+']'
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 try:
+                    if str(item["stream_url_1080p"]) : return self.cm.getFullUrl(str(item["stream_url_1080p"][0]))
+                    if str(item["stream_url_720p"]) : return self.cm.getFullUrl(str(item["stream_url_720p"][0]))
+                    if str(item["stream_url_480p"]) : return self.cm.getFullUrl(str(item["stream_url_480p"][0]))
+                    if str(item["stream_url_320p"]) : return self.cm.getFullUrl(str(item["stream_url_320p"][0]))
+                    if str(item["stream_url_240p"]) : return self.cm.getFullUrl(str(item["stream_url_240p"][0]))
+                 except Exception as e:
+                    printExc()
+                 try:
+                    if str(item["1080p"]) != '[]': return self.cm.getFullUrl(str(item["1080p"][0]))
+                    if str(item["720p"])  != '[]': return self.cm.getFullUrl(str(item["720p"][0]))
+                    if str(item["480p"])  != '[]': return self.cm.getFullUrl(str(item["480p"][0]))
+                    if str(item["320p"])  != '[]': return self.cm.getFullUrl(str(item["320p"][0]))
+                    if str(item["240p"])  != '[]': return self.cm.getFullUrl(str(item["240p"][0]))
+                 except Exception as e:
+                    printExc()
+           except Exception as e:
+              printExc()
+           return ''
+
+        if parser == 'https://upstream.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upstream.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'upstream.cookie', 'upstream.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = ph.search(data, '''file:['"]([^'^"]+?)['"]''')[0]
+           return videoUrl
+
+        if parser == 'https://prostream.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'prostream.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'prostream.cookie', 'prostream.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 packed = packed[-1]
+              else:
+                 return ''
+              try:
+                 videoPage = unpackJSPlayerParams(packed, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+              except Exception: pass 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              videoUrl = ph.search(videoPage, '''file:['"]([^'^"]+?)['"]''')[0]
+              if not videoUrl: videoUrl = ph.search(videoPage, '''sources:\[['"]([^'^"]+?)['"]''')[0]
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl 
+           return ''
+
+        if parser == 'https://www.cumlouder.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://pornone.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornone.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornone.cookie', 'pornone.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'This video has been deleted' in data:
+              SetIPTVPlayerLastHostError(_(' This video has been deleted.'))
+              return []
+           for video in re.findall(r'flashvars\.videoUrl([^=]+?)\s*=\s*"(https?://[^"]+)"', data):
+              videoUrl = urllib2.unquote(video[1].replace('https://','http://'))
+              printDBG( 'Host videoUrl '+videoUrl )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+  
+        if parser == 'http://sexu.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''downloadUrl":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'http://sexu.com/'})
+           videoUrl = re.findall('"file":"(.*?\.mp4)"', data, re.S)
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl[-1], {'Referer': 'http://sexu.com/'}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"src":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'http://sexu.com/'}) 
+ 
+        if parser == 'http://www.amateurporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if license_code and videoUrl:
+              if 'function/0/' in videoUrl:
+                 videoUrl = decryptHash(videoUrl, license_code, '16')
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return self.getResolvedURL(self.FullUrl(videoUrl))
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?mp4)['"]''')[0] 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s*?['"]([^"^']+?mp4)['"]''')[0] 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           return ''
+
+        if parser == 'http://www.hdporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           match = re.findall('source src="(.*?)"', data, re.S)
+           if match: return match[0]
+           else: return ''
+
+        if parser == 'http://pornicom.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host data:%s' % data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars', '}', False)[1]
+           if data2: 
+              printDBG( 'Host data2:%s' % data2 )
+              return self.cm.ph.getSearchGroups(data2, '''video_url:\s*?['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           videoPage = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage: 
+              printDBG( 'Host data file:%s' % videoPage )
+              return videoPage
+           return ''
+
+        if parser == 'http://www.porn00.org':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if 'login' in videoUrl or ''==videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://porngo.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porngo.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porngo.cookie', 'porngo.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0])
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           return ''
+
+        if parser == 'http://porndoe.com':
+           host = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndoe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = self.FullUrl(self.cm.ph.getSearchGroups(data, '''embedURL"\s*href=['"]([^"^']+?)['"]''')[0])
+           id = self.cm.ph.getSearchGroups(data, '''"id":\s*['"]([^"^']+?)['"]''')[0]
+           videoUrl= 'https://porndoe.com/service/index?device=desktop&page=video&id='+id
+           sts, data = self.get_Page(videoUrl, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           try:
+              data = self.cm.ph.getDataBeetwenMarkers(data, '"sources":', '}},', False)[1]
+              if data.startswith('{'): data = '['+data+'}]'
+              printDBG( 'Host listsItems data3: '+data )
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 try:
+                    if str(item["720"]["url"]) : return strwithmeta(str(item["720"]["url"]), {'Referer': url}) 
+                    if str(item["480"]["url"]) : return strwithmeta(str(item["480"]["url"]), {'Referer': url})
+                    if str(item["240"]["url"]) : return strwithmeta(str(item["240"]["url"]), {'Referer': url})
+                 except Exception as e:
+                    printExc()
+           except Exception as e:
+              printExc()
+           sts, data = self.get_Page(videoPage, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data4: '+data )
+           try:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<source', '>')
+              for item in data:
+                 printDBG( 'Host item: '+str(item) )
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if videoUrl: return strwithmeta(videoUrl, {'Referer': url})
+           except Exception as e:
+              printExc()
+           return ''
+
+        if parser == 'https://hdsite.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdsite.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://p720.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'p720.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'hdsite.net/embed/' in data:
+              videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0])
+              return self.getResolvedURL(videoUrl)
+           if not 'mp4' in data: SetIPTVPlayerLastHostError('LOGIN REQUIRED')
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://www.extremetube.com':
+            COOKIEFILE = os_path.join(GetCookieDir(), 'extremetube.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return ''
+            printDBG( 'Host listsItems data: '+data )
+            videoPage = re.findall('"quality_\d+p":"(.*?)"', data, re.S) 
+            if videoPage:
+                url = videoPage[-1].replace('\/','/') 
+                return self.FullUrl(url)
+            return '' 
+
+        if parser == 'http://xhamster.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''1080p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''720p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''480p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''240p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''144p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           return ''
+
+        if parser == 'https://anyporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<source', '>')
+           for item in data:
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return strwithmeta(videoUrl, {'Referer': url})
+
+        if parser == 'https://anon-v.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return ''
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://www.sleazyneasy.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': self.cm.meta['url']})
+
+        if parser == 'https://javhoho.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'javhoho.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'javhoho.cookie', 'javhoho.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://upstream.to[^"^']+?)['"]''')[0]
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://www.fembed.com[^"^']+?)['"]''')[0]
+           return self.getResolvedURL(videoUrl)
+
+        if parser == 'https://forcedcelebs.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'forcedcelebs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+           return self.getResolvedURL(videoPage)
+
+        if parser == 'https://www.yourupload.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourupload.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\s*:\s*['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           videoUrl = urlparse.urljoin(url, videoUrl) 
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.get_Page(videoUrl, self.defaultParams)
+           if not sts: return ''
+           return strwithmeta(self.cm.meta['url'], {'User-Agent': self.HTTP_HEADER['User-Agent'], 'Referer': url})  #
+
+        if parser == 'https://www.volimeee.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'volimeee.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'volimeee.cookie', 'volimeee.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0])
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           return ''
+
+        if parser == 'https://familyporn.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'familyporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if videoUrl=='': videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://bitporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bitporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent'], 'iptv_livestream':True, 'Origin':'https://bitporno.com'})
+           tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+           for item in tmp:
+              return item['url']
+           return ''
+##########################################################################################################################
+        query_data = {'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True}
+        try:
+           data = self.cm.getURLRequestData(query_data)
+           printDBG( 'Host getResolvedURL data: '+data )
+        except:
+           printDBG( 'Host getResolvedURL query error' )
+           return videoUrl
+
+        if parser == 'file: ':
+           return self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0] 
+
+        if parser == "0p'  : '":
+           videoPage = re.findall("0p'  : '(http.*?)'", data, re.S)   
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == 'source src="':
+           videoPage = re.findall('source src="(http.*?)"', data, re.S)   
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == "video_url: '":
+           videoPage = re.findall("video_url: '(.*?).'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'videoFile="':
+           videoPage = re.findall('videoFile="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://www.ah-me.com':
+           videoUrl = ph.search(data, '''<video\ssrc=['"]([^'^"]+?)['"]''')[0]
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.nuvid.com':
+           videoUrl = re.search("http://www.nuvid.com/video/(.*?)/.+", url, re.S)
+           if videoUrl:
+              xml = 'http://m.nuvid.com/video/%s' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.findall('source src="(.*?)"', data, re.S)   
+              if videoPage:
+                 return videoPage[0]
+           return ''
+
+        if parser == 'http://www.wankoz.com':
+           videoPage = re.findall("'video_html5_url']='(.*?).'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'https://alpha.tnaflix.com':
+           videoPage = re.findall('"embedUrl" content="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return 'http:'+videoPage[0]
+           return ''
+
+        if parser == 'http://www.faphub.xxx':
+           videoPage = re.findall("url: '(.*?)'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+   
+        if parser == 'http://www.proporn.com':
+           videoPage = re.findall('source src="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+   
+        if parser == 'http://www.xnxx.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoUrlHigh\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoUrlLow\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoHLS\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = re.search('flv_url=(.*?)&', data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           return ''
+
+        if parser == 'http://www.xvideos.com':
+           videoUrl = re.search("setVideoUrlHigh\('(.*?)'", data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           videoUrl = re.search('flv_url=(.*?)&', data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           return ''
+
+        if parser == 'http://embed.redtube.com':
+           videoPage = re.findall('sources:.*?":"(.*?)"', data, re.S)
+           if videoPage:
+              link = videoPage[-1].replace(r"\/",r"/")
+              if link.startswith('//'): link = 'http:' + link 
+              return link
+           return ''
+
+        if parser == 'http://www.eporner.com':
+           videoID = re.search("http://www.eporner.com/hd-porn/(.*?)/.+", url)
+           if not videoID: return ''
+           parse = re.findall("hash: '(.*?)'", data, re.S)
+           hash =  urllib.unquote_plus(parse[0]).decode("utf-8")
+           x = calc_hash(hash)
+           printDBG( 'Host getResolvedURL hash: '+parse[0]+' calc_hash:'+x)
+           xml = 'http://www.eporner.com/xhr/video/%s?device=generic&domain=www.eporner.com&hash=%s&fallback=false' % (videoID.group(1), x)
+           try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+           except: 
+                   printDBG( 'Host getResolvedURL query error xml' )
+                   return ''
+           #printDBG( 'Host data json: '+data )
+           videoPage = re.findall('src": "(.*?)"', data, re.S)
+           if videoPage: return videoPage[0]
+           return ''
+
+        if parser == 'http://www.pornhub.com/embed/':
+           match = re.findall("container.*?src.*?'(.*?)'", data, re.S)
+           if match: return match[0]
+           return ''
+        
+        if parser == 'http://m.tube8.com':
+           match = re.compile('<div class="play_video.+?<a href="(.+?)"', re.DOTALL).findall(data)
+           return match[0]
+
+        if parser == 'http://m.pornhub.com':
+           match = re.compile('<div class="play_video.+?<a href="(.+?)"', re.DOTALL).findall(data)
+           return match[0]
+
+        if parser == 'http://www.dachix.com':
+           videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              return urllib2.unquote(videoPage) 
+           return ''
+
+        if parser == 'http://www.drtuber.com':
+           params = re.findall('params\s\+=\s\'h=(.*?)\'.*?params\s\+=\s\'%26t=(.*?)\'.*?params\s\+=\s\'%26vkey=\'\s\+\s\'(.*?)\'', data, re.S)
+           if params:
+              for (param1, param2, param3) in params:
+                 hash = hashlib.md5(param3 + base64.b64decode('UFQ2bDEzdW1xVjhLODI3')).hexdigest()
+                 url = '%s/player_config/?h=%s&t=%s&vkey=%s&pkey=%s&aid=' % ("http://www.drtuber.com", param1, param2, param3, hash)
+                 query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+                 try:
+                    data = self.cm.getURLRequestData(query_data)
+                 except:
+                    printDBG( 'Host listsItems query error' )
+                    printDBG( 'Host listsItems query error url: '+url )
+                 #printDBG( 'Host listsItems data: '+data )
+                 url = re.findall('video_file>.*?(http.*?)\]\]><\/video_file>', data, re.S)
+                 if url:
+                    url = str(url[0])
+                    url = url.replace("&amp;","&")
+                    printDBG( 'Host listsItems url: '+url )
+                    return url
+           return ''
+
+        if parser == 'http://www.el-ladies.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&') 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoPage = re.findall(',file:\'(.*?)\'', data, re.S)  
+           if videoPage:
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://sexylies.com':
+           videoPage = re.search('source\stype="video/mp4"\ssrc="(.*?)"', data, re.S) 
+           if videoPage:
+              return videoPage.group(1)
+           return ''
+
+        if parser == 'http://www.eskimotube.com':
+           videoPage = re.search('color=black.*?href=(.*?)>', data, re.S) 
+           if videoPage:
+              return videoPage.group(1)
+           return ''
+
+        if parser == 'http://www.porn5.com':
+           videoPage = re.findall('p",url:"(.*?)"', data, re.S) 
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == 'http://www.pornyeah.com':
+           videoPage = re.findall('settings=(.*?)"', data, re.S)
+           if not videoPage: return ''
+           xml = videoPage[0]
+           printDBG( 'Host getResolvedURL xml: '+xml )
+           try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+           except: 
+                   printDBG( 'Host getResolvedURL query error xml' )
+                   return videoUrl
+           videoPage = re.findall('defaultVideo:(.*?);', data, re.S)
+           if videoPage: return videoPage[0]
+           return ''
+
+        if parser == 'http://rusporn.tv':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.pornpillow.com':
+           videoPage = re.findall("'file': '(.*?)'", data, re.S)   
+           if videoPage:
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://www.thumbzilla.com':
+           match = re.findall('data-quality="(.*?)"', data)
+           if match:
+              fetchurl = urllib2.unquote(match[-1])
+              fetchurl = fetchurl.replace(r"\/",r"/")
+              if fetchurl.startswith('//'): fetchurl = 'http:' + fetchurl
+              return fetchurl 
+           return ''
+
+        if parser == 'https://vidlox.tv':
+           parse = re.search('sources.*?"(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://xxxkingtube.com':
+           parse = re.search("File = '(http.*?)'", data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://pornsharing.com':
+           parse = re.search('btoa\("(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://pornxs.com':
+           parse = re.search('config-final-url="(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.flyflv.com':
+           parse = re.search('fileUrl="(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.yeptube.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://www.yeptube.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://vivatube.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://vivatube.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.tubeon.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://www.tubeon.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.yuvutu.com':
+           match = re.findall('iframe src="(.*?)"', data, re.S)
+           if match: 
+              url = 'http://www.yuvutu.com'+match[0]
+              query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+              try:
+                 data = self.cm.getURLRequestData(query_data)
+              except:
+                 printDBG( 'Host listsItems query error url: '+url )
+              #printDBG( 'Host listsItems data: '+data )
+              url = re.findall('file: "(.*?)"', data, re.S)
+              if url: 
+                 videoUrl = url[-1]
+                 return videoUrl
+           return ''
+
+        if parser == 'https://www.realgfporn.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+
+        if parser == 'http://www.homemoviestube.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''value="settings=([^"^']+?)['"]''')[0]
+           if videoUrl:
+              query_data = { 'url': videoUrl, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+              try:
+                 data = self.cm.getURLRequestData(query_data)
+              except:
+                 printDBG( 'Host listsItems query error url: '+url )
+              #printDBG( 'Host listsItems data: '+data )
+              return self.cm.ph.getSearchGroups(data, '''flvMask:([^"^']+?);''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'https://porndig.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           if '.m3u8' in videoUrl:
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url']
+           if 'sources": ' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'sources": ', ']', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    try:
+                       if str(item["label"])=='720p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='480p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='360p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='240p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+              except Exception as e:
+                 printExc()
+           return videoUrl
+
+        if parser == 'http://hentaigasm.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'https://www.katestube.com':
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars', '}', False)[1]
+           if data2: return self.cm.ph.getSearchGroups(data2, '''['"](https://www.katestube.com/get_file[^"^']+?)['"]''')[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'sources:', ']', False)[1]
+           if data2: return self.cm.ph.getSearchGroups(data, '''src:\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://www.katestube.com/get_file[^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return urllib2.unquote(videoUrl)
+           return ''
+
+        if parser == 'https://www.pornoxo.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"file":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''filefallback\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+
+        if parser == 'http://sexkino.to':
+           videoUrl = re.findall('<iframe.*?src="(.*?)"', data, re.S)
+           if videoUrl:
+              return self.getResolvedURL(videoUrl[-1])
+
+        if parser == 'https://momxxxfun.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'https://momxxxfun.com'}) 
+
+        videoUrls = []
+        urlSupport = self.up.checkHostSupport( url )
+        if 1 == urlSupport:
+            retTab = self.up.getVideoLinkExt( url )
+            videoUrls.extend(retTab)
+            printDBG("Video url[%s]" % videoUrls)
+            if videoUrls:
+                for item in videoUrls:
+                    if item['url']: return item['url']
+
+        printDBG( 'Host getResolvedURL end' )
+        return videoUrl
+
+
+
+
+
+############################################
+# functions for host
+############################################
+def decodeUrl(text):
+	text = text.replace('%20',' ')
+	text = text.replace('%21','!')
+	text = text.replace('%22','"')
+	text = text.replace('%23','&')
+	text = text.replace('%24','$')
+	text = text.replace('%25','%')
+	text = text.replace('%26','&')
+	text = text.replace('%2B','+')
+	text = text.replace('%2F','/')
+	text = text.replace('%3A',':')
+	text = text.replace('%3B',';')
+	text = text.replace('%3D','=')
+	text = text.replace('&#x3D;','=')
+	text = text.replace('%3F','?')
+	text = text.replace('%40','@')
+	return text
+
+def decodeHtml(text):
+	text = text.replace('&auml;','ä')
+	text = text.replace('\u00e4','ä')
+	text = text.replace('&#228;','ä')
+	text = text.replace('&oacute;','ó')
+	text = text.replace('&eacute;','e')
+	text = text.replace('&aacute;','a')
+	text = text.replace('&ntilde;','n')
+
+	text = text.replace('&Auml;','Ä')
+	text = text.replace('\u00c4','Ä')
+	text = text.replace('&#196;','Ä')
+	
+	text = text.replace('&ouml;','ö')
+	text = text.replace('\u00f6','ö')
+	text = text.replace('&#246;','ö')
+	
+	text = text.replace('&ouml;','Ö')
+	text = text.replace('\u00d6','Ö')
+	text = text.replace('&#214;','Ö')
+	
+	text = text.replace('&uuml;','ü')
+	text = text.replace('\u00fc','ü')
+	text = text.replace('&#252;','ü')
+	
+	text = text.replace('&Uuml;','Ü')
+	text = text.replace('\u00dc','Ü')
+	text = text.replace('&#220;','Ü')
+	
+	text = text.replace('&szlig;','ß')
+	text = text.replace('\u00df','ß')
+	text = text.replace('&#223;','ß')
+	
+	text = text.replace('&amp;','&')
+	text = text.replace('&quot;','\"')
+	text = text.replace('&quot_','\"')
+
+	text = text.replace('&gt;','>')
+	text = text.replace('&apos;',"'")
+	text = text.replace('&acute;','\'')
+	text = text.replace('&ndash;','-')
+	text = text.replace('&bdquo;','"')
+	text = text.replace('&rdquo;','"')
+	text = text.replace('&ldquo;','"')
+	text = text.replace('&lsquo;','\'')
+	text = text.replace('&rsquo;','\'')
+	text = text.replace('&#034;','\'')
+	text = text.replace('&#038;','&')
+	text = text.replace('&#039;','\'')
+	text = text.replace('&#39;','\'')
+	text = text.replace('&#160;',' ')
+	text = text.replace('\u00a0',' ')
+	text = text.replace('&#174;','')
+	text = text.replace('&#225;','a')
+	text = text.replace('&#233;','e')
+	text = text.replace('&#243;','o')
+	text = text.replace('&#8211;',"-")
+	text = text.replace('\u2013',"-")
+	text = text.replace('&#8216;',"'")
+	text = text.replace('&#8217;',"'")
+	text = text.replace('#8217;',"'")
+	text = text.replace('&#8220;',"'")
+	text = text.replace('&#8221;','"')
+	text = text.replace('&#8222;',',')
+	text = text.replace('&#x27;',"'")
+	text = text.replace('&#8230;','...')
+	text = text.replace('\u2026','...')
+	text = text.replace('&#41;',')')
+	text = text.replace('&lowbar;','_')
+	text = text.replace('&rsquo;','\'')
+	text = text.replace('&lpar;','(')
+	text = text.replace('&rpar;',')')
+	text = text.replace('&comma;',',')
+	text = text.replace('&period;','.')
+	text = text.replace('&plus;','+')
+	text = text.replace('&num;','#')
+	text = text.replace('&excl;','!')
+	text = text.replace('&#039','\'')
+	text = text.replace('&semi;','')
+	text = text.replace('&lbrack;','[')
+	text = text.replace('&rsqb;',']')
+	text = text.replace('&nbsp;','')
+	text = text.replace('&#133;','')
+	text = text.replace('&#4','')
+	text = text.replace('&#40;','')
+
+	text = text.replace('&atilde;',"'")
+	text = text.replace('&colon;',':')
+	text = text.replace('&sol;','/')
+	text = text.replace('&percnt;','%')
+	text = text.replace('&commmat;',' ')
+	text = text.replace('&#58;',':')
+
+	return text	
+
+############################################
+# functions for pornhub
+############################################
+def decrypt(ciphertext, password, nBits):
+    printDBG( 'decrypt begin ' )
+    blockSize = 16
+    if not nBits in (128, 192, 256): return ""
+    ciphertext = base64.b64decode(ciphertext)
+#    password = password.encode("utf-8")
+
+    nBytes = nBits//8
+    pwBytes = [0] * nBytes
+    for i in range(nBytes): pwBytes[i] = 0 if i>=len(password) else ord(password[i])
+    key = Cipher(pwBytes, KeyExpansion(pwBytes))
+    key += key[:nBytes-16]
+
+    counterBlock = [0] * blockSize
+    ctrTxt = ciphertext[:8]
+    for i in range(8): counterBlock[i] = ord(ctrTxt[i])
+
+    keySchedule = KeyExpansion(key)
+
+    nBlocks = int( math.ceil( float(len(ciphertext)-8) / float(blockSize) ) )
+    ct = [0] * nBlocks
+    for b in range(nBlocks):
+        ct[b] = ciphertext[8+b*blockSize : 8+b*blockSize+blockSize]
+    ciphertext = ct
+
+    plaintxt = [0] * len(ciphertext)
+
+    for b in range(nBlocks):
+        for c in range(4): counterBlock[15-c] = urs(b, c*8) & 0xff
+        for c in range(4): counterBlock[15-c-4] = urs( int( float(b+1)/0x100000000-1 ), c*8) & 0xff
+
+        cipherCntr = Cipher(counterBlock, keySchedule)
+
+        plaintxtByte = [0] * len(ciphertext[b])
+        for i in range(len(ciphertext[b])):
+            plaintxtByte[i] = cipherCntr[i] ^ ord(ciphertext[b][i])
+            plaintxtByte[i] = chr(plaintxtByte[i])
+        plaintxt[b] = "".join(plaintxtByte)
+
+    plaintext = "".join(plaintxt)
+ #   plaintext = plaintext.decode("utf-8")
+    return plaintext
+
+Sbox = [
+    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
+    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
+    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
+    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
+    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
+    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
+    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
+    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
+    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
+    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
+    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
+    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
+    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
+    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
+    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
+    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
+]
+
+Rcon = [
+    [0x00, 0x00, 0x00, 0x00],
+    [0x01, 0x00, 0x00, 0x00],
+    [0x02, 0x00, 0x00, 0x00],
+    [0x04, 0x00, 0x00, 0x00],
+    [0x08, 0x00, 0x00, 0x00],
+    [0x10, 0x00, 0x00, 0x00],
+    [0x20, 0x00, 0x00, 0x00],
+    [0x40, 0x00, 0x00, 0x00],
+    [0x80, 0x00, 0x00, 0x00],
+    [0x1b, 0x00, 0x00, 0x00],
+    [0x36, 0x00, 0x00, 0x00]
+]
+
+def Cipher(input, w):
+    printDBG( 'cipher begin ' )
+    Nb = 4
+    Nr = len(w)/Nb - 1
+
+    state = [ [0] * Nb, [0] * Nb, [0] * Nb, [0] * Nb ]
+    for i in range(0, 4*Nb): state[i%4][i//4] = input[i]
+
+    state = AddRoundKey(state, w, 0, Nb)
+
+    for round in range(1, Nr):
+        state = SubBytes(state, Nb)
+        state = ShiftRows(state, Nb)
+        state = MixColumns(state, Nb)
+        state = AddRoundKey(state, w, round, Nb)
+
+    state = SubBytes(state, Nb)
+    state = ShiftRows(state, Nb)
+    state = AddRoundKey(state, w, Nr, Nb)
+
+    output = [0] * 4*Nb
+    for i in range(4*Nb): output[i] = state[i%4][i//4]
+    return output
+
+def SubBytes(s, Nb):
+    printDBG( 'subbytes begin ' )
+    for r in range(4):
+        for c in range(Nb):
+            s[r][c] = Sbox[s[r][c]]
+    return s
+
+def ShiftRows(s, Nb):
+    printDBG( 'shiftrows begin ' )
+    t = [0] * 4
+    for r in range (1,4):
+        for c in range(4): t[c] = s[r][(c+r)%Nb]
+        for c in range(4): s[r][c] = t[c]
+    return s
+
+def MixColumns(s, Nb):
+    printDBG( 'mixcolumns begin ' )
+    for c in range(4):
+        a = [0] * 4
+        b = [0] * 4
+        for i in range(4):
+            a[i] = s[i][c]
+            b[i] = s[i][c]<<1 ^ 0x011b if s[i][c]&0x80 else s[i][c]<<1
+        s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]
+        s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]
+        s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]
+        s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]
+    return s
+
+def AddRoundKey(state, w, rnd, Nb):
+    printDBG( 'addroundkey begin ' )
+    for r in range(4):
+        for c in range(Nb):
+            state[r][c] ^= w[rnd*4+c][r]
+    return state
+
+def KeyExpansion(key):
+    printDBG( 'keyexpansion begin ' )
+    Nb = 4
+    Nk = len(key)/4
+    Nr = Nk + 6
+
+    w = [0] * Nb*(Nr+1)
+    temp = [0] * 4
+
+    for i in range(Nk):
+        r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]]
+        w[i] = r
+
+    for i in range(Nk, Nb*(Nr+1)):
+        w[i] = [0] * 4
+        for t in range(4): temp[t] = w[i-1][t]
+        if i%Nk == 0:
+            temp = SubWord(RotWord(temp))
+            for t in range(4): temp[t] ^= Rcon[i/Nk][t]
+        elif Nk>6 and i%Nk == 4:
+            temp = SubWord(temp)
+        for t in range(4): w[i][t] = w[i-Nk][t] ^ temp[t]
+    return w
+
+def SubWord(w):
+    printDBG( 'subword begin ' )
+    for i in range(4): w[i] = Sbox[w[i]]
+    return w
+
+def RotWord(w):
+    printDBG( 'rotword begin ' )
+    tmp = w[0]
+    for i in range(3): w[i] = w[i+1]
+    w[3] = tmp
+    return w
+
+def encrypt(plaintext, password, nBits):
+    printDBG( 'encrypt begin ' )
+    blockSize = 16
+    if not nBits in (128, 192, 256): return ""
+#    plaintext = plaintext.encode("utf-8")
+#    password  = password.encode("utf-8")
+    nBytes = nBits//8
+    pwBytes = [0] * nBytes
+    for i in range(nBytes): pwBytes[i] = 0 if i>=len(password) else ord(password[i])
+    key = Cipher(pwBytes, KeyExpansion(pwBytes))
+    key += key[:nBytes-16]
+
+    counterBlock = [0] * blockSize
+    now = datetime.datetime.now()
+    nonce = time.mktime( now.timetuple() )*1000 + now.microsecond//1000
+    nonceSec = int(nonce // 1000)
+    nonceMs  = int(nonce % 1000)
+
+    for i in range(4): counterBlock[i] = urs(nonceSec, i*8) & 0xff
+    for i in range(4): counterBlock[i+4] = nonceMs & 0xff
+
+    ctrTxt = ""
+    for i in range(8): ctrTxt += chr(counterBlock[i])
+
+    keySchedule = KeyExpansion(key)
+
+    blockCount = int(math.ceil(float(len(plaintext))/float(blockSize)))
+    ciphertxt = [0] * blockCount
+
+    for b in range(blockCount):
+        for c in range(4): counterBlock[15-c] = urs(b, c*8) & 0xff
+        for c in range(4): counterBlock[15-c-4] = urs(b/0x100000000, c*8)
+
+        cipherCntr = Cipher(counterBlock, keySchedule)
+
+        blockLength = blockSize if b<blockCount-1 else (len(plaintext)-1)%blockSize+1
+        cipherChar = [0] * blockLength
+
+        for i in range(blockLength):
+            cipherChar[i] = cipherCntr[i] ^ ord(plaintext[b*blockSize+i])
+            cipherChar[i] = chr( cipherChar[i] )
+        ciphertxt[b] = ''.join(cipherChar)
+
+    ciphertext = ctrTxt + ''.join(ciphertxt)
+    ciphertext = base64.b64encode(ciphertext)
+
+    return ciphertext
+
+def urs(a, b):
+    printDBG( 'urs begin ' )
+    a &= 0xffffffff
+    b &= 0x1f
+    if a&0x80000000 and b>0:
+        a = (a>>1) & 0x7fffffff
+        a = a >> (b-1)
+    else:
+        a = (a >> b)
+    return a
+
+############################################
+# functions for beeg.com
+############################################
+def decrypt_key(key, a):
+    printDBG( 'beeg_salt= '+a)
+    e = urllib.unquote_plus(key).decode("utf-8")
+    o = ''.join([
+        chr(ord(e[n]) - ord(a[n % len(a)]) % 21)
+        for n in range(len(e))])
+    return ''.join(split(o, 3)[::-1])
+	
+def split(o, e):
+    def cut(s, x):
+        n.append(s[:x])
+        return s[x:]
+    n = []
+    r = len(o) % e
+    if r > 0:
+        o = cut(o, r)
+    while len(o) > e:
+        o = cut(o, e)
+    n.append(o)
+    return n
+############################################
+# functions for eporner
+############################################
+def calc_hash(s):
+    return ''.join((encode_base_n(int(s[lb:lb + 8], 16), 36) for lb in range(0, 32, 8)))
+
+def encode_base_n(num, n, table=None):
+    FULL_TABLE = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
+    if not table:
+        table = FULL_TABLE[:n]
+
+    if n > len(table):
+        raise ValueError('base %d exceeds table length %d' % (n, len(table)))
+
+    if num == 0:
+        return table[0]
+
+    ret = ''
+    while num:
+        ret = table[num % n] + ret
+        num = num // n
+    return ret
+############################################
+# functions for myfreecam
+############################################
+vs_str={}
+vs_str[0]="PUBLIC"
+vs_str[2]="AWAY"
+vs_str[12]="PVT"
+vs_str[13]="GROUP"
+vs_str[90]="CAM OFF"
+vs_str[127]="OFFLINE"
+vs_str[128]="TRUEPVT"
+
+def fc_decode_json(m):
+	try:
+		m = m.replace('\r', '\\r').replace('\n', '\\n')
+		return simplejson.loads(m[m.find("{"):].decode("utf-8","ignore"))
+	except:
+		return simplejson.loads("{\"lv\":0}")
+
+def read_model_data(m):
+	global CAMGIRLSERVER
+	global CAMGIRLCHANID
+	global CAMGIRLUID
+	printDBG("INFO  - "+str(m))
+	usr = ''
+	msg = fc_decode_json(m)
+	try:
+		sid=msg['sid']
+		level  = msg['lv']
+	except:
+		printDBG ("errr reply ... We're fucked ..")
+		return
+
+	vs     = msg['vs']
+	usr    = msg['nm']
+
+	if vs == 2:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 12:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 13:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 90:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 127:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 128:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+
+	CAMGIRLUID    = msg['uid']
+	CAMGIRLCHANID = msg['uid'] + 100000000
+	camgirlinfo=msg['m']
+	flags  = camgirlinfo['flags']
+	u_info=msg['u']
+
+	try:
+		CAMGIRLSERVER = u_info['camserv']
+		printDBG ("Video Server : %d Channel Id : %d  Model id : %d " %(CAMGIRLSERVER, CAMGIRLCHANID, CAMGIRLUID))
+		SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#		with open('/tmp/title', 'w') as titleFile:  
+#			titleFile.write(str(CAMGIRLSERVER))
+#		if CAMGIRLSERVER >= 3000:
+#			SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#			CAMGIRLSERVER = 0
+#			return []
+#			CAMGIRLSERVER = CAMGIRLSERVER - 1000
+#		elif CAMGIRLSERVER >= 1500:
+#			SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#			CAMGIRLSERVER = 0
+#			return []
+#			CAMGIRLSERVER = CAMGIRLSERVER - 800
+#		elif CAMGIRLSERVER >= 800:
+#			CAMGIRLSERVER = CAMGIRLSERVER - 500
+		if vs != 0:
+			CAMGIRLSERVER = 0
+	except KeyError:
+		CAMGIRLSERVER=0
+
+	truepvt = ((flags & 8) == 8)
+
+	buf=usr+" =>"
+	try:
+		if truepvt == 1:
+			buf+=" (TRUEPVT)"
+		else:
+			buf+=" ("+vs_str[vs]+")"
+	except KeyError:
+		pass
+	printDBG ("%s  Video Server : %d Channel Id : %d  Model id : %d " %(buf, CAMGIRLSERVER, CAMGIRLCHANID, CAMGIRLUID))
+
+def myfreecam_start(url, xchat):
+	global CAMGIRL
+	global CAMGIRLSERVER
+	global CAMGIRLUID
+	global CAMGIRLCHANID
+	CAMGIRL= url
+	CAMGIRLSERVER = 0
+	libsPath = GetPluginDir('libs/')
+	import sys
+	sys.path.insert(1, libsPath)
+	import websocket
+	printDBG("Connecting to Chat Server:")
+	try:
+		host = "ws://"+xchat+".myfreecams.com:8080/fcsl"
+		printDBG("Chat Server..."+host)
+		ws = websocket.create_connection(host)
+		ws.send("hello fcserver\n\0")
+		ws.send("1 0 0 20071025 0 guest:guest\n\0")
+	except:
+		printDBG ("We're fucked ...")
+		return ''
+	rembuf=""
+	quitting = 0
+	try:
+		while quitting == 0:
+			sock_buf =  ws.recv()
+			sock_buf=rembuf+sock_buf
+			rembuf=""
+			while True:
+				hdr=re.search (r"(\w+) (\w+) (\w+) (\w+) (\w+)", sock_buf)
+				if bool(hdr) == 0:
+					break
+				fc = hdr.group(1)
+				mlen   = int(fc[0:4])
+				fc_type = int(fc[4:])
+				msg=sock_buf[4:4+mlen]
+				if len(msg) < mlen:
+					rembuf=''.join(sock_buf)
+					break
+				msg=urllib.unquote(msg)
+				if fc_type == 1:
+					ws.send("10 0 0 20 0 %s\n\0" % CAMGIRL)
+				elif fc_type == 10:
+					read_model_data(msg)
+					quitting=1
+				sock_buf=sock_buf[4+mlen:]
+				if len(sock_buf) == 0:
+					break
+	except:
+		printDBG ("WebSocket Error")
+		return ''
+	ws.close()
+	if CAMGIRLSERVER != 0:
+		#Url="http://video"+str(CAMGIRLSERVER)+".myfreecams.com:1935/NxServer/ngrp:mfc_"+str(CAMGIRLCHANID)+".f4v_mobile/playlist.m3u8" #+'?nc='+str(int(time_time()*1000))  #+str(datetime.now()) #str(time_time()).encode('utf-8')
+		#Url="http://video"+str(CAMGIRLSERVER)+".myfreecams.com:1935/NxServer/mfc_"+str(CAMGIRLCHANID)+".f4v_aac/playlist.m3u8" #320x240
+		Url="https://video"+str(CAMGIRLSERVER)+".myfreecams.com/NxServer/ngrp:mfc_"+str(CAMGIRLCHANID)+".f4v_mobile/playlist.m3u8?nc=0.5863279394620062" #+str(random.random())
+		printDBG("Camgirl - "+CAMGIRL)
+		printDBG("Url  - "+Url)
+		return Url
+	else:
+		printDBG ("No video server ... _|_ ")
+		return ''
+
+# decrypt function/0/
+def decryptHash(videoUrl, licenseCode, hashRange):
+    result = ''
+    videoUrlPart = videoUrl.split('/')
+    hash = videoUrlPart[7][:2*int(hashRange)]
+    nonConvertHash = videoUrlPart[7][2*int(hashRange):]
+    seed = calcSeed(licenseCode, hashRange)
+    if (seed != '' and hash !=''):
+        for k in range(len(hash)-1, -1, -1):
+            l = k
+            for m in range(k,len(hash)):
+                l += int(seed[m])
+            l = l % len(hash)
+            n = ''
+            for o in range(0, len(hash)):
+                n = n + hash[l] if o == k else n + hash[k] if o == l else n + hash[o]
+            hash = n
+        videoUrlPart[7] = hash + nonConvertHash
+        videoUrlPart.pop(0)
+        videoUrlPart.pop(0)
+        result = '/'.join(videoUrlPart)
+    return result
+
+
+def calcSeed(licenseCode, hashRange):
+    f = licenseCode.replace('$', '').replace('0', '1')
+    j = int(len(f) / 2)
+    k = int(f[:len(f)-j])
+    l = int(f[j:])
+    g = abs(l - k)
+    fi = 4*g
+    i = int(int(hashRange) / 2 + 2)
+    m = ''
+    for g2 in range (0,j+1):
+        for h in range (1,5):
+            n =  int(licenseCode[g2 + h]) + int(str(fi)[g2])
+            if n>=i:
+                n -= i	
+            m = m + str(n)
+    return m
diff -ruN o/IPTVPlayer/hosts/hostyoutube.py pc/IPTVPlayer/hosts/hostyoutube.py
--- o/IPTVPlayer/hosts/hostyoutube.py	2021-05-10 11:28:24.975357239 +0300
+++ pc/IPTVPlayer/hosts/hostyoutube.py	2021-05-10 11:40:13.304282020 +0300
@@ -27,7 +27,7 @@
 ###################################################
 # Config options for HOST
 ###################################################
-config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/hdd/")
+config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default="/media/hdd/")
 
 
 def GetConfigList():
diff -ruN o/IPTVPlayer/hosts/list.txt pc/IPTVPlayer/hosts/list.txt
--- o/IPTVPlayer/hosts/list.txt	2021-05-10 11:28:24.975357239 +0300
+++ pc/IPTVPlayer/hosts/list.txt	2021-05-10 11:38:33.128795369 +0300
@@ -199,3 +199,4 @@
 hostyoutube
 hostzaluknijcc
 hostzdfmediathek
+hostXXX
diff -ruN o/IPTVPlayer/iptvdm/iptvdh.py pc/IPTVPlayer/iptvdm/iptvdh.py
--- o/IPTVPlayer/iptvdm/iptvdh.py	2021-05-10 11:28:24.977357044 +0300
+++ pc/IPTVPlayer/iptvdm/iptvdh.py	2021-05-10 11:38:33.128795369 +0300
@@ -104,7 +104,7 @@
 
     @staticmethod
     def GET_FFMPEG_PATH():
-        altFFMPEGPath = '/iptvplayer_rootfs/usr/bin/ffmpeg'
+        altFFMPEGPath = '/bin/ffmpeg'
         if IsExecutable(altFFMPEGPath):
             return altFFMPEGPath
         return "ffmpeg"
diff -ruN o/IPTVPlayer/iptvupdate/custom/xxx.sh pc/IPTVPlayer/iptvupdate/custom/xxx.sh
--- o/IPTVPlayer/iptvupdate/custom/xxx.sh	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/iptvupdate/custom/xxx.sh	2021-05-10 11:38:33.128795369 +0300
@@ -0,0 +1,40 @@
+#!/bin/sh
+cp $1/iptvupdate/custom/xxx.sh $2/iptvupdate/custom/xxx.sh
+status=$?
+if [ $status -ne 0 ]; then
+	echo "Błąd krytyczny. Plik $0 nie może zostać skopiowany, error[$status]."
+	exit 1
+fi
+cp $1/hosts/hostXXX.py $2/hosts/
+cp $1/icons/logos/XXXlogo.png $2/icons/logos/
+cp $1/icons/PlayerSelector/XXX*.png $2/icons/PlayerSelector/ 
+status=$?
+if [ $status -ne 0 ]; then
+	echo "Uwaga, Nie udało się skopiować XXX, error[$status]."
+else
+	echo "Kopiowanie XXX OK"
+fi
+if [ -x /usr/bin/fullwget ] ; then
+	/usr/bin/fullwget --no-check-certificate https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/master/archive.tar.gz -q -O /tmp/iptv-host-xxx.tar.gz
+else
+	wget --no-check-certificate https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/master/archive.tar.gz -q -O /tmp/iptv-host-xxx.tar.gz
+fi
+	if [ -s /tmp/iptv-host-xxx.tar.gz ] ; then
+		tar -xzf /tmp/iptv-host-xxx.tar.gz -C /tmp 
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/icons/PlayerSelector/* $2/icons/PlayerSelector/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/icons/logos/* $2/icons/logos/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/iptvupdate/custom/* $2/iptvupdate/custom/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/hosts/* $2/hosts/
+		rm -r -f /tmp/iptv-host-xxx*
+		if [ -e $2/icons/PlayerSelector/XXX100 ] ; then
+			mv $2/icons/PlayerSelector/XXX100 $2/icons/PlayerSelector/XXX100.png
+			mv $2/icons/PlayerSelector/XXX120 $2/icons/PlayerSelector/XXX120.png
+			mv $2/icons/PlayerSelector/XXX135 $2/icons/PlayerSelector/XXX135.png
+			echo "Rename file png OK"
+		fi
+		echo "Download XXX tar.gz OK"
+	else
+		echo "Uwaga, Nie udał się Download XXX tar.gz"
+	fi
+echo "Wykonywanie $0 zakończone sukcesem."
+exit 0
diff -ruN o/IPTVPlayer/iptvupdate/updatemainwindow.py pc/IPTVPlayer/iptvupdate/updatemainwindow.py
--- o/IPTVPlayer/iptvupdate/updatemainwindow.py	2021-05-10 11:28:24.978356947 +0300
+++ pc/IPTVPlayer/iptvupdate/updatemainwindow.py	2021-05-10 11:38:33.128795369 +0300
@@ -311,7 +311,7 @@
         if os_path.isfile(newVerFile):
             verPattern = self.VERSION_PATTERN
         else:
-            newVerFile = os_path.join(newVerPath, 'version.pyo')
+            newVerFile = os_path.join(newVerPath, 'version.pyc')
             verPattern = '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)'
 
         try:
diff -ruN o/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po pc/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po
--- o/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po	2020-12-14 13:33:36.457903761 +0300
+++ pc/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po	2021-05-10 11:38:33.131795587 +0300
@@ -4,13 +4,13 @@
 "Report-Msgid-Bugs-To: \n"
 "POT-Creation-Date: 2020-12-13 13:16+0100\n"
 "PO-Revision-Date: \n"
-"Last-Translator: krutoj2010 <krutoj2010@gmail.com>\n"
+"Last-Translator: Александр Кольцов <a.g.prosat@gmail.com>\n"
 "Language-Team: IPTVPlayer\n"
 "Language: ru\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
-"X-Generator: Poedit 1.6.10\n"
+"X-Generator: Poedit 2.3\n"
 "X-Poedit-Basepath: .\n"
 "Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 "X-Poedit-SearchPath-0: ../plugin\n"
@@ -18,45 +18,53 @@
 #: ../components/iptvplayerwidget.py:1685
 #, python-format
 msgid "\tDisk space available: %s"
-msgstr ""
+msgstr "\tДоступное  дисковое пространство: %s"
 
 #: ../components/iptvplayerwidget.py:1684
 #, python-format
 msgid "\tDisk space required: %s"
-msgstr ""
+msgstr "\tНеобходимое дисковое пространство: %s"
 
 #: ../hosts/hostbbcsport.py:431
 msgid ""
 "\n"
 "Error[1]."
 msgstr ""
+"\n"
+"Ошибка[1]."
 
 #: ../hosts/hostbbcsport.py:442
 msgid ""
 "\n"
 "Error[2]."
 msgstr ""
+"\n"
+"Ошибка[2]."
 
 #: ../hosts/hostbbcsport.py:450
 msgid ""
 "\n"
 "Error[3]."
 msgstr ""
+"\n"
+"Ошибка[3]."
 
 #: ../hosts/hostbbcsport.py:482
 msgid ""
 "\n"
 "Error[4]."
 msgstr ""
+"\n"
+"Ошибка[4]."
 
 #: ../setup/iptvsetupimpl.py:802
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "\n"
 "For more info please ask %s "
 msgstr ""
 "\n"
-"Для получения дополнительной информации, пожалуйста спросите  у samsamsam@o2.pl"
+"Дополнительную информацию спросите у %s "
 
 #: ../setup/iptvsetupimpl.py:867 ../setup/iptvsetupimpl.py:927
 msgid ""
@@ -64,7 +72,7 @@
 "For more info please ask samsamsam@o2.pl"
 msgstr ""
 "\n"
-"Для получения дополнительной информации, пожалуйста спросите  у samsamsam@o2.pl"
+"Дополнительную информацию спросите у samsamsam@o2.pl"
 
 #: ../setup/iptvsetupimpl.py:739 ../setup/iptvsetupimpl.py:1238
 msgid ""
@@ -72,7 +80,7 @@
 "For more info please ask the author samsamsam@o2.pl"
 msgstr ""
 "\n"
-"Для получения более подробной информации, пожалуйста, спросите автора samsamsam@o2.pl"
+"Дополнительную информацию спросите у samsamsam@o2.pl"
 
 #: ../setup/iptvsetupimpl.py:1193
 msgid ""
@@ -80,7 +88,7 @@
 "For more info please visit http://fluendo.com/"
 msgstr ""
 "\n"
-"Для получения более подробной информации, пожалуйста, посетите http://fluendo.com/"
+"Для получения подробной информации, пожалуйста, посетите http://fluendo.com/"
 
 #: ../components/iptvplayerwidget.py:482 ../components/iptvsubdownloader.py:371
 msgid ""
@@ -88,7 +96,7 @@
 "Make sure you are using the latest version of the plugin."
 msgstr ""
 "\n"
-"Убедитесь, что вы используете последнюю версию плагина."
+"Убедитесь, что Вы используете последнюю версию плагина."
 
 #: ../setup/iptvsetupimpl.py:991
 msgid ""
@@ -99,7 +107,6 @@
 "Пожалуйста, посетите http://duktape.org/"
 
 #: ../components/iptvplayerwidget.py:477
-#, fuzzy
 msgid ""
 "\n"
 "This host is not integral part of the E2iPlayer plugin.\n"
@@ -110,7 +117,6 @@
 "Это не поддерживается авторами IPTVПлеера."
 
 #: ../components/iptvplayerwidget.py:483
-#, fuzzy
 msgid ""
 "\n"
 "You can also report problem here: \n"
@@ -118,8 +124,7 @@
 msgstr ""
 "\n"
 "Сообшить о проблеме вы можете здесь: \n"
-"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
-"или здесь: samsamsam@o2.pl"
+"https://gitlab.com/maxbambi/e2iplayer/issues"
 
 #: ../components/iptvsubdownloader.py:372
 msgid ""
@@ -143,71 +148,69 @@
 
 #: ../components/iptvconfigmenu.py:372
 msgid "    Allowed formats of thumbnails"
-msgstr "Разрешенный формат эскизов"
+msgstr "    Разрешённый формат эскизов"
 
 #: ../components/iptvconfigmenu.py:401
 msgid "    Audio buffer size [KB]"
-msgstr "Размер буфера Аудио [KB]"
+msgstr "    Размер аудиобуфера [КБ]"
 
 #: ../components/iptvconfigmenu.py:354
 msgid "    Background color"
-msgstr ""
+msgstr "    Фон заднего плана"
 
 #: ../components/iptvconfigmenu.py:356
-#, fuzzy
 msgid "    Default suggestions provider"
-msgstr "Выбор провайдера субтитров:"
+msgstr "    Поставщик предложений по умолчанию"
 
 #: ../components/iptvconfigmenu.py:377
 msgid "    Enable hosts groups"
-msgstr ""
+msgstr "    Включить группы хостов"
 
 #: ../components/iptvconfigmenu.py:380
 msgid "    Number of columns"
-msgstr "Количество колонок"
+msgstr "    Количество колонок"
 
 #: ../components/iptvconfigmenu.py:379
 msgid "    Number of rows"
-msgstr "Количество строк"
+msgstr "    Количество строк"
 
 #: ../components/iptvconfigmenu.py:373
 msgid "    Remove thumbnails"
-msgstr "Удалить эскизы"
+msgstr "    Удалить эскизы"
 
 #: ../components/iptvconfigmenu.py:378
 msgid "    Service icon size"
-msgstr "Размер иконки сервиса"
+msgstr "    Размер иконки сервиса"
 
 #: ../components/iptvconfigmenu.py:355
 msgid "    Show suggestions"
-msgstr ""
+msgstr "    Показать предложения"
 
 #: ../components/iptvconfigmenu.py:400
 msgid "    Video buffer size [MB]"
-msgstr "Размер буфера Видео [MB]"
+msgstr "    Размер видеобуфера [МБ]"
 
 #: ../hosts/hostsportdeutschland.py:139
 #, python-format
 msgid " (planned %s)"
-msgstr ""
+msgstr " (планировалось %s)"
 
 #: ../hosts/hostfilmpertutti.py:211
-#, fuzzy
 msgid " - others links"
-msgstr "Ссылки пользователя"
+msgstr " - другие ссылки"
 
 #: ../hosts/hostinfoversion.py:4165
 msgid " Odczekaj momencik na wolne miejsce"
-msgstr ""
+msgstr " Дождитесь немного свободного места"
 
 #: ../hosts/hostinfoversion.py:4148
 msgid " Ups, wystąpił chwilowy problem z naszymi serwerami."
-msgstr ""
+msgstr " К сожалению, возникла временная проблема с нашими серверами."
 
 #: ../hosts/hostinfoversion.py:2199 ../hosts/hostinfoversion.py:2229
 #: ../hosts/hostinfoversion.py:2259
 msgid " Wystąpił chwilowy problem z naszymi serwerami."
-msgstr ""
+msgstr " Существует временная проблема с нашими серверами."
 
 #: ../setup/iptvsetupimpl.py:743 ../setup/iptvsetupimpl.py:806
 #: ../setup/iptvsetupimpl.py:871 ../setup/iptvsetupimpl.py:931
@@ -218,7 +221,7 @@
 "Do you want to install it? "
 msgstr ""
 " Это не было обнаружено. \n"
-"Вы хотите, установить его? "
+"Вы хотите установить его? "
 
 #: ../setup/iptvsetupimpl.py:744 ../setup/iptvsetupimpl.py:807
 #: ../setup/iptvsetupimpl.py:872 ../setup/iptvsetupimpl.py:932
@@ -229,53 +232,53 @@
 "Do you want to install new one? "
 msgstr ""
 " не рекомендуется. \n"
-"Вы хотите, установить новый? "
+"Вы хотите установить новый? "
 
 #: ../hosts/hoststreaminghdfun.py:266
 msgid " main link"
-msgstr ""
+msgstr " главная ссылка"
 
 #: ../components/captcha_helper.py:111 ../components/recaptcha_v2helper.py:55
 msgid " or "
-msgstr ""
+msgstr " или "
 
 #: ../hosts/hostinfoversion.py:4025
 msgid " zobacz - nie widzi serwera."
-msgstr ""
+msgstr " поиск - невозможно найти сервер."
 
 #: ../components/e2ivk.py:628
 #, python-format
 msgid "\"%s\" Virtual Keyboard layout not available."
-msgstr ""
+msgstr "\"%s\" Виртуальная раскладка клавиатуры недоступна."
 
 #: ../libs/wagasworld.py:111
 #, python-format
 msgid "\"%s\" login failed! Please check your login and password."
-msgstr ""
+msgstr "Вход в \"%s\" не удался! Пожалуйста, проверьте Ваш логин и пароль."
 
 #: ../hosts/hostwebstream.py:145
 msgid "\"Web\" streams player"
-msgstr "\"Сеть\" Потоковый плеер"
+msgstr "Потоковый \"Web\" плеер"
 
 #: ../hosts/hostplayrtsiw.py:456
 #, python-format
 msgid "%s "
-msgstr ""
+msgstr "%s "
 
 #: ../hosts/hostiptvplayerinfo.py:51
 #, python-format
 msgid "%s - service overview"
-msgstr ""
+msgstr "%s - обзор сервисов"
 
 #: ../hosts/hostiptvplayerinfo.py:54
-#, fuzzy, python-format
+#, python-format
 msgid "%s - subtitles provider"
-msgstr "Выбор провайдера субтитров:"
+msgstr "%s - провайдер субтитров"
 
 #: ../hosts/hosteskago.py:249 ../hosts/hostmythewatchseries.py:253
-#, fuzzy, python-format
+#, python-format
 msgid "%s - trailer"
-msgstr "Трейлер"
+msgstr "%s - трейлер"
 
 #: ../components/iptvconfigmenu.py:421 ../components/iptvconfigmenu.py:424
 #: ../components/iptvconfigmenu.py:426 ../hosts/hostbsto.py:44
@@ -284,93 +287,93 @@
 #: ../hosts/hostmusicbox.py:41
 #, python-format
 msgid "%s API KEY"
-msgstr ""
+msgstr "%s API КЛЮЧ"
 
 #: ../components/iptvconfigmenu.py:416
 #, python-format
 msgid "%s device name"
-msgstr ""
+msgstr "%s имя устройства"
 
 #: ../iptvdm/iptvdmui.py:59
-#, fuzzy, python-format
+#, python-format
 msgid "%s download manager"
-msgstr "Менеджер загрузок"
+msgstr "Менеджер загрузок %s "
 
 #: ../components/iptvconfigmenu.py:414
 #, python-format
 msgid "%s e-mail"
-msgstr ""
+msgstr "%s e-mail"
 
 #: ../hosts/hostplayrtsiw.py:314
-#, fuzzy, python-format
+#, python-format
 msgid "%s episodes"
-msgstr "Новые серии"
+msgstr "%s новые серии"
 
 #: ../Web/webParts.py:125
 #, python-format
 msgid "%s file is %d KB in size. Last %d lines are:"
-msgstr ""
+msgstr "Файл %s имеет размер %d КБ. Последние %d строк:"
 
 #: ../Web/webParts.py:122
 #, python-format
 msgid "%s file is %d MB in size. Last %d lines are:"
-msgstr ""
+msgstr "Файл %s имеет размер %d МБ. Последние %d строк:"
 
 #: ../hosts/hosttwitchtv.py:424 ../hosts/hosttwitchtv.py:444
 #, python-format
 msgid "%s followers"
-msgstr ""
+msgstr "%s подписчиков"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:73
 #, python-format
 msgid "%s has been protected with google recaptcha v2. You can try to use API version."
-msgstr ""
+msgstr "%s был защищен с помощью Google recaptcha v2. Вы можете попробовать использовать версию API."
 
 #: ../libs/urlparser.py:8828
 #, python-format
 msgid "%s link extractor error."
-msgstr ""
+msgstr "Ошибка экстрактора ссылки %s."
 
 #: ../components/iptvconfigmenu.py:344
-#, fuzzy, python-format
+#, python-format
 msgid "%s login"
-msgstr "Войти"
+msgstr "%s вход"
 
 #: ../components/iptvconfigmenu.py:345 ../components/iptvconfigmenu.py:415
-#, fuzzy, python-format
+#, python-format
 msgid "%s password"
-msgstr "Пароль"
+msgstr "%s пароль"
 
 #: ../iptvdm/iptvbuffui.py:565
 #, python-format
 msgid "%s returned %s: %s"
-msgstr ""
+msgstr "%s вернул %s: %s"
 
 #: ../libs/youtube_dl/extractor/vevo.py:89
 #, python-format
 msgid "%s said: This page is currently unavailable in your region"
-msgstr ""
+msgstr "%s сказал: эта страница в настоящее время недоступна в Вашем регионе."
 
 #: ../components/confighost.py:82
-#, fuzzy, python-format
+#, python-format
 msgid "%s services configuration"
-msgstr "Выбор сервисов-хостов (Нажмите OK)"
+msgstr "Конфигурация служб %s (Нажмите OK)."
 
 #: ../hosts/hostplayrtsiw.py:440
-#, fuzzy, python-format
+#, python-format
 msgid "%s shows"
-msgstr "ТВ шоу"
+msgstr "%s тв шоу"
 
 #: ../hosts/hostiptvplayerinfo.py:52 ../hosts/hostiptvplayerinfo.py:53
-#, fuzzy, python-format
+#, python-format
 msgid "%s subtitles download - how to"
-msgstr "Загрузить субтитры"
+msgstr "Загрузка %s субтитров - помощь"
 
 #: ../libs/hcaptcha_2captcha.py:86 ../libs/recaptcha_v2_2captcha.py:82
 #: ../libs/recaptcha_v2_9kw.py:74 ../libs/recaptcha_v3_2captcha.py:74
 #, python-format
 msgid "%s timeout."
-msgstr ""
+msgstr "Тайм-аут %s"
 
 #: ../components/ihost.py:653
 #, python-format
@@ -378,25 +381,27 @@
 "%s uses \"geo-blocking\" measures to prevent you from accessing the services from abroad.\n"
 " Host country: %s, your country: %s"
 msgstr ""
+"% s использует \"геоблокирующие\" меры, чтобы запретить вам доступ к сервисам из-за границы.\n"
+"Передающая страна: %s. Ваша страна: %s."
 
 #: ../hosts/hosttwitchtv.py:168 ../hosts/hosttwitchtv.py:214
 #: ../hosts/hosttwitchtv.py:262 ../hosts/hosttwitchtv.py:298
 #: ../hosts/hosttwitchtv.py:358 ../hosts/hosttwitchtv.py:480
-#, fuzzy, python-format
+#, python-format
 msgid "%s viewers"
-msgstr "Возраст просмотра:"
+msgstr "%s зрителей"
 
 #: ../hosts/hostcimaclubcom.py:239 ../hosts/hostmediasetplay.py:266
 #: ../hosts/hostmediasetplay.py:414 ../hosts/hosttwitchtv.py:423
 #: ../hosts/hosttwitchtv.py:443
-#, fuzzy, python-format
+#, python-format
 msgid "%s views"
-msgstr "Просмотры"
+msgstr "%s просмотров"
 
 #: ../hosts/hostcimaclubcom.py:243
 #, python-format
 msgid "%s/10"
-msgstr ""
+msgstr "%s/10"
 
 #: ../components/iptvpictureplayer.py:252
 #: ../components/iptvpictureplayer.py:322
@@ -416,9 +421,8 @@
 msgstr "----------Другое----------"
 
 #: ../hosts/hostfilmpalast.py:57
-#, fuzzy
 msgid "--All Episodes--"
-msgstr "Эпизоды"
+msgstr "--Все эпизоды--"
 
 #: ../hosts/hostandrijaiandjelka.py:74 ../hosts/hostappletrailers.py:56
 #: ../hosts/hostfilmpertutti.py:53 ../hosts/hostfilmstreamhdit.py:65
@@ -450,54 +454,52 @@
 #: ../hosts/hostted.py:144 ../hosts/hostted.py:149 ../hosts/hostfilmixco.py:180
 #: ../hosts/hostfilmixco.py:198
 msgid "--Any--"
-msgstr ""
+msgstr "--Любые--"
 
 #: ../hosts/hostyoutube.py:105
 msgid "--Other--"
-msgstr "--Другой-"
+msgstr "--Другое-"
 
 #: ../components/configextmovieplayer.py:77
 msgid "12 hour format "
-msgstr ""
+msgstr "12-ти часовой формат "
 
 #: ../components/iptvconfigmenu.py:224
-#, fuzzy
 msgid "16:10 Letterbox"
-msgstr "Режим ящика"
+msgstr "16:10 Letterbox"
 
-#: ../components/iptvconfigmenu.py:224
+#: ../components/iptvconfigmenu.py:222
 msgid "16:10 PanScan"
-msgstr ""
+msgstr "16:10 PanScan"
 
 #: ../components/iptvconfigmenu.py:224
 msgid "16:9"
-msgstr ""
+msgstr "16:9"
 
 #: ../components/iptvconfigmenu.py:224
 #, fuzzy
 msgid "16:9 Letterbox"
-msgstr "Режим ящика"
+msgstr "16:9 Letterbox"
 
 #: ../components/iptvconfigmenu.py:224
 msgid "16:9 always"
-msgstr ""
+msgstr "16:9 всегда"
 
 #: ../components/configextmovieplayer.py:77
 msgid "24 hour format "
-msgstr ""
+msgstr "24-х часовой формат "
 
 #: ../components/iptvconfigmenu.py:224
-#, fuzzy
 msgid "4:3 Letterbox"
-msgstr "Режим ящика"
+msgstr "4:3 Letterbox"
 
 #: ../components/iptvconfigmenu.py:224
 msgid "4:3 PanScan"
-msgstr ""
+msgstr "4:3 PanScan"
 
 #: ../Web/webParts.py:97
 msgid "<font color=\"#FE642E\">REMEMBER:</font></b> E2iPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
-msgstr ""
+msgstr "<font color=\"#FE642E\">ПОМНИТЕ:</font></b> E2iPlayer <b>ТОЛЬКО</b> специализированный веб-браузер. Он <b>НЕ</b> размещает какие-либо материалы!</font>"
 
 #: ../iptvupdate/updatemainwindow.py:67
 msgid "> Press OK to start <"
@@ -505,53 +507,49 @@
 
 #: ../hosts/hostbbcsport.py:478
 msgid "A TV License is required to watch BBC iPlayer streams, see the BBC website for more information: https://www.bbc.co.uk/iplayer/help/tvlicence"
-msgstr ""
+msgstr "Для просмотра потоков BBC iPlayer требуется телевизионная лицензия. Для доп. информации: https://www.bbc.co.uk/iplayer/help/tvlicence."
 
 #: ../hosts/host3player.py:57 ../hosts/hostbbciplayer.py:57
 #: ../hosts/hostbbciplayer.py:201 ../hosts/hostserienstreamto.py:72
 #: ../hosts/hosttvnowde.py:60
-#, fuzzy
 msgid "A-Z"
-msgstr "Все A-Z"
+msgstr "A-Z"
 
 #: ../hosts/host9anime.py:48 ../hosts/hostaltadefinizionecool.py:63
-#, fuzzy
 msgid "A-Z List"
-msgstr "Аниме Список"
+msgstr "Список A-Z"
 
 #: ../components/configextmovieplayer.py:330
-#, fuzzy
 msgid "AAC downmix mode"
-msgstr "    Выбор режима AAC"
+msgstr "    Выбор режима микширования AAC"
 
 #: ../hosts/hostalltubetv.py:36
 msgid "ABC"
-msgstr ""
+msgstr "ABC"
 
 #: ../iptvdm/iptvlist.py:115 ../Web/webParts.py:318
 msgid "ABORTED"
 msgstr "ПРЕРВАНО"
 
 #: ../components/configextmovieplayer.py:328
-#, fuzzy
 msgid "AC3 downmix mode"
-msgstr "    Выбор режима AC3"
+msgstr "    Выбор режима микширования AC3"
 
 #: ../hosts/hostmusicmp3ru.py:326
 msgid "ALBUMS"
-msgstr ""
+msgstr "АЛЬБОМЫ"
 
 #: ../hosts/hostmediasetplay.py:183
 msgid "API initialization failed!"
-msgstr ""
+msgstr "Не удалось инициализировать API!"
 
 #: ../hosts/hostdancetrippin.py:37 ../hosts/hostmusicmp3ru.py:327
 msgid "ARTISTS"
-msgstr ""
+msgstr "АРТИСТЫ"
 
 #: ../hosts/hostplayrtsiw.py:186
 msgid "AZ"
-msgstr ""
+msgstr "AZ"
 
 #: ../iptvupdate/updatemainwindow.py:168 ../iptvupdate/updatemainwindow.py:331
 msgid "Aborted"
@@ -559,37 +557,36 @@
 
 #: ../components/VirtualKeyBoard.py:99
 msgid "Accept"
-msgstr ""
+msgstr "Одобрено"
 
 #: ../components/recaptcha_v2myjd_widget.py:128
 msgid "Access denied. Please check password."
-msgstr ""
+msgstr "Доступ закрыт. Пожалуйста, проверьте пароль."
 
 #: ../hosts/hostlookmovieag.py:67
-#, fuzzy
 msgid "Action Movies"
-msgstr "Лучшие фильмы"
+msgstr "Экшн фильмы"
 
 #: ../Web/webParts.py:63
 msgid "Active host"
-msgstr ""
+msgstr "Активный хост"
 
 #: ../hosts/hostddl.py:552
 msgid "Actor:"
-msgstr ""
+msgstr "Актер:"
 
 #: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:553
 msgid "Actors:"
-msgstr ""
+msgstr "Актеры:"
 
 #: ../components/playerselector.py:469
-#, fuzzy, python-format
+#, python-format
 msgid "Add host %s to group"
-msgstr "Добавить в группу"
+msgstr "Добавить хост %s  в группу"
 
 #: ../components/iptvplayerwidget.py:593
 msgid "Add item to favourites"
-msgstr "Добавить к избранному"
+msgstr "Добавить пункт в избранные"
 
 #: ../components/iptvfavouriteswidgets.py:299
 msgid "Add item to group"
@@ -607,31 +604,29 @@
 
 #: ../iptvupdate/updatemainwindow.py:374
 msgid "Add repository last version."
-msgstr ""
+msgstr "Добавить репозиторий последней версии."
 
 #: ../Web/webParts.py:421
-#, fuzzy
 msgid "Add to downloader"
-msgstr "hlsdl загрузчик"
+msgstr "Добавить в загрузчик"
 
 #: ../hosts/hostfreediscpl.py:246
-#, fuzzy, python-format
+#, python-format
 msgid "Added by: %s, directory: %s"
-msgstr "Создать каталог [%s]"
+msgstr "Добавлено: %s, каталог: %s"
 
 #: ../hosts/hostfrancetv.py:413 ../hosts/hostsportitalia.py:207
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "Added: {0}"
-msgstr "Добавлена дата"
+msgstr "Добавлено: {0}"
 
 #: ../hosts/hostlookmovieag.py:68
-#, fuzzy
 msgid "Adventure Movies"
-msgstr "Избранные видео"
+msgstr "Фильмы приключения"
 
 #: ../hosts/hostyoutube.py:35
 msgid "Age-gate bypass:"
-msgstr ""
+msgstr "Обход возрастных ограничений:"
 
 #: ../components/iptvplayerwidget.py:1143 ../hosts/host3player.py:156
 #: ../hosts/host9anime.py:104 ../hosts/hostakoam.py:134
@@ -664,14 +659,12 @@
 msgstr "Все Лиги"
 
 #: ../hosts/hosttwitchtv.py:51
-#, fuzzy
 msgid "All Platforms"
-msgstr "Платформа"
+msgstr "Все платформы"
 
 #: ../hosts/hosteurosportplayer.py:108
-#, fuzzy
 msgid "All Sports"
-msgstr "Программы"
+msgstr "Все спортивные"
 
 #: ../hosts/hostmovie4kto.py:79
 msgid "All TV shows"
@@ -679,60 +672,52 @@
 
 #: ../hosts/hosturllist.py:49
 msgid "All in one"
-msgstr "Все файлы, без разделения на категории"
+msgstr "Всё в одном"
 
 #: ../Web/webParts.py:482
-#, fuzzy
 msgid "All materials"
-msgstr "Все фильмы"
+msgstr "Все материалы"
 
 #: ../hosts/hostmovie4kto.py:74
 msgid "All movies"
 msgstr "Все фильмы"
 
 #: ../hosts/hostfrancetv.py:290
-#, fuzzy
 msgid "All programs"
-msgstr "Программы"
+msgstr "Все программы"
 
 #: ../hosts/hostfrancetv.py:314
-#, fuzzy
 msgid "All shows"
-msgstr "Все ТВ-шоу"
+msgstr "Все шоу"
 
 #: ../hosts/hosttwitchtv.py:116
-#, fuzzy
 msgid "All time"
-msgstr "Все файлы, без разделения на категории"
+msgstr "За всё время"
 
 #: ../hosts/hostfrancetv.py:289 ../hosts/hostfrancetv.py:315
 #: ../hosts/hostfrancetv.py:335
-#, fuzzy
 msgid "All videos"
-msgstr "Все фильмы"
+msgstr "Все видео"
 
 #: ../hosts/hostyoutube.py:39
 msgid "Allow dash format:"
-msgstr "Разрешить формат разных типов:"
+msgstr "Разрешить dash-формат:"
 
 #: ../components/iptvconfigmenu.py:348
 msgid "Allow downgrade"
-msgstr "Разрешить использование более ранних версий"
+msgstr "Разрешить более ранние версии"
 
 #: ../hosts/hostfavourites.py:31
-#, fuzzy
 msgid "Allow watched flag to be set"
-msgstr "Разрешить просмотр установленного флага (экспериментальный)"
+msgstr "Разрешить видимость установленного флага"
 
 #: ../hosts/hostbsto.py:84
-#, fuzzy
 msgid "Alphabet"
-msgstr "В алфавитном порядке"
+msgstr "По алфавиту"
 
 #: ../hosts/hostdancetrippin.py:44
-#, fuzzy
 msgid "Alphabetical "
-msgstr "В алфавитном порядке"
+msgstr "Алфавитный порядок "
 
 #: ../hosts/hostekinomaniak.py:62 ../hosts/hostfilmpalast.py:54
 #: ../hosts/hostfilmpalast.py:58 ../hosts/hostkisscartoonme.py:203
@@ -741,9 +726,8 @@
 msgstr "В алфавитном порядке"
 
 #: ../hosts/hosthoofootcom.py:230
-#, fuzzy
 msgid "Alternative"
-msgstr "Альтернативный домен:"
+msgstr "Альтернатива"
 
 #: ../hosts/host123movieshd.py:33 ../hosts/hostfilmstreamvkcom.py:34
 #: ../hosts/hostskstream.py:34 ../hosts/hosticefilmsinfo.py:34
@@ -765,7 +749,7 @@
 #: ../hosts/hostyesmoviesto.py:28 ../hosts/hostyifytv.py:32
 #: ../hosts/hostfilmeonlineto.py:27
 msgid "Alternative proxy server (1)"
-msgstr "Альтернативный прокси - сервер (1)"
+msgstr "Альтернативный прокси-сервер (1)"
 
 #: ../components/iptvconfigmenu.py:385 ../hosts/host123movieshd.py:26
 #: ../hosts/hostakoam.py:27 ../hosts/hostfilmstreamvkcom.py:27
@@ -777,17 +761,15 @@
 #: ../hosts/hostyesmoviesto.py:29 ../hosts/hostyifytv.py:33
 #: ../hosts/hostfilmeonlineto.py:28
 msgid "Alternative proxy server (2)"
-msgstr "Альтернативный прокси - сервер (2)"
+msgstr "Альтернативный прокси-сервер (2)"
 
 #: ../hosts/hostfilmynadzis.py:314
-#, fuzzy
 msgid "Alternative title"
-msgstr "Альтернативный домен:"
+msgstr "Альтернативное оглавление:"
 
 #: ../hosts/hostthewatchseriesto.py:41
-#, fuzzy
 msgid "Always"
-msgstr "Топ 100 Всегда"
+msgstr "Всегда"
 
 #: ../libs/ustvnow.py:118
 #, python-format
@@ -796,7 +778,7 @@
 "Please check your login credentials and try again later...\""
 msgstr ""
 "Произошла ошибка при попытке войти к пользователю \"%s.\n"
-"Пожалуйста, проверьте ваши учетные данные и попробуйте еще раз позже...\""
+"Пожалуйста, проверьте Ваши учетные данные и попробуйте еще раз позже...\""
 
 #: ../components/iptvextmovieplayer.py:1007
 #, python-format
@@ -810,26 +792,23 @@
 
 #: ../hosts/hostorthobulletscom.py:117
 msgid "Anatomy"
-msgstr ""
+msgstr "Анатомия"
 
 #: ../hosts/hostlookmovieag.py:69
-#, fuzzy
 msgid "Animation Movies"
-msgstr "Анимация [субтитры]"
+msgstr "Анимационные фильмы"
 
 #: ../hosts/hostyifytv.py:82
-#, fuzzy
 msgid "Animations"
-msgstr "Информация"
+msgstr "Анимация"
 
 #: ../hosts/hostmrpiracy.py:689
 msgid "Anime"
 msgstr "Аниме"
 
 #: ../hosts/hostwatchcartoononline.py:348
-#, fuzzy
 msgid "Anime Search"
-msgstr "Поиск"
+msgstr "Поиск аниме"
 
 #: ../hosts/hostanimeodcinki.py:42 ../hosts/hostshahiidanimenet.py:44
 msgid "Anime list"
@@ -861,16 +840,15 @@
 
 #: ../hosts/hostorthobulletscom.py:118
 msgid "Approaches"
-msgstr ""
+msgstr "На подходе"
 
 #: ../hosts/hostsportitalia.py:77
 msgid "April"
-msgstr ""
+msgstr "Апрель"
 
 #: ../hosts/hostegybest.py:63
-#, fuzzy
 msgid "Arabic movies"
-msgstr "Все фильмы"
+msgstr "Арабские фильмы"
 
 #: ../hosts/hosttwitchtv.py:105 ../iptvdm/iptvdmui.py:76 ../Web/webParts.py:254
 msgid "Archive"
@@ -883,24 +861,23 @@
 
 #: ../hosts/hostekstraklasatv.py:33
 msgid "Ask"
-msgstr ""
+msgstr "Запрос"
 
 #: ../components/iptvextmovieplayer.py:702
 msgid "Aspect"
-msgstr "Аспект"
+msgstr "Разрешение"
 
 #: ../hosts/hostdancetrippin.py:225 ../hosts/hostrtbfbe.py:686
 msgid "Audio"
 msgstr "Аудио"
 
 #: ../components/iptvextmovieplayer.py:562
-#, fuzzy
 msgid "Audio tracks"
-msgstr "Выбор аудио дорожки"
+msgstr "Аудиодорожки"
 
 #: ../hosts/hostsportitalia.py:77
 msgid "August"
-msgstr ""
+msgstr "Август"
 
 #: ../components/configextmovieplayer.py:26 ../components/iptvconfigmenu.py:84
 #: ../components/iptvconfigmenu.py:87 ../components/iptvconfigmenu.py:193
@@ -911,7 +888,7 @@
 
 #: ../components/iptvconfigmenu.py:336
 msgid "Auto check for plugin update"
-msgstr "Автоматическая проверка обновлений плагина"
+msgstr "Автопроверка обновлений плагина"
 
 #: ../components/iptvplayerwidget.py:716
 msgid "Auto selection based on the settings"
@@ -919,71 +896,67 @@
 
 #: ../subproviders/subprov_youtubecom.py:62
 msgid "Auto-translate"
-msgstr ""
+msgstr "Автоперевод"
 
 #: ../components/configextmovieplayer.py:341
 msgid "Automatically turn on external subtitles"
-msgstr ""
+msgstr "Автоматически включать внешние субтитры"
 
 #: ../components/iptvconfigmenu.py:503
 msgid "Autoplay start delay"
-msgstr "Автозапуск задержки пуска"
+msgstr "Задержка автозапуска"
 
 #: ../hosts/host3player.py:56
 msgid "BY DAY"
-msgstr ""
+msgstr "ДНЁМ"
 
 #: ../hosts/hostorthobulletscom.py:116
 msgid "Basic Science"
-msgstr ""
+msgstr "Фундаментальная наука"
 
 #: ../hosts/hostpinkbike.py:41
 msgid "Best Pinkbike Videos"
-msgstr ""
+msgstr "Лучшие видео Pinkbike"
 
 #: ../hosts/hostshoutcast.py:126
-#, fuzzy, python-format
+#, python-format
 msgid "Bitrate: %s"
-msgstr "Битрейт: наихудший"
+msgstr "Битрейт: %s"
 
 #: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
 msgid "Black"
-msgstr "Черный"
+msgstr "Чёрный"
 
 #: ../components/configextmovieplayer.py:377
-#, fuzzy
 msgid "Black iframe file"
-msgstr "Расположение очистить заставки"
+msgstr "Чёрный файл iframe"
 
 #: ../components/iptvconfigmenu.py:505
 msgid "Block wmv files"
 msgstr "Блокировать WMV файлы"
 
 #: ../hosts/hostorthobulletscom.py:78
-#, fuzzy
 msgid "Board Review"
-msgstr "Предварительный просмотр"
+msgstr "Совет по просмотру"
 
 #: ../hosts/hosttwitchtv.py:481
-#, fuzzy, python-format
+#, python-format
 msgid "Broadcaster: %s"
-msgstr "Трансляции"
+msgstr "Вещатель: %s"
 
 #: ../hosts/hosttwitchtv.py:135
 msgid "Browse"
-msgstr "Смотреть"
+msgstr "Обзор"
 
 #: ../hosts/hostvumedicom.py:78
-#, fuzzy
 msgid "Browse videos"
-msgstr "Избранные видео"
+msgstr "Обзор видео"
 
 #: ../hosts/hostyoutube.py:56
 msgid "Browse youtube trending feeds"
 msgstr ""
 
 #: ../components/iptvconfigmenu.py:402
-#, fuzzy
 msgid "Buffering location"
 msgstr "Каталог буфера обмена"
 
@@ -996,18 +969,16 @@
 msgstr "По странам"
 
 #: ../subproviders/subprov_subscenecom.py:115
-#, fuzzy
 msgid "By media title"
-msgstr "По названию"
+msgstr "По названию медиа"
 
 #: ../hosts/hostcimaclubcom.py:127
 msgid "By year"
 msgstr "По годам"
 
 #: ../hosts/hostitvcom.py:31
-#, fuzzy
 msgid "Bypass geo-blocking for VODs (it may be illegal):"
-msgstr "Использование веб-прокси (это может быть незаконно):"
+msgstr "Обход геоблокировки VOD (может быть незаконно):"
 
 #: ../setup/iptvsetupimpl.py:738
 msgid "C subtitle parser"
@@ -1015,24 +986,23 @@
 
 #: ../hosts/hostdancetrippin.py:36
 msgid "CHANNELS "
-msgstr ""
+msgstr "КАНАЛЫ "
 
 #: ../hosts/hostmythewatchseries.py:64
 msgid "CINEMA MOVIES"
-msgstr ""
+msgstr "КИНОФИЛЬМЫ"
 
 #: ../hosts/hostorthobulletscom.py:79
 msgid "CME SAE"
-msgstr ""
+msgstr "CME SAE"
 
 #: ../hosts/hostwatchwrestling.py:335 ../hosts/hostwatchwrestlinguno.py:295
 msgid "COMMENTS"
-msgstr ""
+msgstr "КОММЕНТАРИИ"
 
 #: ../hosts/hostredbull.py:53
-#, fuzzy
 msgid "Calendar"
-msgstr "Стандарт"
+msgstr "Календарь"
 
 #: ../hosts/hostlocalmedia.py:239
 #, python-format
@@ -1053,48 +1023,49 @@
 #: ../components/recaptcha_v2myjd_widget.py:63
 #: ../components/VirtualKeyBoard.py:101 ../Web/webParts.py:82
 msgid "Cancel"
-msgstr "Отменить"
+msgstr "Отмена"
 
 #: ../hosts/hostfreediscpl.py:104 ../hosts/hostefilmytv.py:558
 #: ../hosts/hostplusdede.py:555 ../hosts/hostserienstreamto.py:523
 msgid "Captcha"
-msgstr ""
+msgstr "Защитный код"
 
 #: ../components/iptvconfigmenu.py:411
 msgid "Captcha bypass free service"
-msgstr ""
+msgstr "Обход капчи бесплатного сервиса"
 
 #: ../components/iptvconfigmenu.py:418
 msgid "Captcha bypass paid service"
-msgstr ""
+msgstr "Обход капчи платного сервиса"
 
 #: ../components/recaptcha_v2myjd_widget.py:121
 msgid ""
 "Captcha solved.\n"
 "Waiting for notification."
 msgstr ""
+"Капча решена.\n"
+"Ждём уведомление."
 
 #: ../components/iptvconfigmenu.py:410
 msgid "Captcha solver order"
-msgstr ""
+msgstr "Решатель капчи очереди"
 
 #: ../hosts/hostbsto.py:42 ../hosts/hostcineto.py:36
 #: ../hosts/hostmrpiracy.py:52
 msgid "Captcha solving service"
-msgstr ""
+msgstr "Служба решения капчи"
 
 #: ../hosts/hostkinotan.py:41
 msgid "Cartoons"
 msgstr "Мультсериалы"
 
 #: ../hosts/hostmozicsillag.py:42
-#, fuzzy
 msgid "Catalog"
-msgstr "Каталог A-Z"
+msgstr "Каталог"
 
 #: ../hosts/hostbbcsport.py:172
 msgid "Catch up"
-msgstr ""
+msgstr "Догоняющие"
 
 #: ../hosts/hostfilmstreamvkcom.py:98 ../hosts/hostfilmynadzis.py:142
 #: ../hosts/hostfrancetv.py:448 ../hosts/hostgovodtv.py:66
@@ -1116,14 +1087,12 @@
 msgstr "Категории"
 
 #: ../hosts/hostfilmstreamhdit.py:190
-#, fuzzy
 msgid "Categories:"
-msgstr "Категории"
+msgstr "Категории:"
 
 #: ../libs/iklubnet.py:30
-#, fuzzy
 msgid "Categorization"
-msgstr "Категоризации:"
+msgstr "Категоризация"
 
 #: ../hosts/hostkisscartoonme.py:45
 msgid "Catrtoon list"
@@ -1139,9 +1108,9 @@
 msgstr "Канал"
 
 #: ../hosts/hostuktvplay.py:136 ../hosts/hostuktvplay.py:200
-#, fuzzy, python-format
+#, python-format
 msgid "Channel: %s"
-msgstr "Каналы"
+msgstr "Канал: %s"
 
 #: ../hosts/hostfrancetv.py:447 ../hosts/hostbbciplayer.py:55
 #: ../hosts/hostitvcom.py:55 ../hosts/hostliveleak.py:46
@@ -1154,7 +1123,6 @@
 msgstr "Каналы"
 
 #: ../hosts/hosttwitchtv.py:636
-#, fuzzy
 msgid "Channles"
 msgstr "Каналы"
 
@@ -1163,9 +1131,8 @@
 msgstr "Проверка версии."
 
 #: ../hosts/hostogladajto.py:79 ../hosts/hostzdfmediathek.py:85
-#, fuzzy
 msgid "Children"
-msgstr "Для детей"
+msgstr "Детские"
 
 #: ../hosts/hostkinox.py:89 ../hosts/hostmovie4kto.py:72
 msgid "Cinema movies"
@@ -1173,20 +1140,20 @@
 
 #: ../components/e2ivk.py:423
 msgid "Clear"
-msgstr ""
+msgstr "Очистить"
 
 #: ../Web/webSite.py:69
 msgid "Click"
-msgstr ""
+msgstr "Нажмите"
 
 #: ../hosts/hostkijknl.py:60 ../hosts/hosttwitchtv.py:120
 #: ../hosts/hosttwitchtv.py:286
 msgid "Clips"
-msgstr ""
+msgstr "Клипы"
 
 #: ../components/iptvextmovieplayer.py:1343
 msgid "Closing. Please wait..."
-msgstr "Закрытие. Пожалуйста , подождите ..."
+msgstr "Закрытие. Пожалуйста, подождите..."
 
 #: ../hosts/hostkinotan.py:50 ../hosts/hostmovs4ucom.py:41
 msgid "Collections"
@@ -1197,23 +1164,21 @@
 msgstr "Комедии"
 
 #: ../hosts/hostlookmovieag.py:70
-#, fuzzy
 msgid "Comedy Movies"
-msgstr "Комедии"
+msgstr "Комедийные фильмы"
 
 #: ../hosts/hostbbcsport.py:172
-#, fuzzy
 msgid "Coming up"
-msgstr "Скоро"
+msgstr "На подходе"
 
 #: ../hosts/hostplusdede.py:325
-#, fuzzy, python-format
+#, python-format
 msgid "Comments: %s"
-msgstr "Количество комментариев"
+msgstr "Комментарии: %s"
 
 #: ../hosts/hostiptvplayerinfo.py:46
 msgid "Commits"
-msgstr ""
+msgstr "Коммиты"
 
 #: ../iptvupdate/updatemainwindow.py:281
 msgid "Completed."
@@ -1230,14 +1195,14 @@
 msgstr "Конфигурация"
 
 #: ../components/confighost.py:32
-#, fuzzy, python-format
+#, python-format
 msgid "Configuration [%s] service"
-msgstr "Конфигурация службы[%s]"
+msgstr "Конфигурация сервиса [%s]"
 
 #: ../plugin.py:81
-#, fuzzy, python-format
+#, python-format
 msgid "Configure %s"
-msgstr "Настройка хоста"
+msgstr "Настройка %s"
 
 #: ../components/iptvplayerwidget.py:608
 msgid "Configure host"
@@ -1279,24 +1244,23 @@
 
 #: ../iptvupdate/updatemainwindow.py:869
 msgid "Copy all graphics."
-msgstr ""
+msgstr "Копировать всю графику."
 
 #: ../iptvupdate/updatemainwindow.py:861 ../iptvupdate/updatemainwindow.py:871
 msgid "Copy graphics without icons."
-msgstr ""
+msgstr "Копировать графику без значков."
 
 #: ../iptvupdate/updatemainwindow.py:873
 msgid "Copy icons."
-msgstr ""
+msgstr "Копировать иконки."
 
 #: ../iptvupdate/updatemainwindow.py:378
 msgid "Copy post installed binaries."
 msgstr "Копировать после установки двоичных файлов."
 
 #: ../iptvupdate/updatemainwindow.py:292
-#, fuzzy
 msgid "Correct version."
-msgstr "Проверка версии."
+msgstr "Правильная версия."
 
 #: ../hosts/hostsovdub.py:32 ../hosts/hostyifytv.py:76
 msgid "Countries"
@@ -1304,52 +1268,50 @@
 
 #: ../components/configextmovieplayer.py:312
 msgid "Create LCD/VFD summary screen"
-msgstr ""
+msgstr "Создать сводный экран LCD/VFD"
 
 #: ../setup/iptvsetupimpl.py:420
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Create OpenSSL symlinks failed with following error \"%s\".\n"
 "Some functions may not work correctly."
 msgstr ""
-"OpenSSL в изображении не поддерживается.\n"
-"Некоторые функции могут работать некорректно."
+"Создание символьных ссылок OpenSSL с ошибкой \"%s\".\n"
+"Некоторые функции могут работать неправильно."
 
 #: ../hosts/hostlookmovieag.py:71
-#, fuzzy
 msgid "Crime Movies"
-msgstr "Новые фильмы"
+msgstr "Криминальные фильмы"
 
 #: ../libs/pCommon.py:1840
 msgid "Critical Error – Content-Encoding gzip cannot be handled!"
-msgstr ""
+msgstr "Критическая ошибка: gzip с кодировкой содержимого не может быть обработан!"
 
 #: ../components/iptvplayerwidget.py:335
 msgid "Critical Error – cookie can't be saved!"
-msgstr ""
+msgstr "Критическая ошибка: файл cookie не может быть сохранен!"
 
 #: ../hosts/hostted.py:356
-#, fuzzy
 msgid "Curator"
-msgstr "Конфигурация"
+msgstr "Куратор"
 
 #: ../iptvupdate/updatemainwindow.py:346
 #, python-format
 msgid "Currently you have version [%s]."
-msgstr "В настоящее время у вас версия [%s]."
+msgstr "В настоящее время у Вас версия [%s]."
 
 #: ../hosts/hostlocalmedia.py:598
 msgid "Cut"
-msgstr "Переместить"
+msgstr "Обрезать"
 
 #: ../libs/sportstream365.py:27
 msgid "Cyrillic Latin Converter"
-msgstr ""
+msgstr "Кириллице-латинский конвертер"
 
 #: ../hosts/hostsvtplayse.py:39 ../hosts/hosttvnowde.py:30
 #: ../libs/youtube_dl/extractor/bbc.py:25
 msgid "DASH/mpd"
-msgstr ""
+msgstr "DASH/mpd"
 
 #: ../hosts/hostwatchwrestling.py:332 ../hosts/hostwatchwrestlinguno.py:292
 msgid "DATE"
@@ -1368,18 +1330,16 @@
 msgstr "ЗАГРУЗКА"
 
 #: ../hosts/hosttvplayercom.py:227
-#, fuzzy
 msgid "DRM protected streams are not supported."
-msgstr "Поток Silverlight не поддерживается."
+msgstr "DRM-защищённые потоки не поддерживаются."
 
 #: ../hosts/hostkijknl.py:248
-#, fuzzy
 msgid "DRM protection detected."
-msgstr "Элементы с защитой DRM."
+msgstr "Обнаружена защита DRM."
 
 #: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
 msgid "Darkgray"
-msgstr "Темно-серый"
+msgstr "Тёмно-серый"
 
 #: ../libs/beinmatch.py:167
 #, python-format
@@ -1387,107 +1347,104 @@
 "Data for link generation could not be found.\n"
 "Please report this problem to %s"
 msgstr ""
+"Данные для генерации ссылки не найдены.\n"
+"Пожалуйста, сообщите об этой проблеме в %s"
 
 #: ../hosts/hostbbcsport.py:405
 msgid "Data mismatch."
-msgstr ""
+msgstr "Несоответствие данных."
 
 #: ../hosts/hostplusdede.py:319
-#, fuzzy, python-format
+#, python-format
 msgid "Date: %s"
-msgstr "Последняя ошибка: %s"
+msgstr "Дата: %s"
 
 #: ../Web/webParts.py:111
 msgid "Debug file does not exist - nothing to delete"
-msgstr ""
+msgstr "Файл отладки не существует. Нечего удалять."
 
 #: ../Web/webSite.py:266
 msgid "Debug file does not exist - nothing to download"
-msgstr ""
+msgstr "Файл отладки не существует. Нечего скачать."
 
 #: ../Web/webParts.py:107
 msgid "Debug file has been deleted"
-msgstr ""
+msgstr "Файл отладки удален."
 
 #: ../components/iptvconfigmenu.py:508
 msgid "Debug logs"
-msgstr "Включить журнал диагностики"
+msgstr "Отчет об ошибках"
 
 #: ../Web/webParts.py:113
 msgid "Debug option is disabled - nothing to display"
-msgstr ""
+msgstr "Опция отладки отключена. Нечего отобразить."
 
 #: ../Web/webParts.py:115
 msgid "Debug option set to console - nothing to display"
-msgstr ""
+msgstr "Параметр отладки установлен в консоли. Нечего отобразить."
 
 #: ../Web/webParts.py:117
 msgid "Debug option set to debugfile, but file does not exist - nothing to display"
-msgstr ""
+msgstr "Опция отладки установлена в отладочный файл, но файл не существует. Нечего отобразить."
 
 #: ../hosts/hostsportitalia.py:77
 msgid "December"
-msgstr ""
+msgstr "Декабрь"
 
 #: ../components/iptvpictureplayer.py:332
 #, python-format
 msgid "Decode file [%s] problem."
-msgstr "Раскодировать файл [%s] проблема."
+msgstr "Проблема раскодировки файла [%s]."
 
 #: ../libs/youtube_dl/extractor/youtube.py:768
 msgid "Decrypt Signatures Error"
-msgstr ""
+msgstr "Ошибка расшифровки подписей"
 
 #: ../iptvupdate/updatemainwindow.py:878
 msgid "Decrypt archive."
-msgstr ""
+msgstr "Расшифровать архив."
 
 #: ../iptvupdate/updatemainwindow.py:978
-#, fuzzy
 msgid "Decryption the archive completed successfully."
-msgstr "Распаковка архива успешно завершена."
+msgstr "Расшифровка архива завершена успешно."
 
 #: ../components/iptvconfigmenu.py:83 ../components/iptvconfigmenu.py:88
 #: ../hosts/hosthdstreams.py:148 ../hosts/hostmyfreemp3.py:81
 #: ../hosts/hostfenixsite.py:260 ../hosts/hostfilmehdnet.py:78
 #: ../libs/sportstream365.py:21
-#, fuzzy
 msgid "Default"
 msgstr "По умолчанию"
 
 #: ../components/iptvconfigmenu.py:409
 msgid "Default captcha bypass (old routine)"
-msgstr ""
+msgstr "Обход капчи по умолчанию (старая процедура)"
 
 #: ../components/configextmovieplayer.py:335
 msgid "Default video aspect ratio"
-msgstr "    Видео пропорции по умолчанию"
+msgstr "    Соотношение сторон по умолчанию"
 
 #: ../components/configextmovieplayer.py:337
-#, fuzzy
 msgid "Default video policy for 16:9"
-msgstr "    Видео соотношение сторон по умолчанию"
+msgstr "    Политика видео по умолчанию для 16:9"
 
 #: ../components/configextmovieplayer.py:339
-#, fuzzy
 msgid "Default video policy for 4:3"
-msgstr "    Видео соотношение сторон по умолчанию"
+msgstr "    Политика видео по умолчанию для 4:3"
 
 #: ../hosts/hostbbciplayer.py:31 ../hosts/hostbbcsport.py:37
 #: ../hosts/hostkisscartoonme.py:28 ../hosts/hostsvtplayse.py:44
 #: ../hosts/hostyoutube.py:33
 msgid "Default video quality:"
-msgstr "Формат видео-по умолчанию:"
+msgstr "Качество видео по умолчанию:"
 
 #: ../Web/webParts.py:307 ../Web/webParts.py:316 ../Web/webParts.py:324
 #: ../Web/webParts.py:331
 msgid "Delete"
-msgstr ""
+msgstr "Удалить"
 
 #: ../Web/webParts.py:123
-#, fuzzy
 msgid "Delete log file"
-msgstr "Выбор файла с субтитрами"
+msgstr "Удалить файл журнала"
 
 #: ../components/iptvfavouriteswidgets.py:45
 msgid "Description:"
@@ -1495,16 +1452,16 @@
 
 #: ../setup/iptvsetupimpl.py:244
 msgid "Detection of MIPSEL FPU ABI."
-msgstr ""
+msgstr "Обнаружение MIPSEL FPU ABI."
 
 #: ../setup/iptvsetupimpl.py:168
 msgid "Detection of glibc version."
-msgstr "Обнаружение glibc версии."
+msgstr "Обнаружение версии glibc."
 
 #: ../setup/iptvsetuphelper.py:123
 #, python-format
 msgid "Detection of the \"%s\" utility."
-msgstr "Средства обнаружения \"%s\" утилита."
+msgstr "Обнаружение утилиты \"%s\"."
 
 #: ../setup/iptvsetupimpl.py:355
 msgid "Detection of the OpenSSL 1.0.0 version."
@@ -1516,11 +1473,11 @@
 
 #: ../setup/iptvsetupimpl.py:466
 msgid "Detection of the ffmpeg version."
-msgstr "Обнаружение FFmpeg версии."
+msgstr "Обнаружение версии FFmpeg."
 
 #: ../setup/iptvsetupimpl.py:430
 msgid "Detection of the gstreamer version."
-msgstr "Обнаружение GStreamer версии."
+msgstr "Обнаружение версии GStreamer."
 
 #: ../setup/iptvsetupimpl.py:193
 msgid "Detection of the platform."
@@ -1536,33 +1493,32 @@
 
 #: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:546
 msgid "Director:"
-msgstr ""
+msgstr "Режиссер:"
 
 #: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:547
 msgid "Directors:"
-msgstr ""
+msgstr "Режиссеры:"
 
 #: ../components/iptvplayerwidget.py:1677
 #, python-format
 msgid "Directory \"%s\" does not exists."
-msgstr ""
+msgstr "Каталог \"%s\" не существует."
 
 #: ../Web/webThreads.py:198
 msgid "Disable"
-msgstr ""
+msgstr "Запретить"
 
 #: ../components/iptvconfigmenu.py:363
 msgid "Disable live at plugin start"
 msgstr "Отключить просмотр каналов при старте плагина"
 
 #: ../components/playerselector.py:501
-#, fuzzy
 msgid "Disable not used services"
-msgstr "Удалить сервисы которые не работают"
+msgstr "Отключить неиспользуемые сервисы"
 
 #: ../components/iptvfavouriteswidgets.py:174
 msgid "Disable reordering"
-msgstr "Отключить перемещения"
+msgstr "Отключить перемещение"
 
 #: ../components/confighost.py:153 ../components/playerselector.py:474
 msgid "Disable reordering mode"
@@ -1570,17 +1526,15 @@
 
 #: ../components/playerselector.py:479
 msgid "Disable/Enable groups"
-msgstr ""
+msgstr "Отключить/включить группы"
 
 #: ../components/playerselector.py:477
-#, fuzzy
 msgid "Disable/Enable services"
-msgstr "Удалить сервисы которые не работают"
+msgstr "Отключить/включить сервисы"
 
 #: ../hosts/hostredbull.py:50
-#, fuzzy
 msgid "Discover"
-msgstr "Обложка"
+msgstr "Обнаружение"
 
 #: ../components/iptvconfigmenu.py:370
 msgid "Display thumbnails"
@@ -1588,49 +1542,46 @@
 
 #: ../hosts/hostdixmax.py:57
 msgid "DixMax Suggestions"
-msgstr ""
+msgstr "DixMax рекомендации"
 
 #: ../setup/iptvsetupimpl.py:53 ../setup/iptvsetupimpl.py:63
 #: ../setup/iptvsetupimpl.py:66 ../setup/iptvsetupimpl.py:73
 #: ../setup/iptvsetupimpl.py:76 ../setup/iptvsetupimpl.py:82
 #: ../setup/iptvsetupimpl.py:88
 msgid "Do not install (not recommended)"
-msgstr "Не устанавливайте (не рекомендуется)"
+msgstr "Не устанавливать (не рекомендуется)"
 
 #: ../components/e2ivk.py:634
 #, python-format
 msgid "Do you want to download \"%s\" Virtual Keyboard layout now?"
-msgstr ""
+msgstr "Хотите скачать раскладку виртуальной клавиатуры \"%s\" сейчас?"
 
 #: ../components/iptvsubdownloader.py:520
 msgid "Do you want to finish?"
-msgstr "Вы хотите, включить субтитры?"
+msgstr "Вы хотите закончить?"
 
 #: ../components/e2ivk.py:636
 #, python-format
 msgid "Do you want to try to re-download \"%s\" Virtual Keyboard layout?"
-msgstr ""
+msgstr "Вы хотите попробовать повторно загрузить \"%s\" виртуальную раскладку клавиатуры?"
 
 #: ../hosts/hostkinox.py:91
-#, fuzzy
 msgid "Documentaries"
-msgstr "Документы"
+msgstr "Документальное"
 
 #: ../hosts/hostlookmovieag.py:73
-#, fuzzy
 msgid "Documentary Movies"
-msgstr "Документы"
+msgstr "Документальные фильмы"
 
 #: ../components/iptvextmovieplayer.py:862
 #: ../components/iptvplayerwidget.py:171
-#, fuzzy
 msgid "Download"
 msgstr "Загрузить"
 
 #: ../hosts/hostplayrtsiw.py:506 ../hosts/hostplayrtsiw.py:507
-#, fuzzy, python-format
+#, python-format
 msgid "Download %s"
-msgstr "Загрузить"
+msgstr "Загрузить %s"
 
 #: ../iptvdm/iptvdmui.py:260 ../Web/webParts.py:315 ../Web/webParts.py:323
 #: ../Web/webParts.py:330
@@ -1647,7 +1598,7 @@
 " Неправильный адрес ('%r')."
 
 #: ../components/e2isimpledownloader.py:108
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Download can not be started.\n"
 "Downloader %s not working correctly.\n"
@@ -1655,7 +1606,7 @@
 msgstr ""
 "Загрузка не может быть начата.\n"
 "Загрузчик %s работает неправильно.\n"
-"Статус[%s]"
+"Последняя ошибка \"%s (%s)\"."
 
 #: ../components/iptvsubsimpledownloader.py:138
 #, python-format
@@ -1669,22 +1620,22 @@
 "Статус[%s]"
 
 #: ../components/e2isimpledownloader.py:99
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Download can not be started.\n"
 "Incorrect address \"%r\"."
 msgstr ""
 "Загрузка не может быть начата.\n"
-" Неправильный адрес ('%r')."
+" Неправильный адрес \"%r\"."
 
 #: ../components/e2isimpledownloader.py:113
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Download failed.\n"
 "Last error \"%s (%s)\"."
 msgstr ""
 "Ошибка загрузки.\n"
-"Статус[%s]"
+"Последняя ошибка \"%s (%s)\"."
 
 #: ../components/iptvsubsimpledownloader.py:142
 #, python-format
@@ -1696,29 +1647,26 @@
 "Статус[%s]"
 
 #: ../Web/webParts.py:119 ../Web/webParts.py:134
-#, fuzzy
 msgid "Download log file"
-msgstr "Загрузить снова"
+msgstr "Скачать файл журнала"
 
 #: ../components/iptvplayerwidget.py:611 ../components/playerselector.py:462
 #: ../components/playerselector.py:475 ../Web/webParts.py:63
 #: ../Web/webParts.py:80
-#, fuzzy
 msgid "Download manager"
 msgstr "Менеджер загрузок"
 
 #: ../Web/webParts.py:240
 msgid "Download manager is not initialized"
-msgstr ""
+msgstr "Менеджер загрузок не инициализирован."
 
 #: ../components/iptvsubdownloader.py:508
-#, fuzzy
 msgid "Download subtiles failed."
-msgstr "Загрузить субтитры %s"
+msgstr "Загрузка субтитров не удалась."
 
 #: ../components/iptvextmovieplayer.py:859
 msgid "Download suggested"
-msgstr "Можно загружать"
+msgstr "Предлагается скачать"
 
 #: ../components/iptvplayerwidget.py:1819
 #: ../components/iptvsubdownloader.py:465
@@ -1732,12 +1680,12 @@
 "Do you want to retry?"
 msgstr ""
 "Загрузка \"%s\" не удалось. \n"
-"Вы хотите, повторить попытку?"
+"Вы хотите повторить попытку?"
 
 #: ../setup/iptvsetuphelper.py:124
-#, fuzzy, python-format
+#, python-format
 msgid "Downloading \"%s\"."
-msgstr "Загрузка \"%s\" ."
+msgstr "Загрузка \"%s\"."
 
 #: ../iptvupdate/updatemainwindow.py:376
 msgid "Downloading an update packet."
@@ -1761,7 +1709,7 @@
 " The address ('%r') is incorrect."
 msgstr ""
 "Загрузка не может быть начата.\n"
-" Адресс ('%r') неверен."
+"Адрес ('%r') неверный."
 
 #: ../components/iptvarticlerichvisualizer.py:207
 #: ../components/iptvpictureplayer.py:277
@@ -1772,7 +1720,7 @@
 " Status[%s]"
 msgstr ""
 "Загрузка невозможна.\n"
-"Загрузчик [%s] не работает должным образом.\n"
+"Загрузчик [%s] работает неправильно.\n"
 "Статус[%s]"
 
 #: ../components/iptvarticlerichvisualizer.py:199
@@ -1793,21 +1741,21 @@
 msgstr "Проблема с загрузкой файла [%s]."
 
 #: ../components/e2isimpledownloader.py:93
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Downloading file:\n"
 "%r."
-msgstr "Проблема с загрузкой файла [%s]."
+msgstr ""
+"Загрузка файла:\n"
+"%r."
 
 #: ../iptvupdate/updatemainwindow.py:852
-#, fuzzy
 msgid "Downloading graphics package."
-msgstr "Загрузка пакета обновления."
+msgstr "Загрузка графического пакета."
 
 #: ../iptvupdate/updatemainwindow.py:864
-#, fuzzy
 msgid "Downloading icons package."
-msgstr "Загрузка пакета обновления."
+msgstr "Загрузка пакета иконок."
 
 #: ../components/iptvsubsimpledownloader.py:124
 #, python-format
@@ -1821,54 +1769,49 @@
 #: ../hosts/hostlocalmedia.py:120 ../iptvdm/iptvdmui.py:77
 #: ../Web/webParts.py:255
 msgid "Downloads"
-msgstr "Загрузить"
+msgstr "Загрузки"
 
 #: ../components/iptvconfigmenu.py:404
-#, fuzzy
 msgid "Downloads location"
-msgstr "Загрузить снова"
+msgstr "Папка загрузок"
 
 #: ../hosts/hostplusdede.py:323
-#, fuzzy, python-format
+#, python-format
 msgid "Downloads: %s"
-msgstr "Загрузить"
+msgstr "Скачиваний: %s"
 
 #: ../hosts/hostlookmovieag.py:72
-#, fuzzy
 msgid "Drama Movies"
-msgstr "HD Фильмы"
+msgstr "Драматическое кино"
 
 #: ../hosts/hostyifytv.py:83
-#, fuzzy
 msgid "Dramas"
-msgstr "Сериал"
+msgstr "Драмы"
 
 #: ../setup/iptvsetupimpl.py:992
 msgid "Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.\n"
-msgstr "Duktape - это встраиваемый движок Javascript с акцентом на портативность и компактность.\n"
+msgstr "Duktape это встраиваемый движок Javascript с акцентом на портативность и компактность.\n"
 
 #: ../hosts/hostcartoonhd.py:507 ../hosts/hostdplayit.py:349
 #: ../hosts/hostekinomaniak.py:273 ../hosts/hostekstraklasatv.py:162
 #: ../hosts/hosteurosportplayer.py:266 ../hosts/hostraiplay.py:611
 #: ../hosts/hostted.py:355
-#, fuzzy
 msgid "Duration"
-msgstr "Конфигурация"
+msgstr "Длительность"
 
 #: ../hosts/hostofficialfilmillimite.py:251 ../hosts/hostfilma24io.py:229
-#, fuzzy
 msgid "Duration:"
-msgstr "Описание:"
+msgstr "Длительность:"
 
 #: ../hosts/hostuktvplay.py:199 ../libs/youtubeparser.py:287
-#, fuzzy, python-format
+#, python-format
 msgid "Duration: %s"
-msgstr "Станции"
+msgstr "Длительность: %s"
 
 #: ../hosts/hostfrancetv.py:413 ../hosts/hostsportitalia.py:207
 #, python-brace-format
 msgid "Duration: {0}"
-msgstr ""
+msgstr "Длительность: {0}"
 
 #: ../iptvupdate/updatemainwindow.py:81
 msgid "During processing, please do not interrupt."
@@ -1876,12 +1819,11 @@
 
 #: ../iptvupdate/updatemainwindow.py:82
 msgid "During processing, please wait."
-msgstr "Идет обработка, пожалуйста, подождите."
+msgstr "Идет обработка. Пожалуйста, подождите."
 
 #: ../components/iptvplayerwidget.py:690
-#, fuzzy
 msgid "E-mail: "
-msgstr "Эл. адрес"
+msgstr "Эл. адрес: "
 
 #: ../iptvupdate/updatemainwindow.py:322
 #, python-format
@@ -1889,39 +1831,37 @@
 "E2 GUI restart after IPTVPlayer update to version[%s].\n"
 "\n"
 msgstr ""
-"Перезагрузить eнигму после обновления IPTV Плеера до версии[%s].\n"
+"Перезагрузить Enigma после обновления IPTV-плеера до версии[%s].\n"
 "\n"
 
 #: ../components/configbase.py:80 ../components/configbase.py:129
 #: ../components/iptvconfigmenu.py:311
-#, fuzzy
 msgid "E2iPlayer - settings"
-msgstr "IPTV Плеер - Настройки"
+msgstr "E2iPlayer - настройки"
 
 #: ../components/configgroups.py:36
 msgid "E2iPlayer enable/disabled groups"
-msgstr ""
+msgstr "E2iPlayer - включить/отключить группы"
 
 #: ../Web/webParts.py:461 ../Web/webParts.py:502
-#, fuzzy
 msgid "ERROR:"
-msgstr "ОШИБКА"
+msgstr "ОШИБКА:"
 
 #: ../components/iptvextmovieplayer.py:1485
 msgid ""
 "ERROR: pipeline could not be constructed: no element \"playbin2\" \n"
 "Please check if gstreamer plugins are available in your system."
 msgstr ""
-"ОШИБКА: Не удалось создать:, отсутствие контроля: отсутствие элемента \"playbin2 \" \n"
-"Проверьте установлены GStreamer плагины в вашей системе."
+"ОШИБКА: Не удалось создать:, отсутствие контроля: отсутствие элемента \"playbin2\".\n"
+"Проверьте, установлен ли GStreamer плагин в Вашей системе."
 
 #: ../components/iptvplayerwidget.py:594 ../components/iptvplayerwidget.py:595
 msgid "Edit favourites"
-msgstr "Редактировать избранное"
+msgstr "Редактор избранного"
 
 #: ../hosts/hostorthobulletscom.py:80
 msgid "Educational Animation"
-msgstr ""
+msgstr "Обучающая анимация"
 
 #: ../hosts/hostrtlmost.py:45 ../libs/edemtv.py:39 ../libs/ustvnow.py:40
 msgid "Email"
@@ -1929,7 +1869,7 @@
 
 #: ../Web/webThreads.py:200
 msgid "Enable"
-msgstr ""
+msgstr "Включить"
 
 #: ../components/iptvfavouriteswidgets.py:173
 msgid "Enable reordering"
@@ -1945,6 +1885,8 @@
 "Encryption function body extraction failed!\n"
 "Please report the problem to %s"
 msgstr ""
+"Ошибка извлечения тела функции шифрования!\n"
+"Пожалуйста, сообщите о проблеме в %s."
 
 #: ../libs/youtube_dl/extractor/youtube.py:123
 #, python-format
@@ -1952,16 +1894,17 @@
 "Encryption function name extraction failed!\n"
 "Please report the problem to %s"
 msgstr ""
+"Ошибка извлечения имени функции шифрования!!\n"
+"Пожалуйста, сообщите о проблеме в %s."
 
 #: ../iptvupdate/updatemainwindow.py:939
-#, fuzzy
 msgid "Encryption key was downloaded successfully."
-msgstr "Обновленный пакет был успешно загружен."
+msgstr "Ключ шифрования был успешно загружен."
 
 #: ../hosts/hosthdfull.py:34 ../hosts/hostmovie4kto.py:34
 #: ../hosts/hostngolos.py:25
 msgid "English"
-msgstr "Английский"
+msgstr "Английские"
 
 #: ../components/configbase.py:283
 msgid "Enter a value"
@@ -1969,7 +1912,7 @@
 
 #: ../components/iptvdirbrowser.py:263
 msgid "Enter name"
-msgstr "Введите код"
+msgstr "Введите имя"
 
 #: ../components/iptvconfigmenu.py:676
 msgid "Enter new pin"
@@ -1987,61 +1930,58 @@
 
 #: ../components/e2ivk.py:310
 msgid "Enter the text"
-msgstr ""
+msgstr "Введите текст"
 
 #: ../hosts/hostkijknl.py:260
 msgid "Entitlement parsing error."
-msgstr ""
+msgstr "Ошибка синтаксического анализа прав."
 
 #: ../hosts/hostdplayit.py:369 ../hosts/hostfilmehdnet.py:181
 #: ../hosts/hostfilmehdnet.py:184 ../hosts/hostfilmoviplex.py:344
 #: ../libs/moonwalkcc.py:292 ../libs/moonwalkcc.py:302
 #: ../subproviders/subprov_napiprojektpl.py:232
-#, fuzzy
 msgid "Episode"
-msgstr "Эпизоды"
+msgstr "Эпизод"
 
 #: ../hosts/hostwatchcartoononline.py:349
-#, fuzzy
 msgid "Episode Search"
-msgstr "Эпизоды"
+msgstr "Поиск серии"
 
 #: ../hosts/hostcartoonhd.py:503
-#, fuzzy
 msgid "Episode title"
-msgstr "Эпизоды"
+msgstr "Название эпизода"
 
 #: ../hosts/hostkijknl.py:59
 msgid "Episodes"
 msgstr "Эпизоды"
 
 #: ../hosts/hostlocalmedia.py:666
-#, fuzzy, python-format
+#, python-format
 msgid "Error code: %s\n"
-msgstr "Распакуйте код ошибки[%s]."
+msgstr "Код ошибки: %s\n"
 
 #: ../components/recaptcha_v2myjd_widget.py:130
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Error code: %s\n"
 "Error message: %s"
 msgstr ""
-"Сообщение об ошибке: \"%s\".\n"
-"Код ошибки: \"%s\"."
+"Код ошибки: %s\n"
+"Сообщение об ошибке: %s"
 
 #: ../hosts/hostfilmynadzis.py:73 ../hosts/hostbbcsport.py:404
 #: ../hosts/hosteurosportplayer.py:548
 msgid "Error communicating with the server."
-msgstr ""
+msgstr "Ошибка соединения с сервером."
 
 #: ../tools/iptvfavourites.py:222
-#, fuzzy, python-format
+#, python-format
 msgid "Error deleting file \"%s\".\n"
-msgstr "Ошибка удаления файлов \"%s\" .\n"
+msgstr "Ошибка удаления файла \"%s\".\n"
 
 #: ../Web/webParts.py:109
 msgid "Error during deletion of the debug file."
-msgstr ""
+msgstr "Ошибка во время загрузки."
 
 #: ../subproviders/subprov_opensubtitlesorg.py:203
 #: ../subproviders/subprov_opensubtitlesorg.py:205
@@ -2054,33 +1994,28 @@
 "Код ошибки: \"%s\"."
 
 #: ../hosts/hostlocalmedia.py:666
-#, fuzzy, python-format
+#, python-format
 msgid "Error message: %s\n"
-msgstr ""
-"Сообщение об ошибке: \"%s\".\n"
-"Код ошибки: \"%s\"."
+msgstr "Сообщение об ошибке: %s\n"
 
 #: ../components/e2ivksuggestion.py:95
-#, fuzzy
 msgid "Error occurs"
-msgstr ""
-"Произошла ошибка.\n"
-"[%s]"
+msgstr "Произошла ошибка"
 
 #: ../iptvdm/iptvbuffui.py:256 ../iptvdm/iptvbuffui.py:562
 msgid "Error occurs during download."
-msgstr "Ошибка загрузки."
+msgstr "Ошибка во время загрузки."
 
 #: ../tools/iptvfavourites.py:193 ../tools/iptvfavourites.py:209
-#, fuzzy, python-format
+#, python-format
 msgid "Error reading file \"%s\".\n"
-msgstr "Ошибка чтения файла \"%s\" .\n"
+msgstr "Ошибка чтения файла \"%s\".\n"
 
 #: ../tools/iptvfavourites.py:239 ../tools/iptvfavourites.py:253
 #: ../tools/iptvhostgroups.py:381 ../tools/iptvhostgroups.py:464
-#, fuzzy, python-format
+#, python-format
 msgid "Error writing file \"%s\".\n"
-msgstr "Ошибка записи файла \"%s\" .\n"
+msgstr "Ошибка записи файла \"%s\".\n"
 
 #: ../iptvupdate/updatemainwindow.py:990
 #, python-format
@@ -2088,18 +2023,20 @@
 "Error. Return code [%d]\n"
 "%s."
 msgstr ""
+"Ошибка. Код возврата [%d]\n"
+"%s."
 
 #: ../hosts/hostorthobulletscom.py:81
 msgid "Ethical & Legal"
-msgstr ""
+msgstr "Этические и юридические"
 
 #: ../hosts/hostorthobulletscom.py:82
 msgid "Exam Review"
-msgstr ""
+msgstr "Обзор экзамена"
 
 #: ../components/iptvdirbrowser.py:270
 msgid "Exception occurs"
-msgstr ""
+msgstr "Исключение происходит"
 
 #: ../iptvupdate/updatemainwindow.py:379
 msgid "Executing user scripts."
@@ -2111,34 +2048,31 @@
 
 #: ../components/iptvconfigmenu.py:194
 msgid "External free, then paid"
-msgstr ""
+msgstr "Внешний бесплатный, затем платный"
 
 #: ../components/iptvconfigmenu.py:501
 msgid "External movie player config"
-msgstr "Параметры внешнего плеера (Нажмите OK)"
+msgstr "Параметры внешнего плеера (нажмите OK)"
 
 #: ../components/iptvconfigmenu.py:194
-#, fuzzy
 msgid "External paid"
-msgstr "Внешний eplayer3"
+msgstr "Внешний платный"
 
 #: ../iptvupdate/updatemainwindow.py:377
 msgid "Extracting an update packet."
 msgstr "Извлечение пакета обновления."
 
 #: ../iptvupdate/updatemainwindow.py:853
-#, fuzzy
 msgid "Extracting graphics package."
-msgstr "Извлечение пакета обновления."
+msgstr "Извлечение графического пакета."
 
 #: ../iptvupdate/updatemainwindow.py:865
-#, fuzzy
 msgid "Extracting icons package."
-msgstr "Извлечение пакета обновления."
+msgstr "Извлечение пакета значков."
 
 #: ../libs/filmonapi.py:90
 msgid "FREE"
-msgstr ""
+msgstr "БЕСПЛАТНЫЕ"
 
 #: ../hosts/hostfreediscpl.py:130 ../hosts/hostefilmytv.py:554
 #: ../hosts/hostmooviecc.py:440 ../hosts/hostplusdede.py:549
@@ -2152,7 +2086,7 @@
 #: ../libs/recaptcha_v2.py:114 ../libs/urlparser.py:4261
 #, fuzzy, python-format
 msgid "Fail to get \"%s\"."
-msgstr "Не удалось получить \"%s\""
+msgstr "Не удалось получить \"%s\"."
 
 #: ../hosts/hoststreamliveto.py:267
 msgid "Fail to get captcha data."
@@ -2160,15 +2094,15 @@
 
 #: ../subproviders/subprov_napisy24pl.py:80
 #: ../subproviders/subprov_opensubtitlesorg2.py:132
-#, fuzzy, python-format
+#, python-format
 msgid "Failed to connect to server \"%s\"."
-msgstr "Не удалось открыть файл \"%s\"."
+msgstr "Не удалось подключиться к серверу \"%s\"."
 
 #: ../components/isubprovider.py:597 ../subproviders/subprov_napisy24pl.py:366
 #: ../subproviders/subprov_popcornsubtitles.py:150
 #, python-format
 msgid "Failed to convert the file \"%s\" to UTF-8."
-msgstr "Не удалось преобразовать файлы \"%s\" в UTF-8."
+msgstr "Не удалось преобразовать файл \"%s\" в UTF-8."
 
 #: ../components/isubprovider.py:524
 #, python-format
@@ -2190,13 +2124,13 @@
 #: ../subproviders/subprov_opensubtitlesorg.py:365
 #: ../subproviders/subprov_opensubtitlesorg3.py:276
 msgid "Failed to gzip."
-msgstr "Не удалось gzip."
+msgstr "Не удалось выполнить gzip."
 
 #: ../subproviders/subprov_napisy24pl.py:94
 #: ../subproviders/subprov_opensubtitlesorg2.py:158
 #, python-format
 msgid "Failed to log in user \"%s\". Please check your login and password."
-msgstr ""
+msgstr "Не удалось войти в систему пользователя \"%s\". Проверьте свой логин и пароль."
 
 #: ../components/isubprovider.py:600 ../subproviders/subprov_napisy24pl.py:369
 #: ../subproviders/subprov_popcornsubtitles.py:153
@@ -2205,9 +2139,8 @@
 msgstr "Не удалось открыть файл \"%s\"."
 
 #: ../subproviders/subprov_popcornsubtitles.py:98
-#, fuzzy
 msgid "Failed to page with subtitle link."
-msgstr "Не удалось загрузить субтитры."
+msgstr "Не удалось создать страницу со ссылкой на субтитры."
 
 #: ../components/isubprovider.py:487 ../subproviders/subprov_napisy24pl.py:310
 #: ../subproviders/subprov_opensubtitlesorg.py:384
@@ -2224,19 +2157,17 @@
 msgstr "Не удалось записать файл \"%s\"."
 
 #: ../components/iptvplayerwidget.py:1456
-#, fuzzy, python-format
+#, python-format
 msgid "Failed: %s"
-msgstr "Не удалось получить \"%s\""
+msgstr "Не удалось: %s"
 
 #: ../hosts/hostlookmovieag.py:75
-#, fuzzy
 msgid "Family Movies"
-msgstr "HD Фильмы"
+msgstr "Семейное кино"
 
 #: ../hosts/hostlookmovieag.py:77
-#, fuzzy
 msgid "Fantasy Movies"
-msgstr "Последние фильмы"
+msgstr "Фэнтезийные фильмы"
 
 #: ../setup/iptvsetupimpl.py:348
 msgid ""
@@ -2256,21 +2187,20 @@
 
 #: ../components/iptvextmovieplayer.py:2210
 msgid "Fatal error: consoleWrite failed!"
-msgstr "Фатальная ошибка: Консоль записи произошел сбой!"
+msgstr "Фатальная ошибка: произошел сбой записи в консоль!"
 
 #: ../hosts/hostfavourites.py:38
-#, fuzzy
 msgid "Favourites"
 msgstr "Избранное"
 
 #: ../components/iptvfavouriteswidgets.py:177
 #: ../components/iptvfavouriteswidgets.py:263
 msgid "Favourites groups"
-msgstr "Группа Избранное"
+msgstr "Избранные группы"
 
 #: ../components/iptvfavouriteswidgets.py:153
 msgid "Favourites manager"
-msgstr "Избранное менеджер"
+msgstr "Менеджер избранного"
 
 #: ../hosts/hostbbciplayer.py:206 ../hosts/hostmovie4kto.py:77
 msgid "Featured"
@@ -2278,12 +2208,12 @@
 
 #: ../hosts/hostsportitalia.py:77
 msgid "February"
-msgstr ""
+msgstr "Февраль"
 
 #: ../hosts/hostlocalmedia.py:649
-#, fuzzy, python-format
+#, python-format
 msgid "File \"%s\" already exists"
-msgstr "Файл \"%s\" уже существует!"
+msgstr "Файл \"%s\" уже существует"
 
 #: ../hosts/hostlocalmedia.py:632
 #, python-format
@@ -2291,9 +2221,8 @@
 msgstr "Файл \"%s\" уже существует!"
 
 #: ../libs/urlparser.py:2741
-#, fuzzy
 msgid "File Not Found."
-msgstr "Субтитры не найдены."
+msgstr "Файл не найден."
 
 #: ../iptvupdate/updatemainwindow.py:311
 #, python-format
@@ -2303,7 +2232,7 @@
 #: ../components/iptvplayerwidget.py:1708
 #, python-format
 msgid "File [%s] was added to downloading queue."
-msgstr "Файл [%s] был добавлен в загрузку."
+msgstr "Файл [%s] был добавлен в очередь загрузок."
 
 #: ../components/iptvplayerwidget.py:1702
 #, python-format
@@ -2311,51 +2240,51 @@
 msgstr "Файл не может быть загружен. Протокол [%s] не поддерживается"
 
 #: ../iptvupdate/updatemainwindow.py:728
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "File not found:\n"
 "[%s]."
-msgstr "Субтитры не найдены."
+msgstr ""
+"Файл не найден:\n"
+"[%s]."
 
 #: ../hosts/hostfilmstreamhdit.py:35
-#, fuzzy
 msgid "Film Archive"
-msgstr "Архив"
+msgstr "Архив фильмов"
 
 #: ../suggestions/filmstarts.py:17
 msgid "Filmstarts Suggestions"
-msgstr ""
+msgstr "Предложения по фильмам"
 
 #: ../suggestions/filmweb.py:17
 msgid "Filmweb Suggestions"
-msgstr ""
+msgstr "Предложения по фильму"
 
 #: ../hosts/hostlookmovieag.py:62
-#, fuzzy
 msgid "Filter By Year"
-msgstr "По годам"
+msgstr "Фильтр по год"
 
 #: ../hosts/hostcimaclubcom.py:131 ../hosts/hostdixmax.py:176
 #: ../hosts/hostmovs4ucom.py:42 ../hosts/hostnuteczki.py:93
 #: ../hosts/hostfilmixco.py:128
 msgid "Filters"
-msgstr ""
+msgstr "Фильтры"
 
 #: ../components/iptvconfigmenu.py:448 ../components/iptvconfigmenu.py:459
 #: ../components/iptvconfigmenu.py:470 ../components/iptvconfigmenu.py:481
 #: ../components/iptvconfigmenu.py:491
 msgid "First movie player in buffering mode"
-msgstr "Выбор Первого плеера с режимом буферизации"
+msgstr "Первый плеер в режиме буферизации"
 
 #: ../components/iptvconfigmenu.py:443 ../components/iptvconfigmenu.py:454
 #: ../components/iptvconfigmenu.py:465 ../components/iptvconfigmenu.py:476
 #: ../components/iptvconfigmenu.py:486
 msgid "First movie player without buffering mode"
-msgstr "Выбор Первого плеера"
+msgstr "Первый плеер без режима буферизации"
 
 #: ../setup/iptvsetupimpl.py:1192
 msgid "Fluendo mpegdemux for GSTREAMER 0.10"
-msgstr "Сделать текучий mpegdemux для GSTREAMER 0.10"
+msgstr "Fluendo mpegdemux для GSTREAMER 0.10"
 
 #: ../components/iptvconfigmenu.py:391
 msgid "Folder for cache data"
@@ -2368,11 +2297,11 @@
 #: ../components/iptvplayerwidget.py:1214
 #: ../components/iptvplayerwidget.py:1282
 msgid "Following host are broken or additional python modules are needed."
-msgstr "Хост не работает, или не хватает дополнительных модулей Python."
+msgstr "Следующий хост не работает или необходимы дополнительные модули Python."
 
 #: ../hosts/hostorthobulletscom.py:114
 msgid "Foot & Ankle"
-msgstr ""
+msgstr "Стопы и лодыжки"
 
 #: ../components/iptvplayerwidget.py:1594
 msgid "Format 'wmv' blocked in configuration."
@@ -2381,15 +2310,15 @@
 #: ../hosts/hostekstraklasatv.py:171 ../hosts/hoststreamliveto.py:136
 #: ../hosts/hosttvplayercom.py:126
 msgid "Free"
-msgstr ""
+msgstr "Свободный"
 
 #: ../hosts/hostmovie4kto.py:34
 msgid "French"
-msgstr "Франция"
+msgstr "Французские"
 
 #: ../hosts/hostsportitalia.py:78
 msgid "Friday"
-msgstr ""
+msgstr "Пятница"
 
 #: ../components/configextmovieplayer.py:86
 #: ../components/configextmovieplayer.py:98
@@ -2401,16 +2330,16 @@
 
 #: ../hosts/host123movieshd.py:185
 msgid "Functionality protected by Google reCAPTCHA!"
-msgstr ""
+msgstr "Функциональность защищена Google reCAPTCHA!"
 
 #: ../setup/iptvsetupimpl.py:1237
 msgid "GST-IFDSRC for GSTREAMER 1.X"
 msgstr "GST-IFDSRC для GSTREAMER 1.X"
 
 #: ../hosts/hosttwitchtv.py:482
-#, fuzzy, python-format
+#, python-format
 msgid "Game: %s"
-msgstr "Игры"
+msgstr "Игры: %s"
 
 #: ../hosts/hosttwitchtv.py:150 ../hosts/hosttwitchtv.py:634
 msgid "Games"
@@ -2418,29 +2347,28 @@
 
 #: ../hosts/hosthitboxtv.py:41
 msgid "Games played Now"
-msgstr ""
+msgstr "Воспрозводимые сейчас игры"
 
 #: ../hosts/hostorthobulletscom.py:119
 msgid "General"
-msgstr ""
+msgstr "Главное"
 
 #: ../hosts/hostkinotan.py:47
 msgid "Genre selection"
 msgstr "Выбор жанра"
 
 #: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:543
-#, fuzzy
 msgid "Genre:"
-msgstr "Жанр: "
+msgstr "Жанр:"
 
 #: ../hosts/hostgamatocom.py:70
 msgid "Genre: "
 msgstr "Жанр: "
 
 #: ../hosts/hostshoutcast.py:124
-#, fuzzy, python-format
+#, python-format
 msgid "Genre: %s"
-msgstr "Жанр: "
+msgstr "Жанр: %s"
 
 #: ../hosts/hostanimeodcinki.py:44 ../hosts/hostbsto.py:83
 #: ../hosts/hostekinomaniak.py:274 ../hosts/hostlookmovieag.py:63
@@ -2454,9 +2382,8 @@
 
 #: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:544
 #: ../hosts/hostofficialfilmillimite.py:259 ../hosts/hostfilma24io.py:237
-#, fuzzy
 msgid "Genres:"
-msgstr "Жанры"
+msgstr "Жанры:"
 
 #: ../hosts/hostdrdk.py:27
 msgid "Geolocation IP:"
@@ -2464,11 +2391,11 @@
 
 #: ../hosts/hostardmediathek.py:402 ../hosts/hostmovie4kto.py:34
 msgid "German"
-msgstr "Германия"
+msgstr "Немецкие"
 
 #: ../components/iptvconfigmenu.py:387
 msgid "German proxy server url"
-msgstr "Адрес немецкого прокси-сервер"
+msgstr "Адрес немецкого прокси-сервера"
 
 #: ../libs/ustvnow.py:43
 msgid "Get EPG"
@@ -2476,7 +2403,7 @@
 
 #: ../iptvupdate/updatemainwindow.py:877
 msgid "Get decryption key."
-msgstr ""
+msgstr "Получить ключ расшифровки."
 
 #: ../subproviders/subprov_opensubtitlesorg.py:230
 msgid "Get languages failed!"
@@ -2485,29 +2412,25 @@
 #: ../libs/videostar.py:109
 #, python-format
 msgid "Get page \"%s\" error."
-msgstr ""
+msgstr "Ошибка получения страницы \"%s\"."
 
 #: ../subproviders/subprov_opensubtitlesorg.py:203
-#, fuzzy
 msgid "Get token failed!"
-msgstr "Получить языки не удалось!"
+msgstr "Не удалось получить значение!"
 
 #: ../iptvupdate/updatemainwindow.py:730
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "GitLab version from {0} was downloaded successfully."
-msgstr "Обновленный пакет был успешно загружен."
+msgstr "Версия GitLab из {0} была успешно загружена."
 
 #: ../components/iptvconfigmenu.py:83
 msgid "Gitlab"
-msgstr ""
+msgstr "Gitlab"
 
 #: ../components/captcha_helper.py:112 ../components/captcha_helper.py:167
 #: ../components/recaptcha_v2helper.py:56
-#, fuzzy
 msgid "Go to the host configuration available under blue button."
-msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+msgstr "Перейдите в конфигурацию хоста, доступную по синей кнопке."
 
 #: ../hosts/hostourmatchnet.py:39
 msgid "Goal Of The Month"
@@ -2515,11 +2438,11 @@
 
 #: ../suggestions/google.py:18
 msgid "Google Suggestions"
-msgstr ""
+msgstr "Предложения Google"
 
 #: ../components/iptvconfigmenu.py:375
 msgid "Graphic services selector"
-msgstr "Селектор Графические услуги"
+msgstr "Графический селектор сервисов"
 
 #: ../components/iptvfavouriteswidgets.py:59 ../tools/iptvfavourites.py:87
 #, python-format
@@ -2533,7 +2456,7 @@
 
 #: ../hosts/hosturllist.py:33
 msgid "Group links into categories: "
-msgstr "Группа, ссылки по категориям: "
+msgstr "Групповые ссылки в категориях: "
 
 #: ../tools/iptvfavourites.py:176
 #, python-format
@@ -2541,62 +2464,60 @@
 msgstr "Группа с идентификатором[%s] не найдена."
 
 #: ../hosts/hostvimeo.py:396
-#, fuzzy
 msgid "Groups"
-msgstr "Группа"
+msgstr "Группы"
 
 #: ../libs/videostar.py:210
 #, python-format
 msgid "Guest timeout: %s"
-msgstr ""
+msgstr "Тайм-аут гостя: %s"
 
 #: ../hosts/hosthdfull.py:59
 msgid "HDFull Suggestions"
-msgstr ""
+msgstr "Предложения HDFull"
 
 #: ../hosts/hostsvtplayse.py:38 ../hosts/hosttvnowde.py:29
 #: ../libs/youtube_dl/extractor/bbc.py:24
 msgid "HLS/m3u8"
-msgstr ""
+msgstr "HLS/m3u8"
 
 #: ../libs/pCommon.py:341
 #, python-format
 msgid "HTTPS connection error \"%s\"\n"
-msgstr ""
+msgstr "Ошибка подключения HTTPS \"%s\"\n"
 
 #: ../hosts/hostorthobulletscom.py:113
 msgid "Hand"
-msgstr ""
+msgstr "Рука"
 
 #: ../components/iptvconfigmenu.py:55
 msgid "Hardware floating point"
-msgstr ""
+msgstr "Аппаратная плавающая точка"
 
 #: ../components/playerselector.py:485
 #, python-format
 msgid "Hide \"%s\" group"
-msgstr ""
+msgstr "Скрыть группу \"%s\""
 
 #: ../libs/weebtv.py:31
 msgid "High (or HD)"
-msgstr "Высокий (или HD)"
+msgstr "Высокое или HD"
 
-#: ../hosts/hostogladajto.py:80 ../hosts/hosttwitchtv.py:106
+#: ../hosts/hostogladajto.py:61 ../hosts/hosttwitchtv.py:106
 msgid "Highlights"
-msgstr ""
+msgstr "Особенности"
 
 #: ../hosts/hostgreekdocumentaries3.py:36
 msgid "History"
 msgstr "История"
 
 #: ../hosts/hostlookmovieag.py:76
-#, fuzzy
 msgid "History Movies"
-msgstr "HD Фильмы"
+msgstr "Исторические фильмы"
 
 #: ../hosts/hostyoutube.py:57
 msgid "History of searched phrases."
-msgstr "История поиска."
+msgstr "История найденных фраз."
 
 #: ../hosts/host9anime.py:44 ../hosts/hostfilmstreamhdit.py:34
 #: ../hosts/hostcb01uno.py:57 ../hosts/hostkisscartoonme.py:44
@@ -2610,19 +2531,18 @@
 msgstr "Главная страница"
 
 #: ../hosts/hostlookmovieag.py:78
-#, fuzzy
 msgid "Horror Movies"
-msgstr "HD Фильмы"
+msgstr "Фильмы ужасов"
 
 #: ../libs/urlparser.py:727
-#, fuzzy, python-format
+#, python-format
 msgid "Hosting \"%s\" not supported."
-msgstr "Поток Silverlight не поддерживается."
+msgstr "Хостинг \"%s\" не поддерживается."
 
 #: ../libs/urlparser.py:729
-#, fuzzy, python-format
+#, python-format
 msgid "Hosting \"%s\" unknown."
-msgstr "Установка \"%s\" ."
+msgstr "Хостинг \"%s\" неизвестен."
 
 #: ../hosts/hosturllist.py:93 ../hosts/hosturllist.py:105
 #, python-format
@@ -2630,22 +2550,20 @@
 msgstr "Хостинг: %s, %s"
 
 #: ../Web/webParts.py:192
-#, fuzzy
 msgid "Hosts settings"
-msgstr "Настройки E2"
+msgstr "Настройки хостов"
 
 #: ../hosts/hostorthobulletscom.py:83
 msgid "Humanitarian"
-msgstr ""
+msgstr "Гуманитарный"
 
 #: ../suggestions/imdb.py:17
 msgid "IMDb Suggestions"
-msgstr ""
+msgstr "Предложения по IMDb"
 
 #: ../hosts/hostvidcorncom.py:495
-#, fuzzy
 msgid "IMDb rating"
-msgstr "СМС голосование"
+msgstr "Рейтинг IMDb"
 
 #: ../iptvupdate/updatemainwindow.py:252 ../iptvupdate/updatemainwindow.py:340
 #: ../iptvupdate/updatemainwindow.py:343
@@ -2658,8 +2576,9 @@
 "Such as downloading and installation additional binaries.\n"
 "Press OK to start."
 msgstr ""
-"IPTVPlayer нужна дополнительная настройка. \n"
-"таких, как загрузка и установка дополнительных модулей бинарного файла,нажмите OK, чтобы начать."
+"IPTVPlayer нуждается в дополнительной настройке.\n"
+"Таких, как загрузка и установка дополнительных бинарных файлов. \n"
+"Нажмите OK, чтобы начать."
 
 #: ../hosts/hostardmediathek.py:35
 msgid "Icons quality"
@@ -2671,11 +2590,11 @@
 
 #: ../components/captcha_helper.py:127
 msgid "If you want to use MyJDownloader, fill login and password in settings menu"
-msgstr ""
+msgstr "Если Вы хотите использовать MyJDownloader, введите логин и пароль в меню настроек"
 
 #: ../hosts/hostorthobulletscom.py:84
 msgid "Industry"
-msgstr ""
+msgstr "Промышленность"
 
 #: ../components/iptvplayerwidget.py:610
 msgid "Info"
@@ -2683,11 +2602,11 @@
 
 #: ../components/configextmovieplayer.py:309
 msgid "Info bar clock format"
-msgstr ""
+msgstr "Формат инфобара часов"
 
 #: ../components/configextmovieplayer.py:332
 msgid "Info bar timeout"
-msgstr ""
+msgstr "Тайм-аут инфобара"
 
 #: ../setup/iptvsetupwidget.py:86 ../Web/webParts.py:80
 msgid "Information"
@@ -2695,17 +2614,15 @@
 
 #: ../components/iptvextmovieplayer.py:806
 msgid "Information about audio tracks not available."
-msgstr "Информации о аудио треках не имеется."
+msgstr "Информации об аудио треках не имеется."
 
 #: ../Web/webParts.py:367
-#, fuzzy
 msgid "Initial list"
-msgstr "Список аниме"
+msgstr "Начальный список"
 
 #: ../Web/webParts.py:241
-#, fuzzy
 msgid "Initialize Download Manager"
-msgstr "Менеджер загрузок"
+msgstr "Инициализация диспетчера загрузки"
 
 #: ../components/iptvconfigmenu.py:361
 msgid "Initialize web interface (experimental)"
@@ -2714,11 +2631,11 @@
 #: ../Web/webSite.py:172 ../Web/webSite.py:217 ../Web/webSite.py:344
 #: ../Web/webSite.py:521
 msgid "Initiating data, please wait"
-msgstr ""
+msgstr "Инициализация данных. Пожалуйста, подождите"
 
 #: ../components/configextmovieplayer.py:372
 msgid "Inject black iframe at video playback finish"
-msgstr ""
+msgstr "Внедрение черного поля при завершении воспроизведения видео"
 
 #: ../components/iptvinputbox.py:23 ../components/iptvmultipleinputbox.py:35
 #: ../components/iptvmultipleinputbox.py:98
@@ -2739,20 +2656,19 @@
 
 #: ../setup/iptvsetupimpl.py:1355
 msgid "Installation binary failed. Retry?"
-msgstr "Установка бинарного не удалось. Повторите?"
+msgstr "Установка бинарника не удалось. Повторить?"
 
 #: ../iptvupdate/updatemainwindow.py:647
 msgid "Installation has been aborted."
-msgstr "Установка прервана."
+msgstr "Установка былы прервана."
 
 #: ../iptvupdate/updatemainwindow.py:645
 msgid "Installation has been confirmed."
-msgstr "Установка подтверждена."
+msgstr "Установка была подтверждена."
 
-#: ../setup/iptvsetuphelper.py:130
-#, fuzzy, python-format
+#, python-format
 msgid "Installing \"%s\"."
-msgstr "Установка \"%s\" ."
+msgstr "Установка \"%s\"."
 
 #: ../iptvupdate/updatemainwindow.py:384
 msgid "Installing new version."
@@ -2760,34 +2676,32 @@
 
 #: ../hosts/hostorthobulletscom.py:85
 msgid "Interactive Learning Center(ILC)"
-msgstr ""
+msgstr "Интерактивный учебный центр (ILC)"
 
 #: ../libs/urlparser.py:11587
 #, python-format
 msgid "Internal Server Error. Server response code: %s"
-msgstr ""
+msgstr "Внутренняя ошибка сервера. Код ответа сервера: %s"
 
 #: ../components/iptvconfigmenu.py:194
-#, fuzzy
 msgid "Internal, then external"
 msgstr "Международный"
 
 #: ../components/recaptcha_v2myjd_widget.py:126
-#, fuzzy
 msgid "Invalid email."
-msgstr "Неверный код."
+msgstr "Неверный адрес электронной почты."
 
 #: ../components/iptvdirbrowser.py:272
 msgid "Invalid name."
-msgstr "Неверный код."
+msgstr "Неверное имя."
 
 #: ../components/iptvextmovieplayer.py:756
 msgid "Is this message displayed correctly?"
-msgstr "Отображается это сообщение правильно?"
+msgstr "Это сообщение отображается правильно?"
 
 #: ../setup/iptvsetupimpl.py:868
 msgid "It improves HLS/M3U8 stream download.\n"
-msgstr "Это улучшает HLS/M3U8 потока загрузки.\n"
+msgstr "Это улучшает загрузку HLS/M3U8 потока.\n"
 
 #: ../setup/iptvsetupimpl.py:1239
 msgid "It improves buffering mode with the gstplayer.\n"
@@ -2795,12 +2709,11 @@
 
 #: ../setup/iptvsetupimpl.py:928
 msgid "It improves commands execution with very long arguments.\n"
-msgstr ""
+msgstr "Это улучшает выполнение команд с очень длинными аргументами.\n"
 
 #: ../setup/iptvsetupimpl.py:803
-#, fuzzy
 msgid "It improves json data parsing.\n"
-msgstr "Он улучшает субтитры синтаксического анализа.\n"
+msgstr "Это улучшает разбор данных json.\n"
 
 #: ../setup/iptvsetupimpl.py:1194
 msgid "It improves playing of streams hls/m3u8.\n"
@@ -2808,35 +2721,35 @@
 
 #: ../setup/iptvsetupimpl.py:740
 msgid "It improves subtitles parsing.\n"
-msgstr "Он улучшает субтитры синтаксического анализа.\n"
+msgstr "Это улучшает синтаксический анализ субтитров.\n"
 
 #: ../libs/pCommon.py:539 ../libs/pCommon.py:1669
 msgid "It is not allowed to call getURLRequestData from main thread."
-msgstr ""
+msgstr "Невозможно вызвать getURLRequestData из основного потока."
 
 #: ../hosts/hostcineto.py:395
 msgid "It looks like some kind of protection. Try again later."
-msgstr ""
+msgstr "Это похоже на какую-то защиту. Попробуйте позже."
 
 #: ../libs/pCommon.py:342
 #, python-format
 msgid "It looks like your current configuration do not allow to connect to the https://%s/.\n"
-msgstr ""
+msgstr "Похоже, Ваша текущая конфигурация не позволяет подключиться к https://%s/.\n"
 
 #: ../components/iptvplayerwidget.py:476
 #, python-format
 msgid "It seems that the host \"%s\" has crashed."
-msgstr "Видимо, этот хост \"%s\" не работает."
+msgstr "Видимо, хост \"%s\" потерпел крах."
 
 #: ../components/iptvplayerwidget.py:480
 #, python-format
 msgid "It seems that the host \"%s\" has crashed. Do you want to report this problem?"
-msgstr "Видимо, у вас \"%s\" призошёл сбой. Вы хотите, сообщить о проблеме?"
+msgstr "Видимо, хост \"%s\" потерпел крах. Вы хотите сообщить о проблеме?"
 
 #: ../components/iptvsubdownloader.py:369
 #, python-format
 msgid "It seems that the subtitle's provider \"%s\" has crashed. Do you want to report this problem?"
-msgstr "Кажется, что поставщик субтитры \"%s\" разбился. Вы хотите, чтобы сообщить о проблеме?"
+msgstr "Кажется, поставщик субтитров \"%s\" потерпел крах. Вы хотите сообщить о проблеме?"
 
 #: ../components/iptvextmovieplayer.py:1480
 #, python-format
@@ -2846,7 +2759,7 @@
 "STS: %s\n"
 "ERROR CODE: %r"
 msgstr ""
-"Видимо, видео-плеер \"%s\" не работает должным образом.\n"
+"Видимо, видеоплеер \"%s\" не работает должным образом.\n"
 "\n"
 "STS: %s\n"
 "КОД ОШИБКИ: %r"
@@ -2857,11 +2770,11 @@
 
 #: ../components/isubprovider.py:512 ../subproviders/subprov_napisy24pl.py:330
 msgid "It seems that unzip utility is not installed."
-msgstr "Создается впечатление, что утилита разархивировать не установлена."
+msgstr "Создается впечатление, что утилита разархивации не установлена."
 
 #: ../hosts/hostmovie4kto.py:34
 msgid "Italian"
-msgstr "Италия"
+msgstr "Итальянские"
 
 #: ../tools/iptvfavourites.py:156
 #, python-format
@@ -2870,21 +2783,20 @@
 
 #: ../hosts/hostliveleak.py:45 ../hosts/hostliveleak.py:202
 msgid "Items"
-msgstr "Предметы"
+msgstr "Пункты"
 
 #: ../components/iptvfavouriteswidgets.py:296
 #, python-format
 msgid "Items in group \"%s\""
-msgstr "Положение в группе \"%s\""
+msgstr "Пункты в группе \"%s\""
 
 #: ../hosts/hosttvnowde.py:354
 msgid "Items with DRM protection."
 msgstr "Элементы с защитой DRM."
 
 #: ../components/recaptcha_v2myjd_widget.py:158
-#, fuzzy
 msgid "JDownloader script execution"
-msgstr "Проблема с выполнением пользовательских скриптов [%s]."
+msgstr "Выполнение сценария JDownloader"
 
 #: ../components/recaptcha_v2myjd_widget.py:101
 #, python-format
@@ -2892,39 +2804,40 @@
 "JDownloader script execution failed.\n"
 "Error code: %s\n"
 msgstr ""
+"Выполнение сценария JDownloader завершилось с ошибкой.\n"
+"Код ошибки: %s\n"
 
 #: ../components/recaptcha_v2myjd_widget.py:98
 msgid "JDownloader script finished."
-msgstr ""
+msgstr "Сценарий JDownloader завершен."
 
 #: ../hosts/hostsportitalia.py:77
 msgid "January"
-msgstr ""
+msgstr "Январь"
 
 #: ../hosts/hostmovie4kto.py:34
 msgid "Japanese"
-msgstr "Японский"
+msgstr "Японские"
 
 #: ../hosts/hostorthobulletscom.py:86
 msgid "Jobs & Positions"
-msgstr ""
+msgstr "Работа и должности"
 
 #: ../hosts/hostorthobulletscom.py:87
-#, fuzzy
 msgid "Journal Club"
-msgstr "Журналистика"
+msgstr "Журнал клуб"
 
 #: ../hosts/hostsportitalia.py:77
 msgid "July"
-msgstr ""
+msgstr "Июль"
 
 #: ../hosts/hostsportitalia.py:77
 msgid "June"
-msgstr ""
+msgstr "Июнь"
 
 #: ../hosts/hostalltubetv.py:31
 msgid "Junior"
-msgstr "Юношеский"
+msgstr "Юношеские"
 
 #: ../hosts/hostinfoversion.py:249
 msgid ""
@@ -2934,41 +2847,45 @@
 "PRZEKAŻ 1 % SWOJEGO PODATKU\n"
 "PODARUJ NASZYM NIEPEŁNOSPRAWNYM SŁOŃCE"
 msgstr ""
+"KRS 0000049063\n"
+"АССОЦИАЦИЯ \"ДАВАЙТЕ ОТКРОЕМ ИМ ЖИЗНЬ\"\n"
+"УЛ. KOŚCIUSZKI 43   32-065 KRZESZOWICE\n"
+"ПОДАРИТЕ 1% ВАШЕГО НАЛОГА\n"
+"ДАЙТЕ НАШИМ ИНВАЛИДАМ СОЛНЦЕ"
 
 #: ../hosts/hostorthobulletscom.py:110
 msgid "Knee & Sports"
-msgstr ""
+msgstr "Коленный спорт"
 
 #: ../hosts/hostworldfree4u.py:42
-#, fuzzy
 msgid "LATEST"
-msgstr "ПОСЛЕДНИЕ ВИДЕО"
+msgstr "ПОСЛЕДНИЕ"
 
 #: ../hosts/hostdancetrippin.py:35
 msgid "LATEST CONTENT"
-msgstr ""
+msgstr "НОВЕЙШЕЕ СОДЕРЖАНИЕ"
 
 #: ../hosts/hostwatchwrestling.py:334 ../hosts/hostwatchwrestlinguno.py:294
 msgid "LIKES"
-msgstr ""
+msgstr "НРАВИТСЯ"
 
 #: ../hosts/hostmythewatchseries.py:62
 msgid "LIST"
-msgstr ""
+msgstr "СПИСОК"
 
 #: ../hosts/host3player.py:55
 msgid "LIVE"
-msgstr ""
+msgstr "ПРЯМОЙ"
 
 #: ../hosts/hostsportitalia.py:102
 msgid "LIVE STREAMING"
-msgstr ""
+msgstr "ПРЯМАЯ ТРАНСЛЯЦИЯ"
 
 #: ../hosts/hosthdfull.py:40 ../hosts/hostddl.py:35 ../hosts/hostkinox.py:217
 #: ../hosts/hostkinox.py:383
 #, fuzzy
 msgid "Language"
-msgstr "Язык:"
+msgstr "Язык"
 
 #: ../hosts/hostmovie4kto.py:39 ../hosts/hostngolos.py:29
 #: ../libs/skylinewebcamscom.py:35
@@ -2977,9 +2894,9 @@
 
 #: ../hosts/hosttwitchtv.py:422 ../hosts/hosttwitchtv.py:442
 #: ../hosts/hosttwitchtv.py:479
-#, fuzzy, python-format
+#, python-format
 msgid "Language: %s"
-msgstr "Язык:"
+msgstr "Язык: %s"
 
 #: ../hosts/hostyifytv.py:75
 msgid "Languages"
@@ -2988,7 +2905,7 @@
 #: ../Web/webParts.py:127
 #, python-format
 msgid "Last %d lines of the %s file are:"
-msgstr ""
+msgstr "Последние %d строк файла %s:"
 
 #: ../hosts/hostsvtplayse.py:78
 msgid "Last chance"
@@ -2999,14 +2916,13 @@
 msgstr "Последняя проверка версии"
 
 #: ../hosts/hosttwitchtv.py:113
-#, fuzzy
 msgid "Last day"
-msgstr "Последнее обновление"
+msgstr "Последний день"
 
 #: ../components/iptvplayerwidget.py:336 ../hosts/hostinfoversion.py:563
 #: ../hosts/hostinfoversion.py:583 ../hosts/hostinfoversion.py:1860
 #: ../hosts/hostinfoversion.py:2545 ../libs/pCommon.py:1841
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Last error:\n"
 "%s"
@@ -3021,26 +2937,24 @@
 msgstr "Последняя ошибка: \"%s\""
 
 #: ../hosts/hosttwitchtv.py:115
-#, fuzzy
 msgid "Last month"
-msgstr "Последние фильмы"
+msgstr "Прошлый месяц"
 
 #: ../hosts/host9anime.py:46
 msgid "Last update"
 msgstr "Последнее обновление"
 
 #: ../hosts/hosttwitchtv.py:114
-#, fuzzy
 msgid "Last week"
-msgstr "Через неделю"
+msgstr "На прошлой неделе"
 
 #: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
 msgid "Lastest"
-msgstr "Последний"
+msgstr "Новейшие"
 
 #: ../hosts/hostplayrtsiw.py:148
 msgid "Latest"
-msgstr "Последний"
+msgstr "Последние"
 
 #: ../hosts/hostfilmezz.py:70
 msgid "Latest added"
@@ -3067,13 +2981,12 @@
 msgstr "Последние обновления"
 
 #: ../components/iptvplayerwidget.py:689
-#, fuzzy
 msgid "Lead programmer: "
-msgstr "Последние программы"
+msgstr "Ведущий программист: "
 
 #: ../Web/webParts.py:437
 msgid "Level:"
-msgstr ""
+msgstr "Уровень:"
 
 #: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
 msgid "Lightgray"
@@ -3085,64 +2998,62 @@
 
 #: ../components/iptvextmovieplayer.py:1904
 msgid "Link is not supported by the gstplayer. Please use the extelayer3 if available."
-msgstr "Ссылка не поддерживается проигрывателем gstplayer. Пожалуйста, используйте extelayer3 если таковая имеется."
+msgstr "Ссылка не поддерживается проигрывателем gstplayer. Пожалуйста, используйте extelayer3 если доступно."
 
 #: ../components/captcha_helper.py:41
 #, python-format
 msgid "Link protected with %s"
-msgstr ""
+msgstr "Ссылка защищена %s"
 
 #: ../hosts/host3player.py:356 ../hosts/host7tvde.py:286
 msgid "Link protected with DRM."
-msgstr ""
+msgstr "Ссылка защищена DRM."
 
 #: ../components/recaptcha_v2helper.py:19
 msgid "Link protected with Google ReCaptcha v2"
-msgstr ""
+msgstr "Ссылка защищена с помощью Google ReCaptcha v2"
 
 #: ../hosts/hostfreediscpl.py:83 ../hosts/hostekinotv.py:429
 #: ../hosts/hosthdstreams.py:395 ../hosts/hosthdstreams.py:411
 #: ../hosts/hostmooviecc.py:407 ../hosts/hostserienstreamto.py:406
 #: ../hosts/hosttvpvod.py:213 ../hosts/hostfilmezz.py:301
 msgid "Link protected with google recaptcha v2."
-msgstr ""
+msgstr "Ссылка защищена с помощью google recaptcha v2."
 
 #: ../hosts/hostekinotv.py:399 ../hosts/hostekinotv.py:411
 msgid "Link protected with hCaptcha."
-msgstr ""
+msgstr "Ссылка защищена hCaptcha."
 
 #: ../Web/webParts.py:445
-#, fuzzy
 msgid "Links for"
-msgstr "Cсылка"
+msgstr "Cсылка для"
 
 #: ../hosts/hosturllist.py:49
-#, fuzzy
 msgid "Links from all files without categories"
-msgstr "Ссылки видеоролики и сообщения, без разделения на категории"
+msgstr "Ссылки из всех файлов без категорий"
 
 #: ../hosts/hosturllist.py:50 ../hosts/hosturllist.py:51
 #: ../hosts/hosturllist.py:52
 #, python-format
 msgid "Links from the file %s"
-msgstr ""
+msgstr "Ссылки из файла %s"
 
 #: ../hosts/hostalltubetv.py:35
 msgid "List"
-msgstr ""
+msgstr "Список"
 
 #: ../hosts/hostplayrtsiw.py:159
 msgid "List by day"
-msgstr ""
+msgstr "Список по дням"
 
 #: ../libs/ustvnow.py:42
 msgid "List only channels with subscription"
-msgstr "Список каналов в подписке"
+msgstr "Только список каналов в подписке"
 
 #: ../hosts/hostshoutcast.py:125
-#, fuzzy, python-format
+#, python-format
 msgid "Listeners: %s"
-msgstr "Последняя ошибка: %s"
+msgstr "Слушатели: %s"
 
 #: ../hosts/hostfrancetv.py:449 ../hosts/hostbbciplayer.py:153
 #: ../hosts/hostbbcsport.py:172 ../hosts/hosthitboxtv.py:42
@@ -3157,7 +3068,7 @@
 
 #: ../hosts/hostardmediathek.py:63
 msgid "Live Radio"
-msgstr "Радио в прямом эфире"
+msgstr "Прямой радиоэфир"
 
 #: ../hosts/hostardmediathek.py:62
 msgid "Live TV"
@@ -3168,28 +3079,25 @@
 msgstr "Прямые трансляции"
 
 #: ../hosts/hosthitboxtv.py:267
-#, fuzzy
 msgid "Live now"
-msgstr "Прямой эфир"
+msgstr "Онлайн сейчас"
 
 #: ../hosts/hosttwitchtv.py:635 ../hosts/hosturllist.py:51
-#, fuzzy
 msgid "Live streams"
-msgstr "Прямые-потоки"
+msgstr "Онлайн потоки"
 
 #: ../libs/wagasworld.py:57
-#, fuzzy
 msgid "LiveTv"
-msgstr "Прямой эфир"
+msgstr "Прямой эфир ТВ"
 
 #: ../components/iptvextmovieplayer.py:861
 msgid "Load"
-msgstr "Выбрать"
+msgstr "Загрузка"
 
 #: ../components/e2ivk.py:622 ../components/e2ivk.py:625
 #, python-format
 msgid "Load of the Virtual Keyboard layout \"%s\" failed due to the following error: \"%s\""
-msgstr ""
+msgstr "Загрузка раскладки виртуальной клавиатуры \"%s\" не выполнена из-за следующей ошибки: \"%s\""
 
 #: ../components/iptvplayerwidget.py:1820
 #: ../components/iptvsubdownloader.py:466
@@ -3199,26 +3107,25 @@
 #: ../components/iptvplayerwidget.py:1452
 #, python-format
 msgid "Loading %s failed due to following error:"
-msgstr ""
+msgstr "Загрузка %s не удалась из-за следующей ошибки:"
 
 #: ../Web/webSite.py:289 ../Web/webSite.py:347
-#, fuzzy
 msgid "Loading data, please wait"
-msgstr "Закрытие. Пожалуйста , подождите ..."
+msgstr "Загрузка данных. Пожалуйста, подождите"
 
 #: ../Web/webSite.py:222 ../Web/webSite.py:525
 #, python-format
 msgid "Loading data, please wait (%d)"
-msgstr ""
+msgstr "Загрузка данных. Пожалуйста, подождите (%d)"
 
 #: ../hosts/hostlocalmedia.py:56
 msgid "LocalMedia"
-msgstr "Мои Медиа файлы"
+msgstr "Локальные медиафайлы"
 
 #: ../components/e2ivk.py:617
 #, python-format
 msgid "Locale ID mismatched! %s <> %s"
-msgstr ""
+msgstr "Идентификатор локали несовместим! %s <> %s"
 
 #: ../hosts/hostdailymotion.py:28
 msgid "Localization"
@@ -3226,12 +3133,12 @@
 
 #: ../hosts/hoststreamliveto.py:36 ../libs/videostar.py:45
 msgid "Login"
-msgstr "Авторизоваться"
+msgstr "Авторизация"
 
 #: ../subproviders/subprov_opensubtitlesorg.py:198
 #: ../subproviders/subprov_opensubtitlesorg.py:205
 msgid "Login failed!"
-msgstr "Ошибка входа!"
+msgstr "Неверный логин!"
 
 #: ../hosts/hostfreediscpl.py:447 ../hosts/hosthdfull.py:621
 #: ../hosts/hostbbcsport.py:474 ../hosts/hostcartoonhd.py:580
@@ -3247,22 +3154,21 @@
 #: ../hosts/hostfilmezz.py:479 ../hosts/hostfilmixco.py:445
 #: ../libs/internetowa.py:85 ../libs/edemtv.py:90 ../libs/firstonetvnet.py:107
 msgid "Login failed."
-msgstr "Ошибка входа."
+msgstr "Неверный логин."
 
 #: ../hosts/hostfilmynadzis.py:101 ../hosts/hostekstraklasatv.py:131
 #: ../hosts/hosteurosportplayer.py:639
 msgid "Login failed. Invalid email or password."
-msgstr ""
+msgstr "Ошибка входа. Неправильный адрес электронной почты или пароль."
 
 #: ../hosts/hosteurosportplayer.py:541
-#, fuzzy
 msgid "Login needed"
-msgstr "Режим входа"
+msgstr "Требуется логин"
 
 #: ../libs/urlparser.py:5646
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "Login on {0} failed."
-msgstr "Ошибка входа."
+msgstr "Неверный логин на {0}."
 
 #: ../libs/urlparser.py:2172
 #, python-format
@@ -3270,25 +3176,24 @@
 "Login user \"%s\" to http://vk.com/ failed!\n"
 "Please check your login data in the IPTVPlayer configuration."
 msgstr ""
-"Логин пользователя \"%s\" войти http://vk.com/ не удалось!\n"
+"Не удалось войти в http://vk.com/ с логином пользователя \"%s\"!\n"
 "Пожалуйста , проверьте свои данные для входа в конфигурации IPTVPlayer."
 
 #: ../Web/webParts.py:63 ../Web/webParts.py:80
 msgid "Logs"
-msgstr ""
+msgstr "Журнал"
 
 #: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
 msgid "Longest"
 msgstr "Самый длинный"
 
 #: ../libs/weebtv.py:31
-#, fuzzy
 msgid "Low"
 msgstr "Низкий"
 
 #: ../hosts/hosthdstreams.py:70 ../hosts/hostmythewatchseries.py:63
 msgid "MOVIES"
-msgstr ""
+msgstr "ФИЛЬМЫ"
 
 #: ../hosts/hostfilmstreamvkcom.py:97 ../hosts/hostartetv.py:82
 #: ../hosts/hostfilmpalast.py:43 ../hosts/hosthoofootcom.py:30
@@ -3296,12 +3201,11 @@
 #: ../hosts/hostrtbfbe.py:91 ../hosts/hostspiegeltv.py:78
 #: ../hosts/hostwptv.py:50 ../hosts/hostwrealu24tv.py:44
 msgid "Main"
-msgstr "Главный"
+msgstr "Главное"
 
 #: ../hosts/hostcimaclubcom.py:113 ../hosts/hostnuteczki.py:86
-#, fuzzy
 msgid "Main menu"
-msgstr "Главное событие"
+msgstr "Главное меню"
 
 #: ../hosts/hostlocalmedia.py:294
 #, python-format
@@ -3310,88 +3214,83 @@
 
 #: ../iptvdm/iptvdmui.py:171 ../Web/webParts.py:256
 msgid "Manager status: "
-msgstr "Менеджер положение: "
+msgstr "Статус менеджера: "
 
 #: ../hosts/hostfilmstreamvkcom.py:100
-#, fuzzy
 msgid "Manga"
 msgstr "Мангас"
 
 #: ../hosts/hostsportitalia.py:77
 msgid "Mars"
-msgstr ""
+msgstr "Марс"
 
 #: ../hosts/hostekstraklasatv.py:73
-#, fuzzy
 msgid "Matches"
-msgstr "%s Смотреть"
+msgstr "Матчи"
 
 #: ../hosts/hostekstraklasatv.py:40
-#, fuzzy
 msgid "Max bitrate:"
-msgstr "Битрейт: 900"
+msgstr "Макс. битрейт:"
 
 #: ../hosts/hostlocalmedia.py:50
 msgid "Max items per page"
-msgstr "Максимальное количество на странице"
+msgstr "Макс. кол-во на странице"
 
 #: ../iptvdm/iptvdmapi.py:233
 msgid "Max number of parallel downloads has been reached."
-msgstr ""
+msgstr "Достигнуто максимальное количество параллельных загрузок."
 
 #: ../hosts/hostsportitalia.py:77
-#, fuzzy
 msgid "May"
-msgstr "Гей"
+msgstr "Май"
 
 #: ../hosts/hostorthobulletscom.py:88
 msgid "Medtryx Marketing"
-msgstr ""
+msgstr "Медтрикс Маркетинг"
 
 #: ../hosts/hostorthobulletscom.py:89
 msgid "Meetings"
-msgstr ""
+msgstr "Встречи"
 
 #: ../components/iptvextmovieplayer.py:568
 msgid "Menu"
-msgstr ""
+msgstr "Меню"
 
 #: ../libs/recaptcha_v2_2captcha.py:79
 #, python-format
 msgid "Message from 2Captcha: %s"
-msgstr ""
+msgstr "Сообщение от 2Captcha: %s"
 
 #: ../hosts/hostkijknl.py:61
 msgid "Missed"
-msgstr ""
+msgstr "Пропущенные"
 
 #: ../hosts/hosttvnowde.py:61
-#, fuzzy
 msgid "Missed the program?"
-msgstr "Вы пропускаете?"
+msgstr "Пропустили программу?"
 
 #: ../hosts/hostardmediathek.py:60 ../hosts/hostzdfmediathek.py:81
 #: ../hosts/hostzdfmediathek.py:98
 msgid "Missed the show?"
-msgstr "Вы пропускаете?"
+msgstr "Пропустили шоу?"
 
 #: ../hosts/hostsportitalia.py:78
 msgid "Monday"
-msgstr ""
+msgstr "Понедельник"
 
 #: ../hosts/hostddl.py:549
 msgid "Mood:"
-msgstr ""
+msgstr "Настроение:"
 
 #: ../hosts/hostddl.py:550
 msgid "Moods:"
-msgstr ""
+msgstr "Настроения:"
 
 #: ../components/iptvplayerwidget.py:174 ../hosts/hostdancetrippin.py:146
 #: ../hosts/hostlocalmedia.py:390 ../hosts/hostrtbfbe.py:337
 #: ../hosts/hosttvpvod.py:410 ../libs/wagasworld.py:174
 msgid "More"
-msgstr "Опции"
+msgstr "Больше опций"
 
 #: ../hosts/hostardmediathek.py:38 ../hosts/hostzdfmediathek.py:40
 msgid "More important"
@@ -3402,23 +3301,21 @@
 msgstr "Самые популярные"
 
 #: ../hosts/hostfilmoviplex.py:43
-#, fuzzy
 msgid "Most Viewed Movies"
-msgstr "Наиболее просматриваемые"
+msgstr "Наиболее просматриваемые фильмы"
 
 #: ../hosts/hostfilmoviplex.py:49
 #, fuzzy
 msgid "Most Viewed Series"
-msgstr "Наиболее просматриваемые"
+msgstr "Наиболее просматриваемые серии"
 
 #: ../hosts/hostdancetrippin.py:43
-#, fuzzy
 msgid "Most featured"
-msgstr "По рейтингу"
+msgstr "Самые популярные"
 
 #: ../hosts/hostplayrtsiw.py:154
 msgid "Most popular"
-msgstr "Самый популярный"
+msgstr "Самые популярные"
 
 #: ../hosts/hostdailymotion.py:52
 msgid "Most rated"
@@ -3427,9 +3324,8 @@
 #: ../hosts/hostdailymotion.py:51 ../hosts/hostplayrtsiw.py:231
 #: ../hosts/hostplayrtsiw.py:236 ../hosts/hostplayrtsiw.py:245
 #: ../hosts/hostplayrtsiw.py:250
-#, fuzzy
 msgid "Most recent"
-msgstr "--- Самое новое ---"
+msgstr "Самое новое"
 
 #: ../hosts/hostcartoonhd.py:32 ../hosts/hostdailymotion.py:50
 #: ../hosts/hostxrysoise.py:30
@@ -3447,13 +3343,13 @@
 "Return code[%s].\n"
 "Return data[%s]."
 msgstr ""
-"Монтировать ISO файл [%s] на [%s] не смогли.\n"
+"Не удалось смонтировать ISO файл [%s] на [%s].\n"
 "Код возврата[%s].\n"
 "Возврат данных[%s]."
 
 #: ../components/iptvsubsimpledownloader.py:71
 msgid "Move group"
-msgstr "Перемещение группы"
+msgstr "Переместить группу"
 
 #: ../hosts/hostlibrestream.py:29
 msgid "Movie"
@@ -3494,7 +3390,7 @@
 
 #: ../hosts/hostekinomaniak.py:61 ../hosts/hostmovienightws.py:29
 msgid "Movies genres"
-msgstr "Фильмы жанры"
+msgstr "Жанры фильмов"
 
 #: ../hosts/hostanimeodcinki.py:43
 msgid "Movies list"
@@ -3503,47 +3399,44 @@
 #: ../hosts/hostlocalmedia.py:666
 #, python-format
 msgid "Moving file from \"%s\" to \"%s\" failed.\n"
-msgstr ""
+msgstr "Перемещение файла из \"%s\" в \"%s\" не выполнено.\n"
 
 #: ../iptvdm/iptvbuffui.py:291
 #, python-format
 msgid "Moving playback buffer to the download manager failed with the following error \"%s\""
-msgstr ""
+msgstr "Не удалось переместить буфер воспроизведения в диспетчер загрузки с ошибкой \"%s\""
 
 #: ../hosts/hostfreediscpl.py:61 ../hosts/hostfreediscpl.py:506
 msgid "Music"
 msgstr "Музыка"
 
 #: ../hosts/hostlookmovieag.py:79
-#, fuzzy
 msgid "Music Movies"
-msgstr "HD Фильмы"
+msgstr "Музыкальное кино"
 
 #: ../libs/recaptcha_v2_myjd.py:16
 msgid "My JDownloader reCAPTCHA v2 solution"
-msgstr ""
+msgstr "Мое решение для JDownloader reCAPTCHA v2"
 
 #: ../hosts/hostmusicbox.py:84
-#, fuzzy
 msgid "My list"
-msgstr "Список фильмов"
+msgstr "Мой список"
 
 #: ../hosts/hostlookmovieag.py:80
-#, fuzzy
 msgid "Mystery Movies"
-msgstr "Новые фильмы"
+msgstr "Фильмы-мистерия"
 
 #: ../libs/skylinewebcamscom.py:70
 msgid "NEARBY CAMS"
-msgstr ""
+msgstr "БЛИЖАЙШИЕ КАМЕРЫ"
 
 #: ../libs/skylinewebcamscom.py:69
 msgid "NEW"
-msgstr ""
+msgstr "НОВЫЙ"
 
 #: ../hosts/hostmythewatchseries.py:66
 msgid "NEW RELEASE LIST"
-msgstr ""
+msgstr "СПИСОК НОВЫХ РЕЛИЗОВ"
 
 #: ../components/iptvfavouriteswidgets.py:54
 msgid "Name cannot be empty."
@@ -3563,11 +3456,11 @@
 
 #: ../hosts/hostfilmstreamhdit.py:38
 msgid "Netflix"
-msgstr ""
+msgstr "Netflix"
 
 #: ../hosts/hostcartoonhd.py:507
 msgid "Network"
-msgstr ""
+msgstr "Сеть"
 
 #: ../libs/hcaptcha_2captcha.py:77 ../libs/hcaptcha_2captcha.py:91
 #: ../libs/recaptcha_v2_2captcha.py:69 ../libs/recaptcha_v2_2captcha.py:87
@@ -3575,11 +3468,11 @@
 #: ../libs/recaptcha_v3_2captcha.py:65 ../libs/recaptcha_v3_2captcha.py:79
 #, python-format
 msgid "Network failed %s."
-msgstr ""
+msgstr "Сбой сети %s."
 
 #: ../hosts/hostthewatchseriesto.py:41
 msgid "Never"
-msgstr ""
+msgstr "Никогда"
 
 #: ../hosts/hostanimeodcinki.py:40 ../hosts/hostfilmpalast.py:51
 #: ../hosts/hostserienstreamto.py:74 ../hosts/hostfilmativa.py:42
@@ -3605,7 +3498,7 @@
 
 #: ../libs/pCommon.py:1163
 msgid "New javascript not yet supported!"
-msgstr ""
+msgstr "Новый javascript ещё не поддерживается!"
 
 #: ../hosts/host9anime.py:45
 msgid "Newest"
@@ -3616,18 +3509,16 @@
 msgstr "Новые эпизоды"
 
 #: ../hosts/hostserijeonline.py:55
-#, fuzzy
 msgid "Newest Videos"
-msgstr "Новые Видео"
+msgstr "Новые видео"
 
 #: ../hosts/hostgovodtv.py:63 ../hosts/hostkinox.py:88
 msgid "News"
 msgstr "Новости"
 
 #: ../hosts/hostvumedicom.py:91
-#, fuzzy
 msgid "News Feed"
-msgstr "Новости"
+msgstr "Новостная лента"
 
 #: ../hosts/hostlookmovieag.py:198 ../libs/youtubeparser.py:613
 #: ../libs/youtubeparser.py:739 ../libs/youtubeparser.py:754
@@ -3753,9 +3644,8 @@
 #: ../components/configextmovieplayer.py:26 ../libs/youtubeparser.py:33
 #: ../subproviders/subprov_subscenecom.py:264 ../Web/webParts.py:172
 #: ../Web/webParts.py:175 ../Web/webThreads.py:161 ../Web/webThreads.py:164
-#, fuzzy
 msgid "No"
-msgstr "нет"
+msgstr "Нет"
 
 #: ../components/iptvplayerwidget.py:2029
 #: ../components/iptvsubdownloader.py:548
@@ -3763,16 +3653,16 @@
 "No item to display. \n"
 "Press OK to refresh.\n"
 msgstr ""
-"Ничего не найдено.\n"
+"Нечего показывать. \n"
 "Нажмите ОК, чтобы обновить.\n"
 
 #: ../Web/webSite.py:451
 msgid "No materials waiting in the downloader queue"
-msgstr ""
+msgstr "Нет материалов, ожидающих очереди загрузчика"
 
 #: ../hosts/hosttvplayercom.py:235
 msgid "No playable sources found."
-msgstr ""
+msgstr "Не найдено ни одного воспроизводимого источника."
 
 #: ../iptvupdate/updatemainwindow.py:115
 msgid "No steps to execute."
@@ -3784,13 +3674,13 @@
 
 #: ../hosts/hostkijknl.py:258
 msgid "No valid entitlement found for asset."
-msgstr ""
+msgstr "Не найдено никаких прав на активизацию."
 
 #: ../components/iptvplayerwidget.py:1526
 #: ../components/iptvplayerwidget.py:1758
 #: ../components/iptvplayerwidget.py:2128 ../hosts/hostfilmativa.py:197
 msgid "No valid links available."
-msgstr "Работающих ссылок нет."
+msgstr "Нет работающих ссылок."
 
 #: ../components/configextmovieplayer.py:77 ../components/iptvconfigmenu.py:87
 #: ../components/iptvconfigmenu.py:195 ../components/iptvconfigmenu.py:196
@@ -3806,24 +3696,23 @@
 #: ../hosts/hostyesmoviesto.py:27 ../hosts/hostyifytv.py:31
 #: ../hosts/hostfilmeonlineto.py:26
 msgid "None"
-msgstr "нет"
+msgstr "Нет"
 
 #: ../hosts/hostekstraklasatv.py:173
 msgid "Not Free"
-msgstr ""
+msgstr "Не бесплатные"
 
 #: ../Web/webSite.py:446
-#, fuzzy
 msgid "Nothing has been downloaded yet."
-msgstr "PIN-код был изменен."
+msgstr "Пока ничего не загружено."
 
 #: ../iptvupdate/updatemainwindow.py:611
 msgid "Nothing to do here."
-msgstr ""
+msgstr "Здесь нечего делать."
 
 #: ../hosts/hostsportitalia.py:77
 msgid "November"
-msgstr ""
+msgstr "Ноябрь"
 
 #: ../hosts/hostekstraklasatv.py:245
 msgid "Now playing"
@@ -3831,12 +3720,12 @@
 
 #: ../components/iptvconfigmenu.py:407
 msgid "Number of downloaded files simultaneously"
-msgstr "Количество загружаемых файлов одновременно"
+msgstr "Количество одновременно загружаемых файлов"
 
 #: ../components/confighost.py:109 ../components/iptvmultipleinputbox.py:101
 #: ../components/VirtualKeyBoard.py:100
 msgid "OK"
-msgstr ""
+msgstr "OK"
 
 #: ../iptvupdate/updatemainwindow.py:375
 msgid "Obtaining server list."
@@ -3844,21 +3733,19 @@
 
 #: ../hosts/hostsportitalia.py:77
 msgid "October"
-msgstr ""
+msgstr "Октябрь"
 
 #: ../libs/showsporttvcom.py:65
-#, fuzzy
 msgid "Off Air"
-msgstr "В эфире"
+msgstr "Не в эфире"
 
 #: ../libs/weebtv.py:56
 msgid "Offline channels"
 msgstr "Оффлайн каналы"
 
 #: ../hosts/hostplayrtsiw.py:279
-#, fuzzy
 msgid "Older"
-msgstr "Старые год"
+msgstr "Старше"
 
 #: ../hosts/hosteurosportplayer.py:106 ../libs/showsporttvcom.py:67
 msgid "On Air"
@@ -3866,11 +3753,11 @@
 
 #: ../hosts/hostyoutube.py:56
 msgid "On Time"
-msgstr ""
+msgstr "Вовремя"
 
 #: ../hosts/hostardmediathek.py:39 ../hosts/hostzdfmediathek.py:41
 msgid "One link mode"
-msgstr "Режим Одна ссылка"
+msgstr "Режим одной ссылки"
 
 #: ../hosts/hostsvtplayse.py:151 ../hosts/hostsvtplayse.py:348
 msgid "Only available in Sweden."
@@ -3881,27 +3768,24 @@
 msgstr "Доступно только в Швеции.\n"
 
 #: ../components/iptvconfigmenu.py:194
-#, fuzzy
 msgid "Only free"
-msgstr "Другие видео"
+msgstr "Только бесплатные"
 
 #: ../libs/urlparser.py:8597
-#, fuzzy
 msgid ""
 "Only logged in user have access.\n"
 "Please set login data in the host configuration under blue button."
 msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+"Этот узел требует регистрации.\n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
 
 #: ../Web/webParts.py:484
 msgid "Only music"
-msgstr ""
+msgstr "Только музыка"
 
 #: ../Web/webParts.py:483
-#, fuzzy
 msgid "Only videos"
-msgstr "Другие видео"
+msgstr "Только видео"
 
 #: ../setup/iptvsetupimpl.py:400
 #, python-format
@@ -3912,74 +3796,71 @@
 "to be able to install binary components from %s server.\n"
 "Do you want to proceed?"
 msgstr ""
+"OpenSSL в вашем имидже имеет разные имена библиотек, используемых %s.\n"
+"Необходимо создать следующие символические ссылки:\n"
+"%s,\n"
+"чтобы иметь возможность устанавливать двоичные компоненты с сервера %s.\n"
+"Вы хотите продолжить?"
 
 #: ../setup/iptvsetupimpl.py:283 ../setup/iptvsetupimpl.py:313
 msgid "OpenSSL lib is needed by wget and rtmpdump utilities."
-msgstr "OpenSSL требуется для правильной работы Wget инструмента и rtmpdump."
+msgstr "Требуется OpenSSL для правильной работы утилит wget и rtmpdump."
 
 #: ../components/iptvextmovieplayer.py:440
 msgid "Opening. Please wait..."
-msgstr "Открытие. Пожалуйста , подождите ..."
+msgstr "Открытие. Пожалуйста, подождите..."
 
 #: ../components/iptvplayerwidget.py:856 ../components/iptvsubdownloader.py:247
 msgid "Operation aborted!"
 msgstr "Операция прервана!"
 
 #: ../hosts/hostwatchwrestling.py:47 ../hosts/hostwatchwrestlinguno.py:51
-#, fuzzy
 msgid "Order by comments"
-msgstr "Сортировать по: "
+msgstr "Сортировать по комментариям"
 
 #: ../hosts/hostwatchwrestling.py:44 ../hosts/hostwatchwrestlinguno.py:48
-#, fuzzy
 msgid "Order by date"
-msgstr "Сортировать по: "
+msgstr "Сортировать по дате"
 
 #: ../hosts/hostwatchwrestling.py:46 ../hosts/hostwatchwrestlinguno.py:50
-#, fuzzy
 msgid "Order by likes"
-msgstr "Сортировать по: "
+msgstr "Сортировать по лайкам"
 
 #: ../hosts/hostwatchwrestling.py:45 ../hosts/hostwatchwrestlinguno.py:49
-#, fuzzy
 msgid "Order by views"
-msgstr "Сортировать по: "
+msgstr "Сортировать по просмотрам"
 
 #: ../hosts/hostgamatocom.py:75
 msgid "Order by: "
 msgstr "Сортировать по: "
 
 #: ../hosts/hosturllist.py:86
-#, fuzzy
 msgid "Other"
-msgstr "Другие"
+msgstr "Другое"
 
 #: ../hosts/hostwatchwrestlinguno.py:42 ../hosts/hostwptv.py:53
 msgid "Others"
 msgstr "Другие"
 
 #: ../hosts/hostddl.py:558
-#, fuzzy
 msgid "Others tags:"
-msgstr "Другие"
+msgstr "Другие теги:"
 
 #: ../components/iptvconfigmenu.py:84
-#, fuzzy
 msgid "Own model"
-msgstr "Режим Одна ссылка"
+msgstr "Собственная модель"
 
 #: ../hosts/hostdancetrippin.py:38
-#, fuzzy
 msgid "PARTIES"
-msgstr "АРТИСТ"
+msgstr "СТОРОНЫ"
 
 #: ../libs/filmonapi.py:89
 msgid "PAY"
-msgstr ""
+msgstr "ПЛАТНЫЕ"
 
 #: ../hosts/hostcartoonhd.py:507
 msgid "PEGI"
-msgstr ""
+msgstr "PEGI"
 
 #: ../iptvdm/iptvlist.py:107 ../Web/webParts.py:289
 msgid "PENDING"
@@ -3987,26 +3868,25 @@
 
 #: ../libs/bilasportpw.py:34 ../libs/mlbstreamtv.py:29
 msgid "PORT"
-msgstr ""
+msgstr "ПОРТ"
 
 #: ../hosts/hostinfoversion.py:249
 msgid "PROSZĘ PRZEKAŻ 1% PODATKU NA KRS 0000049063"
-msgstr ""
+msgstr "ПОЖАЛУЙСТА, ПЕРЕДАЙТЕ 1% НАЛОГА НА Р.С. 0000049063"
 
 #: ../hosts/hostdplayit.py:354
 msgid "Packages"
-msgstr ""
+msgstr "Пакеты"
 
 #: ../hosts/hosttvplayercom.py:126
 msgid "Paid"
-msgstr ""
+msgstr "Оплачено"
 
 #: ../hosts/hostfilmynadzis.py:33 ../hosts/hostekstraklasatv.py:42
 #: ../hosts/hostmrpiracy.py:49 ../hosts/hoststreamliveto.py:37
 #: ../libs/edemtv.py:40 ../libs/ustvnow.py:41 ../libs/videostar.py:46
-#, fuzzy
 msgid "Password"
-msgstr " Пароль"
+msgstr "пароль"
 
 #: ../libs/weebtv.py:38
 msgid "Password:"
@@ -4014,7 +3894,7 @@
 
 #: ../hosts/hosttwitchtv.py:104
 msgid "Past premieres"
-msgstr ""
+msgstr "Предыдущие премьеры"
 
 #: ../hosts/hostlocalmedia.py:558
 #, python-format
@@ -4027,31 +3907,31 @@
 
 #: ../Web/webParts.py:438
 msgid "Path:"
-msgstr ""
+msgstr "Маршрут:"
 
 #: ../hosts/hostorthobulletscom.py:115
 msgid "Pathology"
-msgstr ""
+msgstr "Патология"
 
 #: ../hosts/hostorthobulletscom.py:90
 msgid "Pathology Rounds"
-msgstr ""
+msgstr "Патология раундов"
 
 #: ../hosts/hostorthobulletscom.py:111
 msgid "Pediatrics"
-msgstr ""
+msgstr "Педиатрия"
 
 #: ../iptvupdate/updatemainwindow.py:369
 msgid "Pending"
-msgstr "До"
+msgstr "В ожидании"
 
 #: ../hosts/hostvimeo.py:394
 msgid "People"
-msgstr ""
+msgstr "Люди"
 
 #: ../hosts/hostorthobulletscom.py:91
 msgid "Physical Exam"
-msgstr ""
+msgstr "Экзамен физики"
 
 #: ../components/iptvconfigmenu.py:688
 msgid "Pin has been changed."
@@ -4064,11 +3944,11 @@
 
 #: ../components/iptvconfigmenu.py:365
 msgid "Pin protection for configuration"
-msgstr "Защита конфигурации настроек пин-кодом"
+msgstr "Защита конфигурации PIN-кодом"
 
 #: ../components/iptvconfigmenu.py:364
 msgid "Pin protection for plugin"
-msgstr "Защита плагина пин-кодом"
+msgstr "Защита плагина PIN-кодом"
 
 #: ../components/iptvconfigmenu.py:358 ../hosts/hostlibrestream.py:33
 msgid "Platform"
@@ -4077,41 +3957,37 @@
 #: ../iptvdm/iptvdmui.py:256 ../iptvdm/iptvdmui.py:257
 #, python-format
 msgid "Play with [%s] player"
-msgstr "Воспроизведение записи в [%s]"
+msgstr "Воспроизведение в [%s] плеере"
 
 #: ../hosts/hosttwitchtv.py:51
-#, fuzzy
 msgid "PlayStation 4"
-msgstr "Станции"
+msgstr "PlayStation 4"
 
 #: ../hosts/hostekstraklasatv.py:181
-#, fuzzy
 msgid "Playable from "
-msgstr "IPTV Плеер %s"
+msgstr "Воспроизводится с "
 
 #: ../hosts/hostfilmehdnet.py:161 ../hosts/hostfilmehdnet.py:184
-#, fuzzy
 msgid "Player"
-msgstr "IPTV Плеер %s"
+msgstr "Плеер"
 
 #: ../hosts/hostnuteczki.py:354
-#, fuzzy, python-format
+#, python-format
 msgid "Player %s"
-msgstr "IPTV Плеер %s"
+msgstr "Плеер %s"
 
 #: ../hosts/hostnuteczki.py:347
-#, fuzzy, python-format
+#, python-format
 msgid "Player %s: %s"
-msgstr "IPTV Плеер %s"
+msgstr "Плеер %s: %s"
 
 #: ../components/configextmovieplayer.py:310
-#, fuzzy
 msgid "Player Skin"
-msgstr "IPTV Плеер %s"
+msgstr "Скин плеера"
 
 #: ../hosts/hostkijknl.py:293
 msgid "Player data parsing error."
-msgstr ""
+msgstr "Ошибка анализа данных плеера."
 
 #: ../hosts/hostrtlmost.py:75 ../hosts/hostyoutube.py:61
 msgid "Playlist"
@@ -4125,29 +4001,25 @@
 #: ../tools/e2ijs.py:34
 #, python-format
 msgid "Please consider restart your Engima2 and agree to install the %s utlity when the %s will propose this."
-msgstr ""
+msgstr "Пожалуйста, подумайте о перезапуске Enigma2 и согласитесь установить утилиту %s, когда %s предложит это."
 
 #: ../hosts/hostserienstreamto.py:408 ../hosts/hostfilmezz.py:303
-#, fuzzy
 msgid "Please fill your login and password in the host configuration (available under blue button) and try again."
 msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+"Этот узел требует регистрации.\n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
 
 #: ../components/iptvplayerwidget.py:337
 msgid "Please make sure that the folder for cache data (set in the configuration) is writable."
-msgstr ""
+msgstr "Убедитесь, что папка для данных кеша (настроенная в конфигурации) доступна для записи."
 
 #: ../hosts/hostfreediscpl.py:85
-#, fuzzy
 msgid "Please register and set login and password in the host configuration, to solve this problems permanently."
-msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+msgstr "Пожалуйста, зарегистрируйтесь и установите логин и пароль в конфигурации хоста, чтобы решить эту проблему навсегда."
 
 #: ../iptvupdate/updatemainwindow.py:321
 msgid "Please remember that you use this plugin at your own risk."
-msgstr "Пожалуйста, помните, что вы используете этот плагин на свой страх и риск."
+msgstr "Пожалуйста, помните, что Вы используете этот плагин на свой страх и риск."
 
 #: ../libs/sport365live.py:128
 msgid ""
@@ -4160,34 +4032,34 @@
 #: ../libs/pCommon.py:359
 #, python-format
 msgid "Please report this problem to the developer %s."
-msgstr ""
+msgstr "Сообщите об этой проблеме разработчику %s."
 
 #: ../hosts/hostserienstreamto.py:411
 msgid "Please retry later."
-msgstr ""
+msgstr "Повторите попытку позже."
 
 #: ../components/iptvplayerwidget.py:1678
-#, fuzzy, python-format
+#, python-format
 msgid "Please set valid %s in the %s configuration."
-msgstr "IPTV-Плеер конфигурация хоста"
+msgstr "Пожалуйста, установите действительный %s в %s конфигурации."
 
 #: ../hosts/hostfreediscpl.py:84
 #, python-format
 msgid "Please visit \"%s\" and confirm that you are human."
-msgstr ""
+msgstr "Пожалуйста, посетите \"%s\" и подтвердите, что вы не робот."
 
 #: ../components/captcha_helper.py:107 ../components/recaptcha_v2helper.py:51
 #, python-format
 msgid "Please visit %s to learn how to redirect this task to the external device."
-msgstr ""
+msgstr "Посетите %s, чтобы узнать, как перенаправить эту задачу на внешнее устройство."
 
 #: ../iptvdm/iptvbuffui.py:511
 msgid "Please wait - downloading initialization data."
-msgstr ""
+msgstr "Подождите.  Загружаются данные инициализации."
 
 #: ../iptvdm/iptvbuffui.py:488
 msgid "Please wait for initialization data."
-msgstr ""
+msgstr "Дождитесь, пожалуйста, данных инициализации."
 
 #: ../setup/iptvsetupimpl.py:193
 msgid "Plugin can be run on one of the following platforms: sh4, mipsel, i686, armv7, armv5t."
@@ -4195,9 +4067,8 @@
 
 #: ../Web/webParts.py:199
 msgid "Plugin global settings"
-msgstr ""
+msgstr "Глобальные настройки плагина"
 
-#: ../components/iptvconfigmenu.py:386
 msgid "Polish proxy server url"
 msgstr "Адрес польского прокси-сервера"
 
@@ -4207,47 +4078,43 @@
 #: ../hosts/hostustreamtv.py:29 ../hosts/hostyifytv.py:72
 #: ../hosts/hostfilmativa.py:43 ../hosts/hostfilmativa.py:48
 msgid "Popular"
-msgstr "Популярный"
+msgstr "Популярные"
 
 #: ../hosts/hostthewatchseriesto.py:66
 msgid "Popular Episodes"
 msgstr "Популярные эпизоды"
 
 #: ../hosts/hostfilmoviplex.py:42
-#, fuzzy
 msgid "Popular Movies"
 msgstr "Популярные фильмы"
 
 #: ../hosts/hostfilmoviplex.py:48
-#, fuzzy
 msgid "Popular Series"
-msgstr "Популярные фильмы"
+msgstr "Популярные серии"
 
 #: ../hosts/hosttwitchtv.py:462
-#, fuzzy
 msgid "Popularity: ?"
-msgstr "Популярность"
+msgstr "Популярность: ?"
 
 #: ../hosts/hostngolos.py:25
-#, fuzzy
 msgid "Portuguese"
-msgstr "Португальский"
+msgstr "Португальские"
 
 #: ../hosts/hostorthobulletscom.py:92
 msgid "Powerpoint Presentation"
-msgstr ""
+msgstr "Презентация Powerpoint"
 
 #: ../hosts/hostorthobulletscom.py:93
 msgid "Practice Management"
-msgstr ""
+msgstr "Практика управления"
 
 #: ../hosts/hostddl.py:555
 msgid "Praise:"
-msgstr ""
+msgstr "Похвала:"
 
 #: ../hosts/hostddl.py:556
 msgid "Praises:"
-msgstr ""
+msgstr "Похвалы:"
 
 #: ../hosts/hostardmediathek.py:36 ../hosts/hostzdfmediathek.py:38
 msgid "Prefered format"
@@ -4258,9 +4125,8 @@
 msgstr "Предпочтительное качество"
 
 #: ../hosts/hosttvplayercom.py:47
-#, fuzzy
 msgid "Preferred bitrate"
-msgstr "Предпочтительный формат:"
+msgstr "Предпочтительный битрейт"
 
 #: ../hosts/hostbbciplayer.py:33 ../hosts/hostbbcsport.py:39
 #: ../hosts/hostsvtplayse.py:46 ../hosts/hosttvnowde.py:37
@@ -4268,9 +4134,8 @@
 msgstr "Предпочтительный формат:"
 
 #: ../libs/sportstream365.py:26
-#, fuzzy
 msgid "Preferred language"
-msgstr "Предпочтительное качество"
+msgstr "Предпочтительный язык"
 
 #: ../libs/videostar.py:43
 msgid "Preferred quality"
@@ -4279,16 +4144,15 @@
 #: ../hosts/hostsportdeutschland.py:31 ../libs/filmonapi.py:29
 #: ../libs/videostar.py:42
 msgid "Preferred streaming protocol"
-msgstr "Предпочтительный протокол потоковой передачи"
+msgstr "Предпочтительный протокол потока"
 
 #: ../libs/weebtv.py:39
 msgid "Preferred video quality:"
-msgstr "Выбор качества видео:"
+msgstr "Предпочтительное качество видео:"
 
 #: ../hosts/hoststreamliveto.py:136
-#, fuzzy
 msgid "Premium"
-msgstr "Премиум пользователь"
+msgstr "Премиум"
 
 #: ../libs/filmonapi.py:30 ../libs/weebtv.py:35
 msgid "Premium user"
@@ -4296,33 +4160,31 @@
 
 #: ../hosts/hostrtlmost.py:74
 msgid "Preview"
-msgstr "Предварительный просмотр"
+msgstr "Предпросмотр"
 
 #: ../hosts/hostourmatchnet.py:38
 msgid "Previous Seasons"
 msgstr "Предыдущие сезоны"
 
 #: ../Web/webParts.py:360 ../Web/webParts.py:363 ../Web/webParts.py:365
-#, fuzzy
 msgid "Previous list"
-msgstr "Предыдущий"
+msgstr "Предыдущий список"
 
 #: ../iptvupdate/updatemainwindow.py:615
-#, fuzzy
 msgid "Problem with copy binary.\n"
-msgstr "Проблема с каталогом [%s]."
+msgstr "Проблема с копированием бинарника.\n"
 
 #: ../iptvupdate/updatemainwindow.py:284
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with copy files.\n"
 "Status[%d], outData[%s]"
 msgstr ""
-"Проблема с установкой новой версии.\n"
-"Статус[%d], OutData[%s]"
+"Проблема с файлами копирования.\n"
+"Статус[%d], вых. данные[%s]"
 
 #: ../iptvupdate/updatemainwindow.py:971
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with decryption the archive. Return code [%d]\n"
 "%s."
@@ -4331,32 +4193,31 @@
 "%s."
 
 #: ../iptvupdate/updatemainwindow.py:931 ../iptvupdate/updatemainwindow.py:936
-#, fuzzy
 msgid "Problem with decryption the key."
-msgstr "Проблема с выполнением пользовательских скриптов [%s]."
+msgstr "Проблема с расшифровкой ключа."
 
 #: ../iptvupdate/updatemainwindow.py:914
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with downloading the encryption key:\n"
 "[%s]."
 msgstr ""
-"Проблема с загрузкой пакета обновления:\n"
+"Проблема с загрузкой ключа шифрования::\n"
 "[%s]."
 
 #: ../iptvupdate/updatemainwindow.py:708 ../iptvupdate/updatemainwindow.py:897
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Problem with downloading the packet:\n"
 "[%s]."
 msgstr ""
-"Проблема с загрузкой пакета обновления:\n"
+"Проблема с загрузкой пакета:\n"
 "[%s]."
 
 #: ../iptvupdate/updatemainwindow.py:760
 #, python-format
 msgid "Problem with downloading the server list from [%s]."
-msgstr "Проблема с загрузкой списка серверов от [%s]."
+msgstr "Проблема с загрузкой списка серверов из [%s]."
 
 #: ../iptvupdate/updatemainwindow.py:951
 #, python-format
@@ -4364,7 +4225,7 @@
 "Problem with extracting the archive. Return code [%d]\n"
 "%s."
 msgstr ""
-"Проблема с распаковкой архива. Код возврата [%d]\n"
+"Проблема с распаковкой архива. Возвращён код [%d]\n"
 "%s."
 
 #: ../iptvupdate/updatemainwindow.py:283
@@ -4374,12 +4235,11 @@
 "Status[%d], outData[%s]"
 msgstr ""
 "Проблема с установкой новой версии.\n"
-"Статус[%d], OutData[%s]"
+"Статус[%d], вых. данные[%s]"
 
 #: ../iptvupdate/updatemainwindow.py:801
-#, fuzzy
 msgid "Problem with parsing the server list."
-msgstr "Проблема с загрузкой списка серверов."
+msgstr "Проблема с разбором списка серверов."
 
 #: ../iptvupdate/updatemainwindow.py:228
 #, python-format
@@ -4393,21 +4253,19 @@
 "Status[%d], outData[%s]."
 msgstr ""
 "Проблема с удалением предыдущей версии.\n"
-"Статус[%d], OutData[%s]."
+"Статус[%d], вых. данные[%s]."
 
 #: ../iptvupdate/updatemainwindow.py:633
-#, fuzzy
 msgid "Problem with user script execution.\n"
-msgstr "Проблема с выполнением пользовательских скриптов [%s]."
+msgstr "Проблема с выполнением пользовательского скрипта.\n"
 
 #: ../hosts/hostorthobulletscom.py:94
 msgid "Professional Networks"
-msgstr ""
+msgstr "Профессиональные сети"
 
 #: ../hosts/hostrtlmost.py:72
-#, fuzzy
 msgid "Program"
-msgstr "Программы"
+msgstr "Программа"
 
 #: ../hosts/hostardmediathek.py:61 ../hosts/hostzdfmediathek.py:82
 #: ../hosts/hostzdfmediathek.py:97
@@ -4415,7 +4273,6 @@
 msgstr "Программа A-Z"
 
 #: ../hosts/hostrteieplayer.py:47
-#, fuzzy
 msgid "Programmes"
 msgstr "Программы"
 
@@ -4429,11 +4286,11 @@
 
 #: ../iptvdm/iptvdmui.py:264
 msgid "Promote item"
-msgstr "Переместить в начало списка"
+msgstr "Продвинуть пункт"
 
 #: ../hosts/hostbbcsport.py:172 ../hosts/hosthoofootcom.py:32
 msgid "Promoted"
-msgstr "Повышен"
+msgstr "Продвигаемые"
 
 #: ../hosts/hostwebstream.py:443
 msgid "Protocol: "
@@ -4441,67 +4298,61 @@
 
 #: ../hosts/hosthdfull.py:546
 msgid "Published:"
-msgstr ""
+msgstr "Опубликовано:"
 
 #: ../hosts/hostmovs4ucom.py:51
-#, fuzzy
 msgid "Qualities"
-msgstr "Качественный"
+msgstr "Качественные"
 
 #: ../hosts/hostlibrestream.py:32
 msgid "Quality"
-msgstr "Качественный"
+msgstr "Качество"
 
 #: ../hosts/hosthdstreams.py:200
-#, fuzzy
 msgid "Quality:"
-msgstr "Качественный"
+msgstr "Качество:"
 
 #: ../libs/canlitvliveio.py:110
 msgid "RADIO"
-msgstr ""
+msgstr "РАДИО"
 
 #: ../components/configextmovieplayer.py:316
 msgid "RAM buffer size [MB] for local files"
-msgstr ""
+msgstr "Размер буфера ОЗУ [МБ] для локальных файлов"
 
 #: ../components/configextmovieplayer.py:315
 msgid "RAM buffer size [MB] for network protocols"
-msgstr ""
+msgstr "Размер буфера ОЗУ [МБ] для сетевых протоколов"
 
 #: ../hosts/hostguardaserie.py:232
 msgid "RATING"
-msgstr ""
+msgstr "РЕЙТИНГ"
 
 #: ../hosts/hostworldfree4u.py:43
 msgid "RECENT"
-msgstr ""
+msgstr "НЕДАВНИЙ"
 
 #: ../Web/webParts.py:355
 msgid "REMEMBER: "
-msgstr ""
+msgstr "ЗАПОМНИТЕ: "
 
 #: ../hosts/hostplayrtsiw.py:100
-#, fuzzy
 msgid "Radio"
-msgstr "Радио в прямом эфире"
+msgstr "Радио"
 
 #: ../components/configextmovieplayer.py:375
-#, fuzzy
 msgid "Radio iframe file"
-msgstr "Расположение очистить заставки"
+msgstr "Файл чёрного поля для радио"
 
 #: ../hosts/hostdrdk.py:39
 msgid "Radio stations"
 msgstr "Радиостанции"
 
 #: ../hosts/hostorthobulletscom.py:95
-#, fuzzy
 msgid "Radiology Rounds"
-msgstr "Радиостанции"
+msgstr "Радиотуры"
 
 #: ../hosts/hostcartoonhd.py:522
-#, fuzzy
 msgid "Raiting"
 msgstr "Рейтинг"
 
@@ -4511,13 +4362,12 @@
 msgstr "Случайный"
 
 #: ../hosts/hostfilmoviplex.py:46
-#, fuzzy
 msgid "Random Movies"
-msgstr "Новые фильмы"
+msgstr "Случайные фильмы"
 
 #: ../components/iptvplayerwidget.py:602
 msgid "Randomize a playlist"
-msgstr "Функция случайного воспроизведения"
+msgstr "Случайное воспроизведение"
 
 #: ../hosts/hostdailymotion.py:53
 msgid "Ranking"
@@ -4531,42 +4381,38 @@
 msgstr "Рейтинг"
 
 #: ../hosts/hostcineto.py:134
-#, fuzzy, python-format
+#, python-format
 msgid "Rating %s"
-msgstr "Рейтинг"
+msgstr "Рейтинг %s"
 
 #: ../hosts/hostddl.py:539 ../hosts/hostmovizlandcom.py:233
 #: ../hosts/hostfaselhdcom.py:126
-#, fuzzy
 msgid "Rating:"
-msgstr "Рейтинг"
+msgstr "Рейтинг:"
 
 #: ../hosts/hostgreekdocumentaries3.py:32 ../hosts/hosttwitchtv.py:110
 msgid "Recent"
-msgstr "Последний"
+msgstr "Недавние"
 
 #: ../hosts/hostgreekdocumentaries3.py:33
 msgid "Recommended"
 msgstr "Рекомендуемые"
 
 #: ../hosts/hostorthobulletscom.py:112
-#, fuzzy
 msgid "Recon"
-msgstr "Секунда"
+msgstr "Рекон."
 
 #: ../hosts/hosthitboxtv.py:268
-#, fuzzy
 msgid "Recordings"
-msgstr "IPTV Записи"
+msgstr "Записи"
 
 #: ../Web/webSite.py:67
-#, fuzzy
 msgid "Redirect"
-msgstr "Прямая ссылка"
+msgstr "Переадресация"
 
 #: ../components/iptvplayerwidget.py:173
 msgid "Refresh"
-msgstr "Обновление"
+msgstr "Освежить"
 
 #: ../components/iptvplayerwidget.py:1821
 #: ../components/iptvsubdownloader.py:467
@@ -4574,27 +4420,24 @@
 msgstr "Обновляется"
 
 #: ../hosts/hostfilmstreamhdit.py:187
-#, fuzzy
 msgid "Release:"
-msgstr "Релизы"
+msgstr "Выпуск:"
 
 #: ../hosts/hostmovs4ucom.py:52 ../hosts/hostyifytv.py:71
 msgid "Releases"
-msgstr "Релизы"
+msgstr "Выпуски"
 
 #: ../hosts/hostaltadefinizione01.py:303 ../hosts/hostcb01.py:346
-#, fuzzy
 msgid "Relese"
-msgstr "Релизы"
+msgstr "Выпуск"
 
 #: ../libs/youtubeparser.py:34
 msgid "Relevance"
-msgstr "Актуальный"
+msgstr "Актуальность"
 
 #: ../Web/webParts.py:366
-#, fuzzy
 msgid "Reload list"
-msgstr "Плейлист"
+msgstr "Обновить список"
 
 #: ../components/configextmovieplayer.py:307
 msgid "Remember last watched position"
@@ -4605,13 +4448,13 @@
 msgstr "Удалить"
 
 #: ../components/playerselector.py:487
-#, fuzzy, python-format
+#, python-format
 msgid "Remove \"%s\" item"
-msgstr "Удалить элементы"
+msgstr "Удалить пункт \"%s\""
 
 #: ../components/iptvconfigmenu.py:360
 msgid "Remove disabled services"
-msgstr "Удалить сервисы которые не работают"
+msgstr "Удалить неиспользуемые сервисы"
 
 #: ../iptvdm/iptvdmui.py:262
 msgid "Remove file"
@@ -4624,7 +4467,7 @@
 
 #: ../components/iptvfavouriteswidgets.py:298 ../iptvdm/iptvdmui.py:263
 msgid "Remove item"
-msgstr "Удалить элементы"
+msgstr "Удалить элемент"
 
 #: ../iptvupdate/updatemainwindow.py:381
 msgid "Removing unnecessary files."
@@ -4635,13 +4478,12 @@
 msgstr "Переименовать"
 
 #: ../hosts/hostwatchwrestlinguno.py:32
-#, fuzzy
 msgid "Replay Shows"
-msgstr "ТВ Шоу"
+msgstr "Повторные шоу"
 
 #: ../Web/webParts.py:63 ../Web/webParts.py:80
 msgid "Reset State"
-msgstr ""
+msgstr "Состояние сброса"
 
 #: ../libs/hcaptcha_2captcha.py:100
 #, python-format
@@ -4649,6 +4491,8 @@
 "Resolving hCaptcha with %s failed!\n"
 "\n"
 msgstr ""
+"Не удалось решить hКапча с %s!\n"
+"\n"
 
 #: ../libs/recaptcha_v2_2captcha.py:96 ../libs/recaptcha_v2_9kw.py:88
 #: ../libs/recaptcha_v3_2captcha.py:88
@@ -4657,6 +4501,8 @@
 "Resolving reCaptcha with %s failed!\n"
 "\n"
 msgstr ""
+"Решение reCaptcha с %s не удалось!\n"
+"\n"
 
 #: ../iptvupdate/updatemainwindow.py:334
 msgid ""
@@ -4667,23 +4513,20 @@
 "Пожалуйста, перезагрузите тюнер вручную."
 
 #: ../Web/webParts.py:368
-#, fuzzy
 msgid "Return to hosts list"
-msgstr "Список мультфильмов"
+msgstr "Возврат в список хостов"
 
 #: ../components/iptvplayerwidget.py:603
 msgid "Reverse a playlist"
 msgstr "Повторить плейлист"
 
 #: ../hosts/hostlookmovieag.py:81
-#, fuzzy
 msgid "Romance Movies"
-msgstr "Новые фильмы"
+msgstr "Романтические фильмы"
 
 #: ../hosts/hostmovie4kto.py:34
-#, fuzzy
 msgid "Russian"
-msgstr "Россия"
+msgstr "Русские"
 
 #: ../components/iptvconfigmenu.py:388
 msgid "Russian proxy server url"
@@ -4691,29 +4534,28 @@
 
 #: ../hosts/hostplayrtsiw.py:438
 msgid "SHOWS"
-msgstr ""
+msgstr "ШОУ"
 
 #: ../hosts/hostmusicmp3ru.py:325
 msgid "SONGS"
-msgstr ""
+msgstr "ПЕСНИ"
 
 #: ../iptvdm/iptvdmui.py:172 ../Web/webParts.py:250
 msgid "STARTED"
-msgstr "ОПЕРАЦИИ"
+msgstr "ЗАПУЩЕН"
 
 #: ../iptvdm/iptvdmui.py:173 ../Web/webParts.py:246
 msgid "STOPPED"
 msgstr "ОСТАНОВЛЕН"
 
 #: ../hosts/hostsportitalia.py:78
-#, fuzzy
 msgid "Saturday"
-msgstr "Рекомендуемые"
+msgstr "Суббота"
 
 #: ../components/configbase.py:82 ../components/iptvmultipleinputbox.py:35
 #: ../components/iptvmultipleinputbox.py:100 ../Web/webTools.py:54
 msgid "Save"
-msgstr ""
+msgstr "Сохранить"
 
 #: ../components/configbase.py:196 ../components/iptvfavouriteswidgets.py:273
 msgid "Save changes?"
@@ -4721,12 +4563,11 @@
 
 #: ../hosts/hosteurosportplayer.py:107 ../libs/showsporttvcom.py:134
 msgid "Schedule"
-msgstr ""
+msgstr "Расписание"
 
 #: ../hosts/hostlookmovieag.py:74
-#, fuzzy
 msgid "Sci-Fi Movies"
-msgstr "HD Фильмы"
+msgstr "Научная фантастика"
 
 #: ../hosts/hostgamatocom.py:90
 msgid "Score at least: "
@@ -4817,14 +4658,13 @@
 msgstr "Поиск"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:52
-#, fuzzy
 msgid "Search Movies and TV Series"
-msgstr "Поиск фильмов"
+msgstr "Поиск фильмов и сериалов"
 
 #: ../hosts/hostplayrtsiw.py:438 ../hosts/hostplayrtsiw.py:454
-#, fuzzy, python-format
+#, python-format
 msgid "Search for \"%s\", %s, %s %s"
-msgstr "Поиск фильма \"%s\""
+msgstr "Искать \"%s\", %s, %s %s"
 
 #: ../components/e2ivk.py:716 ../hosts/host123movieshd.py:126
 #: ../hosts/host3player.py:60 ../hosts/host3sktv.py:78 ../hosts/host7tvde.py:56
@@ -4911,22 +4751,20 @@
 msgstr "История поиска"
 
 #: ../Web/webTools.py:39
-#, fuzzy
 msgid "Search in "
-msgstr "Поиск "
+msgstr "Поиск в "
 
 #: ../Web/webParts.py:478
 msgid "Search in all active hosts"
-msgstr ""
+msgstr "Поиск на всех активных хостах"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:52
-#, fuzzy
 msgid "Search only in Movies"
-msgstr "Поиск фильмов"
+msgstr "Искать только в фильмах"
 
 #: ../subproviders/subprov_opensubtitlesorg2.py:52
 msgid "Search only in TV Series"
-msgstr ""
+msgstr "Искать только в телесериалах"
 
 #: ../components/iptvplayerwidget.py:1806
 msgid "Search results"
@@ -4938,22 +4776,22 @@
 
 #: ../hosts/hostyoutube.py:55
 msgid "Search youtube materials "
-msgstr "Поиск материалов в YouTube"
+msgstr "Поиск YouTube материалов"
 
 #: ../Web/webSite.py:181
-#, fuzzy, python-format
+#, python-format
 msgid "Searching in %s, please wait (%d)"
-msgstr "Идет обработка, пожалуйста, подождите."
+msgstr "Поиск в %s. Пожалуйста, подождите (%d)"
 
 #: ../components/iptvsubdownloader.py:660
 #, python-format
 msgid "Searching subtitles for \"%s\""
-msgstr "Поиск субтитры для \"%s\""
+msgstr "Поиск субтитров для \"%s\""
 
 #: ../Web/webSite.py:179
-#, fuzzy, python-format
+#, python-format
 msgid "Searching, please wait (%d)"
-msgstr "Идет обработка, пожалуйста, подождите."
+msgstr "Поиск. Пожалуйста, подождите (%d)"
 
 #: ../hosts/hostgovodtv.py:179 ../hosts/hostcartoonhd.py:223
 #: ../hosts/hostddl.py:435 ../hosts/hostdixmax.py:370
@@ -4962,7 +4800,7 @@
 #: ../hosts/hostfilmoviplex.py:344 ../libs/moonwalkcc.py:258
 #: ../subproviders/subprov_napiprojektpl.py:206
 msgid "Season"
-msgstr "Время года"
+msgstr "Сезон"
 
 #: ../hosts/hosthd1080online.py:143 ../hosts/hostplusdede.py:306
 #: ../hosts/hostuktvplay.py:162 ../subproviders/subprov_napisy24pl.py:227
@@ -4971,79 +4809,74 @@
 #: ../subproviders/subprov_titlovicom.py:101
 #, python-format
 msgid "Season %s"
-msgstr "Время года %s"
+msgstr "Сезон %s"
 
 #: ../hosts/hostgamatocom.py:187
-#, fuzzy, python-brace-format
+#, python-brace-format
 msgid "Season {0}"
-msgstr "Время года"
+msgstr "Сезон {0}"
 
 #: ../components/iptvconfigmenu.py:450 ../components/iptvconfigmenu.py:461
 #: ../components/iptvconfigmenu.py:472 ../components/iptvconfigmenu.py:483
 #: ../components/iptvconfigmenu.py:493
 msgid "Second movie player in buffering mode"
-msgstr "Выбор Второго плеера с режимом буферизации"
+msgstr "Второй видеоплеер в режиме буферизации"
 
 #: ../components/iptvconfigmenu.py:445 ../components/iptvconfigmenu.py:456
 #: ../components/iptvconfigmenu.py:467 ../components/iptvconfigmenu.py:478
 #: ../components/iptvconfigmenu.py:488
 msgid "Second movie player without buffering mode"
-msgstr "Выбор Второго плеера"
+msgstr "Второй видеоплеер без режима буферизации"
 
 #: ../hosts/hostted.py:122
 msgid "See all events"
-msgstr ""
+msgstr "Смотреть все события"
 
 #: ../hosts/hostted.py:111
-#, fuzzy
 msgid "See all languages"
-msgstr "Выберите язык"
+msgstr "Смотреть все языки"
 
 #: ../hosts/hostted.py:105 ../hosts/hostted.py:139
-#, fuzzy
 msgid "See all topics"
-msgstr "Все типы"
+msgstr "Смотреть все темы"
 
 #: ../Web/webParts.py:418
 msgid "Select"
-msgstr "Выбрать"
+msgstr "Выбор"
 
 #: ../components/iptvextmovieplayer.py:731
 #: ../components/iptvextmovieplayer.py:747
 #, python-format
 msgid "Select %s"
-msgstr "Выберите %s"
+msgstr "Выбор %s"
 
 #: ../components/iptvconfigmenu.py:340
-#, fuzzy
 msgid "Select GitLab repository owner"
-msgstr "Выбор каталога"
+msgstr "Выбор владельца репозитория GitLab"
 
 #: ../components/iptvplayerwidget.py:2153 ../iptvdm/iptvdmui.py:291
 msgid "Select action"
-msgstr "Выберите действие"
+msgstr "Выбор действия"
 
 #: ../components/iptvextmovieplayer.py:804
 msgid "Select audio track"
-msgstr "Выбор аудио дорожки"
+msgstr "Выбор аудиодорожки"
 
 #: ../components/iptvconfigmenu.py:607
-#, fuzzy
 msgid "Select directory"
 msgstr "Выбор каталога"
 
 #: ../components/iptvfavouriteswidgets.py:106
 msgid "Select favourite group"
-msgstr "Выбор группы избранное"
+msgstr "Выбор группы избранного"
 
 #: ../components/playerselector.py:520
-#, fuzzy
 msgid "Select group"
-msgstr "Выберите опцию"
+msgstr "Выбор группы"
 
 #: ../components/e2ivk.py:746
 msgid "Select language"
-msgstr "Выберите язык"
+msgstr "Выбор языка"
 
 #: ../components/iptvplayerwidget.py:1541
 msgid "Select link"
@@ -5051,22 +4884,21 @@
 
 #: ../components/iptvplayerwidget.py:744
 msgid "Select movie player"
-msgstr "Выбор плеера"
+msgstr "Выбор видеоплеера"
 
 #: ../components/confighost.py:154 ../components/iptvchoicebox.py:51
 #: ../components/iptvchoicebox.py:68 ../components/iptvplayerwidget.py:612
 #: ../components/playerselector.py:490
 msgid "Select option"
-msgstr "Выберите опцию"
+msgstr "Выбор опции"
 
 #: ../components/iptvimageselector.py:76
-#, fuzzy
 msgid "Select pictures"
-msgstr "Выбор услуги"
+msgstr "Выбор фотографий"
 
 #: ../components/iptvplayerwidget.py:1297
 msgid "Select service"
-msgstr "Выбор услуги"
+msgstr "Выбор сервиса"
 
 #: ../components/iptvextmovieplayer.py:912
 msgid "Select subtitles file"
@@ -5089,9 +4921,8 @@
 msgstr "Выбор каталога"
 
 #: ../components/configbase.py:267
-#, fuzzy
 msgid "Select the file"
-msgstr "Выбор файла с субтитрами"
+msgstr "Выбор файла"
 
 #: ../iptvupdate/updatemainwindow.py:836
 msgid "Select update server"
@@ -5099,17 +4930,16 @@
 
 #: ../components/iptvextmovieplayer.py:711
 msgid "Select video option"
-msgstr "Выбор видео"
+msgstr "Выбор видеоопции"
 
 #: ../Web/webParts.py:80
-#, fuzzy
 msgid "Selected hosts"
-msgstr "Выберите %s"
+msgstr "Выбранные хосты"
 
 #: ../iptvupdate/updatemainwindow.py:880
 #, python-format
 msgid "Selected version [%s]."
-msgstr "Выбранный вариант [%s]."
+msgstr "Выбранная версия [%s]."
 
 #: ../hosts/hostfreediscpl.py:107 ../hosts/hostefilmytv.py:557
 #: ../hosts/hostmooviecc.py:444 ../hosts/hostserienstreamto.py:525
@@ -5121,11 +4951,11 @@
 
 #: ../hosts/hostsportitalia.py:77
 msgid "September"
-msgstr ""
+msgstr "Сентябрь"
 
 #: ../hosts/hostforjatn.py:392
 msgid "Seriale"
-msgstr "Сериалы"
+msgstr "Сериал"
 
 #: ../hosts/hostkinotan.py:39
 msgid "Serials"
@@ -5149,39 +4979,38 @@
 msgstr "Серии"
 
 #: ../hosts/hostlibrestream.py:31
-#, fuzzy
 msgid "Series TV"
-msgstr "Серии"
+msgstr "ТВ-серии"
 
 #: ../hosts/hostthewatchseriesto.py:65
 msgid "Series list"
-msgstr "Список серии"
+msgstr "Список серий"
 
 #: ../hosts/hostcineto.py:394
 msgid "Server return 404 - Not Found."
-msgstr ""
+msgstr "Возврат сервера: 404 - страница не найдена."
 
 #: ../subproviders/subprov_napisy24pl.py:99
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "Service %s requires registration. \n"
 "Please fill your login and password in the %s configuration."
 msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+"Сервис %s требует регистрации.\n"
+"Пожалуйста, заполните свой логин и пароль в конфигурации %s."
 
 #: ../components/confighost.py:144
 #, python-format
 msgid "Service [%s] has no additional settings."
-msgstr "Конфигурация [%s] нет дополнительных настроек."
+msgstr "Сервис [%s] не имеет дополнительных настроек."
 
 #: ../components/confighost.py:67 ../components/iptvconfigmenu.py:359
 msgid "Services configuration"
-msgstr "Выбор сервисов-хостов (Нажмите OK)"
+msgstr "Конфигурация сервисов (нажмите OK)"
 
 #: ../hosts/hostiptvplayerinfo.py:50
 msgid "Services management"
-msgstr ""
+msgstr "Управление услугами"
 
 #: ../components/iptvplayerwidget.py:598
 msgid "Set active movie player"
@@ -5193,44 +5022,43 @@
 
 #: ../components/iptvconfigmenu.py:367
 msgid "Set pin code"
-msgstr "Установите пин-код"
+msgstr "Установить pin-код"
 
 #: ../hosts/hostfavourites.py:252
 msgid "Set watched"
-msgstr "Установить наблюдаемый"
+msgstr "Установить просмотренным"
 
 #: ../Web/webParts.py:80
-#, fuzzy
 msgid "Settings"
-msgstr "СМС голосование"
+msgstr "Настройки"
 
 #: ../hosts/hostorthobulletscom.py:109
 msgid "Shoulder & Elbow"
-msgstr ""
+msgstr "Плечо и локоть"
 
 #: ../components/iptvconfigmenu.py:506
 msgid "Show IPTVPlayer in extension list"
-msgstr "Показать IPTV Плеер в меню плагинов"
+msgstr "Показать IPTVPlayer в меню плагинов"
 
 #: ../components/iptvconfigmenu.py:507
 msgid "Show IPTVPlayer in main menu"
-msgstr "Показать IPTV Плеер в главном меню"
+msgstr "Показать IPTVPlayer в главном меню"
 
 #: ../hosts/hostmusicbox.py:42
 msgid "Show Youtube Api Key warnings"
-msgstr ""
+msgstr "Покаать все предупреждения Youtube Api Key"
 
 #: ../libs/videostar.py:41 ../libs/weebtv.py:57
 msgid "Show all channels"
-msgstr "Показать все каналы"
+msgstr "Недавние все каналы"
 
 #: ../components/iptvconfigmenu.py:317
 msgid "Show all version in the update menu"
-msgstr "Показать все версии в меню Обновление"
+msgstr "Показать все версии в меню обновлений"
 
 #: ../components/iptvconfigmenu.py:406
 msgid "Show download manager after adding new item"
-msgstr "Показать менеджер загрузок после добавления нового файла"
+msgstr "Показ загруз. менеджера после ввода новой задачи"
 
 #: ../hosts/hostlocalmedia.py:47
 msgid "Show file size"
@@ -5245,17 +5073,16 @@
 msgstr "Показать скрытые файлы"
 
 #: ../components/configextmovieplayer.py:373
-#, fuzzy
 msgid "Show iframe during audio playback"
-msgstr "Включить заставку в режиме ауди"
+msgstr "Показать чёрное поле во время воспроизведения звука"
 
 #: ../hosts/hosttvnowde.py:36
 msgid "Show items with DRM"
-msgstr "Показывать элементы с DRM"
+msgstr "Показывать пункты с DRM"
 
 #: ../hosts/hosttvnowde.py:35
 msgid "Show paid items (it may be illegal)"
-msgstr "Показывать платные предметы (это может быть незаконно)"
+msgstr "Показывать платные (это может быть незаконно)"
 
 #: ../components/iptvconfigmenu.py:350
 msgid "Show update icon in service selection menu"
@@ -5271,12 +5098,11 @@
 
 #: ../components/iptvsubdownloader.py:554
 msgid "Simplify the title and try again."
-msgstr "Упростить название и повторите попытку."
+msgstr "Упростите название и повторите попытку."
 
 #: ../components/e2isimpledownloader.py:42
-#, fuzzy
 msgid "Single file downloader"
-msgstr "Загрузчик простых субтитров"
+msgstr "Одиночный загрузчик файлов"
 
 #: ../components/iptvconfigmenu.py:369
 msgid "Skin"
@@ -5284,35 +5110,34 @@
 
 #: ../hosts/hostfrancetv.py:38
 msgid "Skip geo-blocked links:"
-msgstr ""
+msgstr "Пропуск геоблокированных ссылок:"
 
 #: ../iptvupdate/updatemainwindow.py:472 ../iptvupdate/updatemainwindow.py:483
 #: ../iptvupdate/updatemainwindow.py:492 ../iptvupdate/updatemainwindow.py:504
 msgid "Skipped."
-msgstr ""
+msgstr "Пропущено."
 
 #: ../setup/iptvsetupwidget.py:94
 msgid ""
 "Skipping IPTVPlayer setup may cause problems.\n"
 "Are you sure to skip IPTVPlayer setup?"
 msgstr ""
-"Пропуск установки дополнительного, может привести к дефекту плагина. \n"
-"Пропустить установку дополнительных модулей. Вы уверены?"
+"Пропуск установок IPTVPlayer может вызвать проблемы. \n"
+"Вы хотите пропустить установку?"
 
 #: ../components/configextmovieplayer.py:325
 msgid "Software decoding as"
-msgstr "Декодировать"
+msgstr "Программное декодирование, как"
 
 #: ../components/iptvconfigmenu.py:55
-#, fuzzy
 msgid "Software floating point"
-msgstr "Декодировать"
+msgstr "Программная плавающая точка"
 
 #: ../components/captcha_helper.py:57 ../components/captcha_helper.py:62
 #: ../components/captcha_helper.py:153
 #, python-format
 msgid "Solution of %s with %s has not been implemented yet"
-msgstr ""
+msgstr "Решение %s с %s ещё не реализовано"
 
 #: ../components/configextmovieplayer.py:279
 msgid "Some changes will be applied only after movie player restart."
@@ -5324,11 +5149,11 @@
 "Do you want to perform update now?"
 msgstr ""
 "Некоторые изменения будут применены только после обновления плагина.\n"
-"Вы хотите, чтобы выполнить обновление?"
+"Вы хотите выполнить обновление сейчас?"
 
 #: ../hosts/hosttvplayercom.py:257
 msgid "Sorry. TVPlayer is currently only available in the United Kingdom"
-msgstr ""
+msgstr "Сожалеем. TVPlayer в настоящее время доступен только в Великобритании"
 
 #: ../hosts/hostlocalmedia.py:46
 msgid "Sort alphabetically"
@@ -5344,14 +5169,12 @@
 
 #: ../hosts/hostyoutube.py:30
 msgid "Sort by:"
-msgstr "Сортировать по:"
+msgstr "Сортировка по:"
 
 #: ../hosts/hostfilisertv.py:118
-#, fuzzy
 msgid "Sort by: "
-msgstr "Сортировать по:"
+msgstr "Сортировка по: "
 
-#: ../hosts/hosturllist.py:32
 msgid "Sort the list:"
 msgstr "Сортировать список:"
 
@@ -5365,12 +5188,11 @@
 
 #: ../libs/weebtv.py:54
 msgid "Sorted most viewed channels now [live]"
-msgstr "Сортировка каналов, самых популярных в настоящее время [прямой эфир]"
+msgstr "Сортировка самых популярных в настоящее время каналов [прямой эфир]"
 
 #: ../hosts/hostekstraklasatv.py:167
-#, fuzzy
 msgid "Source type"
-msgstr "Тип поиска"
+msgstr "Тип источника"
 
 #: ../hosts/hosthdfull.py:34 ../hosts/hostmovie4kto.py:34
 #: ../hosts/hostngolos.py:25
@@ -5379,20 +5201,19 @@
 
 #: ../hosts/hostvumedicom.py:77
 msgid "Specialities"
-msgstr ""
+msgstr "Специальности"
 
 #: ../hosts/hostorthobulletscom.py:108
 msgid "Spine"
-msgstr ""
+msgstr "Спина"
 
 #: ../hosts/hosticefilmsinfo.py:74
 msgid "Stand-Up"
-msgstr "Встаньте"
+msgstr "Наговор"
 
 #: ../libs/weebtv.py:31
-#, fuzzy
 msgid "Standard"
-msgstr "Стандарт"
+msgstr "стандарт"
 
 #: ../hosts/hostardmediathek.py:59 ../iptvdm/iptvdmui.py:75
 #: ../Web/webParts.py:248 ../Web/webParts.py:252
@@ -5406,29 +5227,27 @@
 #: ../iptvupdate/updatemainwindow.py:83
 #, python-format
 msgid "Step [%s] cannot be aborted. Please wait."
-msgstr "Активация [%s] не может быть прервана. Пожалуйста, подождите."
+msgstr "Этап [%s] не может быть прерван. Пожалуйста, подождите."
 
 #: ../components/configextmovieplayer.py:326
 msgid "Stereo downmix mode for software decoder"
-msgstr "Стерео микширование для програмного декодера"
+msgstr "Стереомикширование для программного декодера"
 
 #: ../iptvdm/iptvdmui.py:74 ../Web/webParts.py:247 ../Web/webParts.py:251
 msgid "Stop"
 msgstr "Стоп"
 
 #: ../Web/webParts.py:299
-#, fuzzy
 msgid "Stop download"
-msgstr "Остановка загрузки"
+msgstr "Остановить загрузку"
 
 #: ../iptvdm/iptvdmui.py:261
 msgid "Stop downloading"
 msgstr "Остановка загрузки"
 
 #: ../components/iptvextmovieplayer.py:566
-#, fuzzy
 msgid "Stop playback with buffer save"
-msgstr "Выбрать плеер без режима буферизации"
+msgstr "Остановить воспроизведение с сохранением буфера"
 
 #: ../iptvdm/iptvbuffui.py:265 ../iptvdm/iptvbuffui.py:295
 msgid "Stop playing?"
@@ -5437,36 +5256,35 @@
 #: ../hosts/hostekstraklasatv.py:344
 #, python-format
 msgid "Stream starts from %s"
-msgstr ""
+msgstr "Начало потока с %s"
 
 #: ../hosts/hostappletrailers.py:96
-#, fuzzy
 msgid "Studio:"
-msgstr "Аудио"
+msgstr "Студия:"
 
 #: ../hosts/hostorthobulletscom.py:96
 msgid "Study Plan"
-msgstr ""
+msgstr "Учебный план"
 
 #: ../hosts/hostorthobulletscom.py:69
 msgid "Subspecialities"
-msgstr ""
+msgstr "Узкие специальности"
 
 #: ../components/configextmovieplayer.py:352
 msgid "Subtitle background"
-msgstr "    Фон субтитров"
+msgstr "Фон субтитров"
 
 #: ../components/configextmovieplayer.py:363
 msgid "Subtitle border color"
-msgstr "    Цвет границы субтитров"
+msgstr "Цвет границы субтитров"
 
 #: ../components/configextmovieplayer.py:361
 msgid "Subtitle border enabled"
-msgstr "    Включить границу субтитров "
+msgstr "Включить границу субтитров"
 
 #: ../components/configextmovieplayer.py:364
 msgid "Subtitle border width"
-msgstr "    Ширина границы субтитров"
+msgstr "Ширина границы субтитров"
 
 #: ../components/configextmovieplayer.py:357
 msgid "Subtitle box height"
@@ -5474,44 +5292,44 @@
 
 #: ../components/configextmovieplayer.py:354
 msgid "Subtitle box position"
-msgstr "    Позиция субтитров"
+msgstr "Позиция субтитров"
 
 #: ../components/configextmovieplayer.py:343
 msgid "Subtitle font"
-msgstr "    Шрифт субтитров"
+msgstr "Шрифт субтитров"
 
 #: ../components/configextmovieplayer.py:351
 msgid "Subtitle font color"
-msgstr "    Цвет шрифта субтитров"
+msgstr "Цвет шрифта субтитров"
 
 #: ../components/configextmovieplayer.py:344
 msgid "Subtitle font size"
-msgstr "    Размер шрифта субтитров"
+msgstr "Размер шрифта субтитров"
 
 #: ../components/configextmovieplayer.py:346
 #: ../components/configextmovieplayer.py:349
 msgid "Subtitle line height"
-msgstr "    Высота строки субтитров"
+msgstr "Высота строки субтитров"
 
 #: ../components/configextmovieplayer.py:342
 msgid "Subtitle line wrapping"
-msgstr "    Перенос строк субтитров"
+msgstr "Перенос строк субтитров"
 
 #: ../components/configextmovieplayer.py:369
 msgid "Subtitle shadow X offset"
-msgstr "    Смещение тени субтитров по X"
+msgstr "Смещение тени субтитров по X"
 
 #: ../components/configextmovieplayer.py:370
 msgid "Subtitle shadow Y offset"
-msgstr "    Смещение тени субтитров по Y"
+msgstr "Смещение тени субтитров по Y"
 
 #: ../components/configextmovieplayer.py:368
 msgid "Subtitle shadow color"
-msgstr "    Цвет тени субтитров"
+msgstr "Цвет тени субтитров"
 
 #: ../components/configextmovieplayer.py:366
 msgid "Subtitle shadow enabled"
-msgstr "    Включить тени субтитров"
+msgstr "Включить тени субтитров"
 
 #: ../components/configextmovieplayer.py:358
 msgid "Subtitle vertical alignment"
@@ -5524,16 +5342,16 @@
 #: ../components/iptvsubdownloader.py:519
 #, python-format
 msgid "Subtitles \"%s\" downloaded correctly."
-msgstr "Субтитры \"%s\" скачал правильно."
+msgstr "Субтитры \"%s\" загружены правильно."
 
 #: ../components/iptvsubsimpledownloader.py:176
 msgid "Subtitles conversion to UTF-8 failed."
-msgstr "Субтитры преобразование в UTF-8 не удалось."
+msgstr "Преобразование субтитров в UTF-8 не удалось."
 
 #: ../components/iptvsubsimpledownloader.py:144
 #, python-format
 msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
-msgstr "Субтитры загружены успешно. [%s], преобразование в UTF-8."
+msgstr "Субтитры загружены успешно. [%s], преобразовано в UTF-8."
 
 #: ../components/iptvsubsimpledownloader.py:200
 #, python-format
@@ -5546,61 +5364,61 @@
 
 #: ../hosts/hostsportitalia.py:78
 msgid "Sunday"
-msgstr ""
+msgstr "Воскресенье"
 
 #: ../hosts/hostorthobulletscom.py:97
 msgid "Surgical Approaches"
-msgstr ""
+msgstr "Хирургические подходы"
 
 #: ../hosts/hostorthobulletscom.py:98
 msgid "Surgical Cases"
-msgstr ""
+msgstr "Хирургические случаи"
 
 #: ../hosts/hostorthobulletscom.py:99
 msgid "Surgical Complications"
-msgstr ""
+msgstr "Хирургические осложнения"
 
 #: ../hosts/hostorthobulletscom.py:100
 msgid "Surgical Techniques"
-msgstr ""
+msgstr "Хирургические методы"
 
 #: ../components/iptvextmovieplayer.py:856
 msgid "Synchronize"
-msgstr "Синхронизировать"
+msgstr "Синхронизизация"
 
 #: ../components/iptvconfigmenu.py:84
 msgid "System"
-msgstr ""
+msgstr "Система"
 
 #: ../hosts/hostmythewatchseries.py:65
 msgid "THIS WEEK'S SERIES POPULAR"
-msgstr ""
+msgstr "ПОПУЛЯРНАЯ СЕРИЯ ЭТОЙ НЕДЕЛИ"
 
 #: ../hosts/hostnuteczki.py:92
 msgid "TOP 10"
-msgstr ""
+msgstr "ТОП 10"
 
 #: ../libs/skylinewebcamscom.py:71
 msgid "TOP live cams"
-msgstr ""
+msgstr "ТОП онлайн-камер"
 
 #: ../hosts/hostforjatn.py:193 ../hosts/hostgamatotvme.py:200
 msgid "TRAILER"
-msgstr ""
+msgstr "ТРЭЙЛЕР"
 
 #: ../hosts/hostplayrtsiw.py:100 ../hosts/hostredbull.py:51
 #: ../libs/canlitvliveio.py:109
 msgid "TV"
-msgstr ""
+msgstr "ТВ"
 
 #: ../hosts/hosthdstreams.py:71
 msgid "TV SERIES"
-msgstr ""
+msgstr "ТЕЛЕСЕРИАЛЫ"
 
 #: ../hosts/hostlookmovieag.py:55 ../hosts/hostlookmovieag.py:286
 #: ../hosts/hostmovienightws.py:31 ../hosts/hostfilma24hdcom.py:32
 msgid "TV Series"
-msgstr "Телесериал"
+msgstr "Телесериалы"
 
 #: ../hosts/hostmrpiracy.py:688
 msgid "TV Show"
@@ -5608,7 +5426,7 @@
 
 #: ../hosts/hosticefilmsinfo.py:72
 msgid "TV Shows"
-msgstr "ТВ Шоу"
+msgstr "ТВ-шоу"
 
 #: ../hosts/hostdrdk.py:38
 msgid "TV channels"
@@ -5617,29 +5435,27 @@
 #: ../hosts/hostgreekdocumentaries3.py:34 ../hosts/hostegybest.py:65
 #: ../hosts/hostfilmativa.py:37
 msgid "TV series"
-msgstr "Телесериал"
+msgstr "Телесериалы"
 
 #: ../hosts/hostkinotan.py:40 ../hosts/hostmovie4kto.py:68
 msgid "TV shows"
 msgstr "ТВ шоу"
 
 #: ../hosts/hostvidcorncom.py:489
-#, fuzzy
 msgid "TV status"
-msgstr "Статус текст"
+msgstr "Статус ТВ"
 
 #: ../hosts/hostfilmeonlineto.py:111
-#, fuzzy
 msgid "TV-Series"
-msgstr "Телесериал"
+msgstr "ТВ-сериалы"
 
 #: ../hosts/hostted.py:74 ../hosts/hostted.py:352 ../hosts/hostted.py:609
 msgid "Talks"
-msgstr ""
+msgstr "Беседы"
 
 #: ../hosts/hostorthobulletscom.py:101
 msgid "Techniques"
-msgstr ""
+msgstr "Методы"
 
 #: ../hosts/hosturllist.py:31
 msgid "Text files ytlist and urllist are in:"
@@ -5651,39 +5467,38 @@
 msgstr "Утилита \"%s\" используется в IPTV Плеере."
 
 #: ../setup/iptvsetupimpl.py:1104
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s as external movie player based on the ffmpeg and libeplayer."
-msgstr "Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера.на основе FFmpeg и libeplayer."
+msgstr "Утилита \"%s\" используется %s, как внешний проигрыватель фильмов на основе ffmpeg и libeplayer."
 
 #: ../setup/iptvsetupimpl.py:1151
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s as external movie player."
-msgstr "Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера."
+msgstr "Утилита \"%s\" используется %s, как внешний проигрыватель фильмов."
 
 #: ../setup/iptvsetupimpl.py:523 ../setup/iptvsetupimpl.py:585
 #: ../setup/iptvsetupimpl.py:1048
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s to buffering and downloading [%s] links."
-msgstr "Утилита \"%s\" используется IPTV Плеером для кэширования и загрузки материала из ссылок [%s]."
+msgstr "Утилита \"%s\" используется %s для буферизации и загрузки ссылок [%s]."
 
 #: ../setup/iptvsetupimpl.py:641
-#, fuzzy, python-format
+#, python-format
 msgid "The \"%s\" utility is used by the %s to determine the encoding of the text."
-msgstr "В \"%s\" утилита используется IPTV Плеером для определения кодировки текста."
+msgstr "Утилита \"%s\" используется %s для определения кодировки текста."
 
 #: ../tools/e2ijs.py:33
 #, python-format
 msgid "The %s utility is necessary here but it was not detected."
-msgstr ""
+msgstr "Здесь нужна утилита %s, но она не была обнаружена."
 
 #: ../subproviders/subprov_youtubecom.py:53
 msgid "The YouTube video ID is invalid."
-msgstr ""
+msgstr "Идентификатор видео YouTube недействителен."
 
 #: ../hosts/hostiptvplayerinfo.py:27
-#, fuzzy
 msgid "The color of the current version"
-msgstr "Цвет из часов эд пункта"
+msgstr "Цвет текущей версии"
 
 #: ../hosts/hostfavourites.py:33
 msgid "The color of the viewed item"
@@ -5691,7 +5506,7 @@
 
 #: ../components/iptvconfigmenu.py:320
 msgid "The default aspect ratio for the external player"
-msgstr ""
+msgstr "Соотношение сторон по умолчанию для внешнего плеера"
 
 #: ../hosts/hostmaxtvgo.py:120 ../hosts/hostorthobulletscom.py:206
 #: ../hosts/hostplusdede.py:518 ../hosts/hostrtlmost.py:381
@@ -5701,18 +5516,18 @@
 "The host %s requires registration. \n"
 "Please fill your login and password in the host configuration. Available under blue button."
 msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+"Узел %s требует регистрации. \n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
 
 #: ../hosts/hostfilmynadzis.py:87 ../hosts/hostdixmax.py:114
 #: ../hosts/hostekstraklasatv.py:100 ../hosts/hosteurosportplayer.py:562
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "The host %s requires subscription.\n"
 "Please fill your login and password in the host configuration - available under blue button."
 msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+"Хост %s требует подписки.\n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
 
 #: ../components/iptvconfigmenu.py:504
 msgid "The number of items in the search history"
@@ -5725,11 +5540,12 @@
 "It will be saved in the file:\n"
 "\"%s\""
 msgstr ""
+"Буфер воспроизведения был перемещен в диспетчер загрузки.\n"
+"\"%s\""
 
 #: ../components/iptvconfigmenu.py:337
-#, fuzzy
 msgid "The preferred update server"
-msgstr "Выбор сервера обновлений"
+msgstr "Предпочтительный сервер обновлений"
 
 #: ../iptvupdate/updatemainwindow.py:224
 #, python-format
@@ -5738,32 +5554,29 @@
 
 #: ../tools/iptvfavourites.py:147
 msgid "The same item already exists in this group."
-msgstr "То же самое, элемент уже существует в этой группе."
+msgstr "Такой же элемент уже существует в этой группе."
 
 #: ../components/iptvfavouriteswidgets.py:107
 msgid "There are no other favourite groups"
-msgstr "Там нет группы избранное."
+msgstr "Нет других групп избранного"
 
 #: ../hosts/hostfrancetv.py:501
-#, fuzzy
 msgid "There are some geoblocked links. If you want to use them, change option in the host configuration, available under blue button."
-msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+msgstr "Есть несколько геоблокированных ссылок. Если вы хотите их использовать, измените опцию в конфигурации хоста. Доступно по синей кнопке."
 
 #: ../components/iptvplayerwidget.py:1105
-#, fuzzy, python-format
+#, python-format
 msgid ""
 "There is a new version available do you want to update? \n"
 "Your version [%s], latest version on server [%s]"
 msgstr ""
-"Вышла новая версия плагина. Вы хотите, обновить? \n"
+"Вышла новая версия плагина. Вы хотите обновить? \n"
 "Ваша версия [%s], новая версия на сервере [%s]."
 
 #: ../components/iptvplayerwidget.py:1683
-#, fuzzy, python-format
+#, python-format
 msgid "There is no enough free space in the folder \"%s\"."
-msgstr "На диске нет свободного места [%s]."
+msgstr "В папке \"%s\"недостаточно свободного места."
 
 #: ../components/iptvplayerwidget.py:1376
 #, python-format
@@ -5771,9 +5584,8 @@
 msgstr "На диске нет свободного места [%s]."
 
 #: ../components/iptvplayerwidget.py:1229
-#, fuzzy
 msgid "There is no hosts in this group."
-msgstr "То же самое, элемент уже существует в этой группе."
+msgstr "В этой группе нет хостов."
 
 #: ../iptvupdate/updatemainwindow.py:237
 #, python-format
@@ -5786,12 +5598,11 @@
 
 #: ../iptvupdate/updatemainwindow.py:838
 msgid "There is no update for the current configuration."
-msgstr "Для текущей версии, обновления отсутствуют."
+msgstr "Для текущей версии обновления отсутствуют."
 
 #: ../tools/iptvhostgroups.py:300
-#, fuzzy
 msgid "This host has been added already to this group."
-msgstr "То же самое, элемент уже существует в этой группе."
+msgstr "Этот хост уже добавлен в эту группу."
 
 #: ../libs/edemtv.py:93
 msgid ""
@@ -5799,32 +5610,31 @@
 "Please fill your login and password in the host configuration. Available under blue button."
 msgstr ""
 "Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
+"Заполните свой логин и пароль в конфигурации хоста. Доступен по синей кнопке."
 
 #: ../hosts/hostseriesonline.py:90
 msgid "This site is protected with Google reCaptcha v2."
-msgstr ""
+msgstr "Этот сайт защищен google recaptcha v2."
 
 #: ../setup/iptvsetupimpl.py:244
 msgid "This step is required to proper select binaries for installation."
-msgstr ""
+msgstr "Этот шаг необходим для правильного выбора исполняемых файлов для установки."
 
 #: ../hosts/hostlookmovieag.py:82
-#, fuzzy
 msgid "Thriller Movies"
-msgstr "Новые фильмы"
+msgstr "Триллеры"
 
 #: ../hosts/hostsportitalia.py:78
 msgid "Thursday"
-msgstr ""
+msgstr "Четверг"
 
 #: ../components/iptvplayerwidget.py:1689
 msgid "Tip! You can connect USB flash drive to fix this problem."
-msgstr ""
+msgstr "Совет! Вы можете подключить USB-накопитель, чтобы решить эту проблему."
 
 #: ../Web/webParts.py:434
 msgid "Title:"
-msgstr ""
+msgstr "Заглавие:"
 
 #: ../libs/urlparser.py:2168
 msgid ""
@@ -5832,35 +5642,32 @@
 "Please fill your login and password in the IPTVPlayer configuration."
 msgstr ""
 "Для просмотра видео с http://vk.com/ необходимо авторизоваться на сайте.\n"
-"Пожалуйста , заполните свой логин и пароль в конфигурации IPTVPlayer."
+"Пожалуйста, введите свой логин и пароль в конфигурацию IPTVPlayer."
 
 #: ../hosts/hosteurosportplayer.py:446 ../hosts/hosttvnowde.py:146
 msgid "Today"
-msgstr ""
+msgstr "Сегодня"
 
 #: ../hosts/hostefilmytv.py:111 ../hosts/hostefilmytv.py:121
 #: ../hosts/hostfilmpalast.py:52
 msgid "Top"
-msgstr "Высший"
+msgstr "Популярное"
 
 #: ../hosts/hostyifytv.py:73
-#, fuzzy
 msgid "Top +250"
-msgstr "Топ 100"
+msgstr "Топ +250"
 
 #: ../hosts/hostfilmoviplex.py:44
 msgid "Top Movies"
 msgstr "Лучшие фильмы"
 
 #: ../hosts/hostfilmoviplex.py:50
-#, fuzzy
 msgid "Top Series"
 msgstr "Лучшие серии"
 
 #: ../hosts/hostserijeonline.py:54
-#, fuzzy
 msgid "Top Videos"
-msgstr "Видео"
+msgstr "Лучшие видео"
 
 #: ../hosts/hostfilmezz.py:68
 msgid "Top movies"
@@ -5876,7 +5683,7 @@
 
 #: ../hosts/hostlocalmedia.py:412 ../hosts/hostlocalmedia.py:430
 msgid "Total size: "
-msgstr "Размер файла: "
+msgstr "Общий размер: "
 
 #: ../hosts/hostgamatocom.py:248 ../hosts/hosthdfilmetv.py:278
 #: ../hosts/hosthdfilmetv.py:283 ../hosts/hostegybest.py:208
@@ -5886,9 +5693,9 @@
 msgstr "Трейлер"
 
 #: ../hosts/hostdardarkomcom.py:196
-#, fuzzy, python-format
+#, python-format
 msgid "Trailer - %s"
-msgstr "Трейлеры"
+msgstr "Трейлер - %s"
 
 #: ../hosts/hosthdfilmetv.py:38
 msgid "Trailers"
@@ -5904,39 +5711,36 @@
 
 #: ../hosts/hostorthobulletscom.py:107
 msgid "Trauma"
-msgstr ""
+msgstr "Травма"
 
 #: ../hosts/hostorthobulletscom.py:102
 msgid "Treatment Consult"
-msgstr ""
+msgstr "Консультации лечения"
 
 #: ../hosts/hostdailymotion.py:54 ../hosts/hostegybest.py:61
 #: ../hosts/hostourmatchnet.py:35 ../hosts/hosttwitchtv.py:112
-#, fuzzy
 msgid "Trending"
-msgstr "До"
+msgstr "Имеющие тенденцию"
 
 #: ../hosts/hosttvplayercom.py:51
-#, fuzzy
 msgid "Try to bypass DRM (it may be illegal)"
-msgstr "Показывать платные предметы (это может быть незаконно)"
+msgstr "Попробовать обойти DRM (может быть незаконно)"
 
 #: ../hosts/hostsportitalia.py:78
 msgid "Tuesday"
-msgstr ""
+msgstr "Вторник"
 
 #: ../hosts/hostmovie4kto.py:34
 msgid "Turkish"
-msgstr "Турция"
+msgstr "Турецкий"
 
 #: ../hosts/hostwebstream.py:109
 msgid "Turn off buffering for http://prognoza.pogody.tv/"
 msgstr "Выключить буферизацию для http://prognoza.pogody.tv/"
 
 #: ../hosts/hostiptvplayerinfo.py:47
-#, fuzzy
 msgid "Tutorials"
-msgstr "Редакционный"
+msgstr "Учебники"
 
 #: ../components/ihost.py:768 ../hosts/host123movieshd.py:385
 #: ../hosts/host3player.py:408 ../hosts/host3sktv.py:303
@@ -6028,17 +5832,17 @@
 msgstr "Тип: "
 
 #: ../hosts/hostshoutcast.py:129
-#, fuzzy, python-format
+#, python-format
 msgid "Type: %s"
-msgstr "Тип: "
+msgstr "Тип: %s"
 
-#: ../components/iptvconfigmenu.py:389
+#: ../components/iptvconfigmenu.py:387
 msgid "Ukrainian proxy server url"
-msgstr "Адрес украинского прокси-сервер"
+msgstr "URL украинского прокси-сервера"
 
 #: ../hosts/hostlocalmedia.py:586
 msgid "Umount iso file"
-msgstr "Размонтирование файл iso"
+msgstr "Отмонтировать iso-файл"
 
 #: ../hosts/hostkinox.py:217 ../hosts/hostkinox.py:383
 #: ../hosts/hostserienstreamto.py:346
@@ -6046,14 +5850,13 @@
 msgstr "Неизвестный"
 
 #: ../libs/videostar.py:158
-#, fuzzy
 msgid "Unknown error."
-msgstr "Неизвестный"
+msgstr "Неизвестная ошибка."
 
 #: ../components/isubprovider.py:430
 #, python-format
 msgid "Unknown file extension \"%s\"."
-msgstr ""
+msgstr "Неизвестное расширение файла \"%s\"."
 
 #: ../components/iptvplayerwidget.py:1596
 #, python-format
@@ -6062,12 +5865,12 @@
 
 #: ../hosts/hostrtbfbe.py:547
 msgid "Unknown server response."
-msgstr ""
+msgstr "Неизвестный ответ сервера."
 
 #: ../subproviders/subprov_napiprojektpl.py:301
 #, python-format
 msgid "Unknown subtitle parser for format \"%s\"."
-msgstr ""
+msgstr "Неизвестный синтаксический анализатор субтитров для формата \"%s\"."
 
 #: ../iptvupdate/updatemainwindow.py:958
 msgid "Unpacking the archive completed successfully."
@@ -6076,7 +5879,7 @@
 #: ../components/isubprovider.py:533
 #, python-format
 msgid "Unrar error code[%s]."
-msgstr "Unrar код ошибки[%s]."
+msgstr "Код ошибки unrar [%s]."
 
 #: ../hosts/hostfavourites.py:250
 msgid "Unset watched"
@@ -6085,13 +5888,13 @@
 #: ../components/isubprovider.py:510 ../subproviders/subprov_napisy24pl.py:328
 #, python-format
 msgid "Unzip error code[%s]."
-msgstr "Распакуйте код ошибки[%s]."
+msgstr "Код ошибки распаковки [%s]."
 
 #: ../components/iptvconfigmenu.py:341 ../components/iptvconfigmenu.py:346
 #: ../components/iptvplayerwidget.py:1147
 #: ../components/iptvplayerwidget.py:1285
 msgid "Update"
-msgstr "Обновить плеер (Нажмите OK)"
+msgstr "Обновить"
 
 #: ../iptvupdate/updatemainwindow.py:350
 msgid "Update completed successfully. For the moment, the system will reboot."
@@ -6103,7 +5906,7 @@
 "Check the status by selecting interesting and pressing OK."
 msgstr ""
 "Не удалось выполнить обновление.\n"
-"Проверьте нужное вам, и нажмите OK."
+"Проверьте статус, выбрав интересное и нажав OK."
 
 #: ../iptvupdate/updatemainwindow.py:840
 msgid "Update not available."
@@ -6115,53 +5918,48 @@
 
 #: ../iptvupdate/updatemainwindow.py:900
 msgid "Update packet was downloaded successfully."
-msgstr "Обновленный пакет был успешно загружен."
+msgstr "Пакет обновлений был успешно загружен."
 
 #: ../iptvupdate/updatemainwindow.py:882
 msgid "Update server not selected."
-msgstr "Сервер обновлений не выбран."
+msgstr "Не выбран сервер обновлений."
 
 #: ../libs/youtubeparser.py:34
 msgid "Upload date"
 msgstr "Дата публикации"
 
 #: ../hosts/hosttwitchtv.py:107
-#, fuzzy
 msgid "Uploads"
-msgstr "Дата публикации"
+msgstr "Загрузки"
 
 #: ../hosts/hosturllist.py:38
 msgid "Urllists player"
-msgstr "Гиперссылки Плеер"
+msgstr "Плеер URL-списков"
 
 #: ../hosts/hostwebstream.py:110
 msgid "Use Polish proxy for http://prognoza.pogody.tv/"
-msgstr "Использовать прокси-сервер для Польского http://prognoza.pogody.tv/"
+msgstr "Использовать польский прокси-сервер для http://prognoza.pogody.tv/"
 
 #: ../hosts/hostbbciplayer.py:32 ../hosts/hostbbcsport.py:38
 #: ../hosts/hostsvtplayse.py:45 ../hosts/hostyoutube.py:34
 msgid "Use default video quality:"
-msgstr "Использовать качество видео по умолчанию:"
+msgstr "Видеокачество по умолчанию:"
 
 #: ../hosts/hostbsto.py:41 ../hosts/hostmrpiracy.py:51
-#, fuzzy
 msgid "Use links cache"
-msgstr "Ссылки пользователя"
+msgstr "Использовать кеш ссылок"
 
 #: ../hosts/hosttvplayercom.py:48
-#, fuzzy
 msgid "Use preferred bitrate"
-msgstr "Предпочтительный протокол:"
+msgstr "Исп. предпочтительный битрейт"
 
 #: ../libs/videostar.py:44
-#, fuzzy
 msgid "Use preferred quality"
-msgstr "Предпочтительное качество"
+msgstr "Исп. предпочтительное качество"
 
 #: ../hosts/hostddl.py:36
-#, fuzzy
 msgid "Use proxy"
-msgstr "Используйте прокси"
+msgstr "Использовать прокси"
 
 #: ../hosts/host123movieshd.py:31 ../hosts/hostakoam.py:30
 #: ../hosts/hostfilmstreamvkcom.py:32 ../hosts/hostcimaclubcom.py:28
@@ -6172,7 +5970,7 @@
 #: ../hosts/hostyesmoviesto.py:34 ../hosts/hostyifytv.py:37
 #: ../hosts/hostfilmeonlineto.py:33
 msgid "Use proxy server:"
-msgstr "Использовать прокси - сервер:"
+msgstr "Использовать прокси-сервер:"
 
 #: ../components/configextmovieplayer.py:317
 #: ../components/configextmovieplayer.py:318
@@ -6182,29 +5980,27 @@
 #: ../components/configextmovieplayer.py:323
 #, fuzzy, python-format
 msgid "Use software decoder for the %s"
-msgstr "Применить наружный декодер для AAC"
+msgstr "Использовать программный декодер для %s"
 
 #: ../components/iptvconfigmenu.py:428
 msgid "Use subtitles parser extension if available"
-msgstr "Использовать субтитры расширения парсер, если доступно"
+msgstr "Расширенный парсер субтитров, если доступен"
 
 #: ../components/iptvconfigmenu.py:382
 msgid "Use the PyCurl for HTTP(S) requests"
-msgstr ""
+msgstr "Использовать запросы PyCurl для HTTP(S)"
 
 #: ../hosts/hostthewatchseriesto.py:46
-#, fuzzy
 msgid "Use web proxy gateway"
-msgstr "Использовать прокси-шлюз"
+msgstr "Использовать шлюз веб-прокси"
 
 #: ../hosts/hostbbciplayer.py:34 ../hosts/hostbbcsport.py:31
 msgid "Use web-proxy (it may be illegal):"
-msgstr "Использование веб-прокси (это может быть незаконно):"
+msgstr "Использование web-прокси (может быть незаконно):"
 
 #: ../hosts/host3player.py:30 ../hosts/hostplayrtsiw.py:30
-#, fuzzy
 msgid "Use web-proxy for VODs (it may be illegal):"
-msgstr "Использование веб-прокси (это может быть незаконно):"
+msgstr "Использовать веб-прокси для VOD (может быть незаконно):"
 
 #: ../hosts/hosturllist.py:52
 msgid "User files"
@@ -6219,14 +6015,13 @@
 msgstr "Ссылки пользователя, сохраненные в файле ytlist.txt."
 
 #: ../hosts/hostfilmynadzis.py:32 ../hosts/hostekstraklasatv.py:41
-#, fuzzy
 msgid "Username"
-msgstr "Имя пользователя:"
+msgstr "Имя пользователя"
 
 #: ../hosts/hosteurosportplayer.py:541
 #, python-format
 msgid "Username in settings is different from %s"
-msgstr ""
+msgstr "Имя пользователя в настройках отличается от %s"
 
 #: ../libs/weebtv.py:37
 msgid "Username:"
@@ -6237,13 +6032,13 @@
 "Using this host in your country can be illegal.\n"
 "Do you want to continue at your own risk?"
 msgstr ""
-"Используя этот хост в вашей стране может быть незаконным.\n"
+"Использование этотго сайта в Вашей стране может быть незаконным.\n"
 "Вы хотите продолжить на свой страх и риск?"
 
 #: ../iptvdm/ffmpegdownloader.py:70
-#, fuzzy, python-format
+#, python-format
 msgid "Utility \"%s\" can not be found."
-msgstr "Фильм \"%s\" не найден."
+msgstr "Утилита \"%s\" не найдена."
 
 #: ../setup/iptvsetuphelper.py:127
 #, python-format
@@ -6251,8 +6046,8 @@
 "Utility \"%s\" has not been detected. \n"
 "Do you want to install it?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Вы хотите, установить новую?"
+"Утилита \"%s\" не была обнаружена. \n"
+"Вы хотите установить её?"
 
 #: ../setup/iptvsetuphelper.py:126
 #, python-format
@@ -6260,8 +6055,8 @@
 "Utility \"%s\" has not been detected. \n"
 "What do you want to do?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Что вы хочете сделать?"
+"Утилита \"%s\" не была обнаружена. \n"
+"Что Вы хотите сделать?"
 
 #: ../setup/iptvsetuphelper.py:129
 #, python-format
@@ -6269,8 +6064,8 @@
 "Utility \"%s\" is deprecated. \n"
 "Do you want to install new one?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Вы хотите, установить новую?"
+"Утилита \"%s\" не рекомендуется.\n"
+"Вы хотите установить новую?"
 
 #: ../setup/iptvsetuphelper.py:128
 #, python-format
@@ -6278,16 +6073,16 @@
 "Utility \"%s\" is deprecated. \n"
 "What do you want to do?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Что вы хотите сделать?"
+"Утилита \"%s\" не рекомендуется.\n"
+"Что Вы хотите сделать?"
 
 #: ../hosts/hostdancetrippin.py:39
 msgid "VENUES"
-msgstr ""
+msgstr "ПЛОЩАДКА"
 
 #: ../components/iptvconfigmenu.py:318
 msgid "VFD set current title:"
-msgstr ""
+msgstr "VFD устанавливает текущее название:"
 
 #: ../hosts/hostwatchwrestling.py:333 ../hosts/hostwatchwrestlinguno.py:293
 msgid "VIEWS"
@@ -6297,7 +6092,7 @@
 #: ../components/iptvmultipleinputbox.py:106
 #: ../components/recaptcha_v2widget.py:91
 msgid "Verify"
-msgstr "Проверить"
+msgstr "Проверка"
 
 #: ../iptvupdate/updatemainwindow.py:642
 #, python-format
@@ -6315,41 +6110,39 @@
 
 #: ../hosts/hostyoutube.py:32
 msgid "Video format:"
-msgstr "Формат видео:"
+msgstr "Видеоформат:"
 
 #: ../components/iptvextmovieplayer.py:702
 msgid "Video mode"
-msgstr "Режим видео"
+msgstr "Видеорежим"
 
 #: ../hosts/hostfilmoviplex.py:440
-#, fuzzy
 msgid "Video not found"
-msgstr "Параметры видео"
+msgstr "Видео не найдено"
 
 #: ../components/iptvextmovieplayer.py:563
 msgid "Video options"
-msgstr "Параметры видео"
+msgstr "Видеопараметры"
 
 #: ../components/iptvextmovieplayer.py:702
-#, fuzzy
 msgid "Video policy"
-msgstr "    Видео соотношение сторон по умолчанию"
+msgstr "Видеополитика"
 
 #: ../components/iptvextmovieplayer.py:702
-#, fuzzy
 msgid "Video policy for 4:3"
-msgstr "Формат видео:"
+msgstr "Видеополитика для 4:3"
 
 #: ../hosts/hosttvnowde.py:416
 msgid "Video with DRM protection."
 msgstr "Видео с защитой DRM."
 
 #: ../libs/urlparser.py:2717
-#, fuzzy
 msgid ""
 "Videomega has blocked your IP for some time.\n"
 "Please retry this link after some time."
-msgstr "Последняя ошибка: \"Videomega заблокировал ваш IP в течение некоторого времени. Пожалуйста, повторите попытку открыть эту ссылку после некоторого времени.\""
+msgstr ""
+"Videomega заблокировал Ваш IP на некоторое время.\n"
+"Повторите попытку через некоторое время."
 
 #: ../hosts/hostdailymotion.py:341 ../hosts/hostekstraklasatv.py:74
 #: ../hosts/hosthitboxtv.py:43 ../hosts/hosthitboxtv.py:48
@@ -6359,14 +6152,14 @@
 msgstr "Видео"
 
 #: ../hosts/hosttwitchtv.py:281
-#, fuzzy, python-format
+#, python-format
 msgid "Videos %s"
-msgstr "Видео"
+msgstr "Видео %s"
 
 #: ../hosts/hostuktvplay.py:137
-#, fuzzy, python-format
+#, python-format
 msgid "Videos count: %s"
-msgstr "Количество просмотров"
+msgstr "Количество видео: %s"
 
 #: ../libs/youtubeparser.py:34
 msgid "View count"
@@ -6377,47 +6170,43 @@
 msgstr "Просмотры"
 
 #: ../hosts/hosthdstreams.py:202 ../hosts/hostfaselhdcom.py:127
-#, fuzzy
 msgid "Views:"
-msgstr "Просмотры"
+msgstr "Просмотры:"
 
 #: ../libs/livetvhdnet.py:92
-#, fuzzy
 msgid "Views: "
-msgstr "Просмотры"
+msgstr "Просмотры: "
 
 #: ../hosts/hostplusdede.py:321
-#, fuzzy, python-format
+#, python-format
 msgid "Views: %s"
-msgstr "Просмотры"
+msgstr "Просмотры: %s"
 
 #: ../hosts/hostvimeo.py:30
-#, fuzzy
 msgid "Vimeo Suggestions"
-msgstr "Параметры видео"
+msgstr "Предложения Vimeo"
 
 #: ../components/e2ivk.py:352 ../components/VirtualKeyBoard.py:147
 msgid "Virtual Keyboard"
-msgstr ""
+msgstr "Виртуальная клавиатура"
 
 #: ../components/iptvconfigmenu.py:352
 msgid "Virtual Keyboard type"
-msgstr ""
+msgstr "Тип виртуальной клавиатуры"
 
 #: ../Web/webSite.py:156
 #, python-format
 msgid "Waiting search thread to stop, please wait (%d)"
-msgstr ""
+msgstr "Ожидание поисковой строки для остановки. Пожалуйста, подождите (%d)"
 
 #: ../hosts/hostlookmovieag.py:83
-#, fuzzy
 msgid "War Movies"
-msgstr "Кино"
+msgstr "Фильмы о войне"
 
 #: ../Web/webParts.py:298 ../Web/webParts.py:306 ../Web/webParts.py:314
 #: ../Web/webParts.py:322 ../Web/webParts.py:422
 msgid "Watch"
-msgstr ""
+msgstr "Просмотр"
 
 #: ../hosts/hostgreekdocumentaries3.py:155
 msgid "Watch Trailer"
@@ -6425,84 +6214,79 @@
 
 #: ../plugin.py:32
 msgid "Watch Videos Online"
-msgstr ""
+msgstr "Просмотр видео онлайн"
 
 #: ../libs/urlparser.py:8751
 msgid "We can't find the file you are looking for. It maybe got deleted by the owner or was removed due a copyright violation."
-msgstr ""
+msgstr "Мы не можем найти файл, который вы ищете. Возможно, он был удален владельцем или был удален из-за нарушения авторских прав."
 
 #: ../Web/webSite.py:106
 msgid "Web component has been reset and all threads are stopped. :)"
-msgstr ""
+msgstr "Веб-компонент был сброшен, и все потоки остановлены. :)"
 
 #: ../Web/webSite.py:108
 msgid "Web component has been reset, the following threads are still working:"
-msgstr ""
+msgstr "Веб-компонент сброшен. Продолжают работать следующие потоки:"
 
 #: ../Web/webParts.py:63 ../Web/webParts.py:80
 msgid "Web interface version"
-msgstr ""
+msgstr "Версия веб-интерфейса"
 
 #: ../hosts/hostddl.py:26
-#, fuzzy
 msgid "Web proxy"
-msgstr "Используйте прокси"
+msgstr "Веб-прокси"
 
 #: ../hosts/hostthewatchseriesto.py:47
-#, fuzzy
 msgid "Web proxy provider"
-msgstr "Использовать прокси - сервер:"
+msgstr "Поставщик web-прокси"
 
 #: ../hosts/hostsportitalia.py:78
 msgid "Wednesday"
-msgstr ""
+msgstr "Cреда"
 
 #: ../hosts/hostlookmovieag.py:84
-#, fuzzy
 msgid "Western Movies"
-msgstr "Последние фильмы"
+msgstr "Фильмы Western"
 
 #: ../iptvdm/iptvbuffui.py:530
 msgid "Whole file must be downloaded to start playback!"
-msgstr ""
+msgstr "Для начала воспроизведения необходимо загрузить весь файл!"
 
 #: ../hosts/hostsvtplayse.py:153
 msgid "With closed captioned."
-msgstr ""
+msgstr "С субтитрами."
 
 #: ../hosts/hostegybest.py:64
-#, fuzzy
 msgid "With subtitles"
-msgstr "Субтитры"
+msgstr "С субтитрами"
 
 #: ../components/iptvconfigmenu.py:319
 msgid "Write current title to file:"
-msgstr ""
+msgstr "Впишите текущий заголовок в файл:"
 
 #: ../hosts/hostorthobulletscom.py:103
 msgid "Written Boards Review"
-msgstr ""
+msgstr "Письменный обзор советов"
 
 #: ../hosts/hostmusicbox.py:92
 msgid "Wrong Youtube Api Key length"
-msgstr ""
+msgstr "Неверная длина ключа API Youtube"
 
 #: ../hosts/hoststreamliveto.py:334 ../libs/urlparser.py:4285
 msgid "Wrong answer."
 msgstr "Неверный ответ."
 
 #: ../libs/firstonetvnet.py:318
-#, fuzzy
 msgid "Wrong captcha image data!"
-msgstr "Не удалось получить данные."
+msgstr "Неверные данные изображения с картинки!"
 
 #: ../components/isubprovider.py:537
 msgid "Wrong format of rar archive."
-msgstr "Неправильный формат rar архива."
+msgstr "Неправильный формат rar-архива."
 
 #: ../components/isubprovider.py:514 ../subproviders/subprov_napisy24pl.py:332
 msgid "Wrong format of zip archive."
-msgstr "Неправильный формат почтового архива."
+msgstr "Неправильный формат zip-архива."
 
 #: ../tools/iptvfavourites.py:112 ../tools/iptvfavourites.py:168
 msgid "Wrong indexes."
@@ -6511,12 +6295,11 @@
 #: ../iptvupdate/updatemainwindow.py:916
 #, python-format
 msgid "Wrong the encryption key size: %s\n"
-msgstr ""
+msgstr "Неверный размер ключа шифрования: %s\n"
 
 #: ../subproviders/subprov_popcornsubtitles.py:53
-#, fuzzy
 msgid "Wrong uri."
-msgstr "Неверный ответ."
+msgstr "Неправильный uri."
 
 #: ../iptvupdate/updatemainwindow.py:307
 #, python-format
@@ -6526,13 +6309,13 @@
 msgstr "Неверная версия. Загруженная версия [%s] отличается от требуемой [%s]."
 
 #: ../iptvupdate/updatemainwindow.py:725
-#, fuzzy, python-format
+#, python-format
 msgid "Wrong version: [%s]."
-msgstr "Выбранный вариант [%s]."
+msgstr "Неправильная версия: [%s]."
 
 #: ../hosts/hosttwitchtv.py:51
 msgid "Xbox One"
-msgstr ""
+msgstr "Xbox One"
 
 #: ../hosts/hostaltadefinizione.py:317 ../hosts/hostaltadefinizionecool.py:229
 #: ../hosts/hostcartoonhd.py:507 ../hosts/hostlibrestream.py:30
@@ -6541,14 +6324,13 @@
 msgstr "Год"
 
 #: ../hosts/hostcineto.py:144
-#, fuzzy, python-format
+#, python-format
 msgid "Year %s"
-msgstr "Год: "
+msgstr "Год %s"
 
 #: ../hosts/hostddl.py:534
-#, fuzzy
 msgid "Year:"
-msgstr "Год: "
+msgstr "Год:"
 
 #: ../hosts/hostgamatocom.py:82 ../hosts/hostgamatocom.py:85
 #: ../hosts/hostfilisertv.py:109 ../hosts/hostfilisertv.py:112
@@ -6559,42 +6341,42 @@
 #: ../subproviders/subprov_subscenecom.py:263 ../Web/webParts.py:171
 #: ../Web/webParts.py:174 ../Web/webThreads.py:160 ../Web/webThreads.py:163
 msgid "Yes"
-msgstr ""
+msgstr "Да"
 
 #: ../hosts/hosttvnowde.py:147
 msgid "Yesterday"
-msgstr ""
+msgstr "Вчера"
 
 #: ../hosts/hostekstraklasatv.py:390
 msgid "You are not allowed to play this video"
-msgstr ""
+msgstr "Вам не разрешено воспроизводить это видео"
 
 #: ../Web/webSite.py:68
 msgid "You are using old version of OpenWebif.<br> To go to E2iPlayer web Select the following link<br>"
-msgstr ""
+msgstr "Вы используете старую версию OpenWebif. <br> Для перехода на веб-сайт E2iPlayer выберите следующую ссылку <br>"
 
 #: ../libs/pCommon.py:345
 msgid "You can disable HTTPS certificates validation in the E2iPlayer configuration to suppress this problem."
-msgstr ""
+msgstr "Вы можете отключить проверку сертификатов HTTPS в конфигурации E2iPlayer, чтобы устранить эту проблему."
 
 #: ../libs/pCommon.py:357
 msgid "You can enable PyCurl in the E2iPlayer configuration to fix this problem."
-msgstr ""
+msgstr "Вы можете включить PyCurl в конфигурации E2iPlayer, чтобы устранить эту проблему."
 
-#: ../libs/pCommon.py:361
+#: ../libs/pCommon.py:360
 #, python-format
 msgid "You can install PyCurl package from %s to fix this problem."
-msgstr ""
+msgstr "Вы можете установить пакет PyCurl из %s, чтобы решить эту проблему."
 
 #: ../components/captcha_helper.py:112 ../components/captcha_helper.py:167
 #: ../components/recaptcha_v2helper.py:56
 #, python-format
 msgid "You can use \"%s\" or \"%s\" services for automatic solution."
-msgstr ""
+msgstr "Вы можете использовать сервисы \"%s\" или \"%s\" для автоматического решения."
 
 #: ../iptvdm/iptvbuffui.py:532
 msgid "You can use external eplayer to start playback faster."
-msgstr ""
+msgstr "Вы можете использовать внешний eplayer для ускорения воспроизведения."
 
 #: ../libs/weebtv.py:181
 msgid "You do not have a premium account. Starting a sponsored broadcast."
@@ -6606,49 +6388,48 @@
 
 #: ../libs/pCommon.py:540 ../libs/pCommon.py:1670
 msgid "You should never perform block I/O operations in the __init__."
-msgstr ""
+msgstr "Вы никогда не должны выполнять операции блочного ввода-вывода в __init__."
 
 #: ../hosts/hostserienstreamto.py:46
 msgid "Your language preference:"
 msgstr "Ваши предпочтения языка:"
 
 #: ../hosts/hostdixmax.py:175
-#, fuzzy
 msgid "Your lists"
-msgstr "Предыдущий"
+msgstr "Ваши списки"
 
 #: ../components/iptvplayerwidget.py:1933
 #: ../components/iptvplayerwidget.py:1937
 msgid "Your search entry"
-msgstr "Введите тип поиска"
+msgstr "Ваша фраза поиска"
 
 #: ../suggestions/google.py:18
 msgid "Youtube Suggestions"
-msgstr ""
+msgstr "Предложения YouTube"
 
 #: ../hosts/hostmusicbox.py:100
 msgid "Youtube searches are quicker, if you fill API key in setting menu"
-msgstr ""
+msgstr "Поиск Youtube будет быстрее, если ввести ключ API в меню настроек"
 
 #: ../components/confighost.py:44
 #, python-format
 msgid "[%s] - configuration"
-msgstr "[%s] - Конфигурация"
+msgstr "[%s] - конфигурация"
 
 #: ../setup/iptvsetupimpl.py:1279
-#, fuzzy, python-format
+#, python-format
 msgid "[%s] will be used by %s."
-msgstr "[%s] Будет использоваться IPTV плеером."
+msgstr "[%s] Будет использовано %s."
 
 #: ../components/iptvplayerwidget.py:719 ../components/iptvplayerwidget.py:721
 #, python-format
 msgid "[%s] with buffering"
-msgstr "%s с буферизацией"
+msgstr "[%s] с буферизацией"
 
 #: ../components/iptvplayerwidget.py:723 ../components/iptvplayerwidget.py:725
 #, python-format
 msgid "[%s] without buffering"
-msgstr "%s без буферизации"
+msgstr "[%s] без буферизации"
 
 #: ../components/iptvconfigmenu.py:396
 msgid "[HLS/M3U8] buffering"
@@ -6660,7 +6441,7 @@
 
 #: ../hosts/hostnuteczki.py:175 ../hosts/hostnuteczki.py:292
 msgid "[Logged-in-only] "
-msgstr ""
+msgstr "[Только зарегистрированный] "
 
 #: ../components/iptvconfigmenu.py:397
 msgid "[RTMP] buffering (rtmpdump required)"
@@ -6675,239 +6456,225 @@
 msgstr ""
 
 #: ../hosts/hosttainieskaiseirestv.py:183 ../hosts/hostfilmeonlineto.py:260
-#, fuzzy
 msgid "[trailer]"
-msgstr "[Трейлер]"
+msgstr "[трейлер]"
 
 #: ../subproviders/subprov_opensubtitlesorg.py:169
 msgid "_checkStatus except error"
-msgstr "Проверка статуса, за исключением ошибок"
+msgstr "_проверка статуса, исключая ошибки"
 
 #: ../components/iptvconfigmenu.py:58
 msgid "after a week"
-msgstr "Через неделю"
+msgstr "через неделю"
 
 #: ../components/iptvconfigmenu.py:58
 msgid "after closing"
-msgstr "После закрытия"
+msgstr "после закрытия"
 
 #: ../components/iptvconfigmenu.py:58
 msgid "after day"
-msgstr "После одного дня"
+msgstr "через день"
 
 #: ../components/iptvconfigmenu.py:58
 msgid "after three days"
-msgstr "После трех дней"
+msgstr "через три дня"
 
 #: ../components/iptvconfigmenu.py:59
-#, fuzzy
 msgid "all"
-msgstr "Небольшой"
+msgstr "все"
 
 #: ../components/iptvconfigmenu.py:213
 msgid "all types"
-msgstr "Все типы"
+msgstr "все типы"
 
 #: ../hosts/hostgamatocom.py:65 ../hosts/hostgamatocom.py:85
 msgid "any"
-msgstr "Любые"
+msgstr "любые"
 
 #: ../components/configbase.py:33
 msgid "aqua"
-msgstr "Вода"
+msgstr "так себе"
 
 #: ../components/iptvconfigmenu.py:54
 msgid "armv5t"
-msgstr ""
+msgstr "armv5t"
 
 #: ../components/iptvconfigmenu.py:54
 msgid "armv7"
-msgstr ""
+msgstr "armv7"
 
 #: ../components/iptvconfigmenu.py:91 ../hosts/hostdailymotion.py:24
 msgid "auto"
-msgstr ""
+msgstr "авто"
 
 #: ../libs/videostar.py:33
 msgid "average"
-msgstr "Средний"
+msgstr "средний"
 
 #: ../components/configbase.py:32 ../components/configextmovieplayer.py:79
-#, fuzzy
 msgid "black"
-msgstr "Черный"
+msgstr "чёрный"
 
 #: ../components/configextmovieplayer.py:79
-#, fuzzy
 msgid "black&white"
-msgstr "Черный"
+msgstr "Чёрно-белый"
 
 #: ../components/configbase.py:33 ../components/configextmovieplayer.py:79
 msgid "blue"
-msgstr "Синий"
+msgstr "синий"
 
 #: ../components/configextmovieplayer.py:74
 msgid "bottom"
-msgstr "Земля"
+msgstr "нижний"
 
 #: ../components/iptvplayerwidget.py:1678
-#, fuzzy
 msgid "buffering location"
-msgstr "Продолжительность буферизации"
+msgstr "расположение буфера"
 
 #: ../components/configextmovieplayer.py:74
 msgid "center"
-msgstr "Центр"
+msgstr "центр"
 
 #: ../setup/iptvsetupimpl.py:926
 msgid "cmdwrap tool"
-msgstr ""
+msgstr "инструмент cmdwrap"
 
 #: ../components/configextmovieplayer.py:79
-#, fuzzy
 msgid "cobalt"
-msgstr "Общий"
+msgstr "кобальт"
 
 #: ../hosts/hosthitboxtv.py:88
-#, fuzzy
 msgid "countries: "
-msgstr "Страны"
+msgstr "страны: "
 
 #: ../hosts/hostardmediathek.py:402
 msgid "de"
-msgstr ""
+msgstr "de"
 
 #: ../components/configextmovieplayer.py:79 ../components/iptvconfigmenu.py:224
 #: ../components/iptvsubsimpledownloader.py:272 ../hosts/hostddl.py:29
 #: ../libs/urlparser.py:7895
 msgid "default"
-msgstr "По умолчанию"
+msgstr "по умолчанию"
 
 #: ../hosts/hosturllist.py:60
 msgid "direct link"
-msgstr "Прямая ссылка"
+msgstr "прямая ссылка"
 
 #: ../hosts/hostaltadefinizione.py:276
-#, fuzzy
 msgid "download link"
-msgstr "Загрузить снова"
+msgstr "ссылка скачивания"
 
 #: ../components/iptvplayerwidget.py:1678
-#, fuzzy
 msgid "downloads location"
-msgstr "Загрузить снова"
+msgstr "место загрузок"
 
 #: ../setup/iptvsetupimpl.py:990
 msgid "duktape"
-msgstr ""
+msgstr "duktape"
 
 #: ../hosts/hosttvnowde.py:371
-#, fuzzy, python-format
+#, python-format
 msgid "duration: %s"
-msgstr "Станции"
+msgstr "длительность: %s"
 
 #: ../components/iptvconfigmenu.py:437 ../hosts/hostfreediscpl.py:37
 #: ../hosts/hostbbcsport.py:34 ../hosts/hosteurosportplayer.py:34
 #: ../hosts/hostmrpiracy.py:48 ../hosts/hostrtbfbe.py:39
 #: ../hosts/hostserienstreamto.py:48 ../hosts/hostvidcorncom.py:36
-#, fuzzy
 msgid "e-mail"
-msgstr "Эл. адрес"
+msgstr "e-mail"
 
 #: ../hosts/hosttvplayercom.py:49 ../libs/internetowa.py:33
 #: ../libs/firstonetvnet.py:42 ../libs/goldvodtv.py:39
-#, fuzzy
 msgid "email"
-msgstr "Эл. адрес"
+msgstr "эл. адрес"
 
 #: ../hosts/hostaltadefinizione.py:256
-#, fuzzy
 msgid "embed in page"
-msgstr "Главная страница"
+msgstr "вставлять в страницу"
 
 #: ../hosts/hosttvnowde.py:371
-#, fuzzy, python-format
+#, python-format
 msgid "episode: %s"
-msgstr "Эпизоды"
+msgstr "эпизод: %s"
 
 #: ../components/iptvconfigmenu.py:91 ../components/iptvextmovieplayer.py:329
 msgid "external eplayer3"
-msgstr "Внешний eplayer3"
+msgstr "внешний eplayer3"
 
 #: ../components/iptvconfigmenu.py:91 ../components/iptvextmovieplayer.py:320
 msgid "external gstplayer"
-msgstr "Внешний gstplayer"
+msgstr "внешний gstplayer"
 
 #: ../Web/webParts.py:355
 msgid "first check if host works properly in GUI and web <b>BEFORE</b> reporting error in it !!!"
-msgstr ""
+msgstr "Cначала проверьте, правильно ли работает хост в GUI и адрес <b>ПЕРЕД</b> сообщеним об ошибке!"
 
 #: ../hosts/hostardmediathek.py:29 ../hosts/hostzdfmediathek.py:31
 msgid "format"
-msgstr "Формат"
+msgstr "формат"
 
 #: ../components/configextmovieplayer.py:44
 #: ../components/configextmovieplayer.py:45
 #: ../components/configextmovieplayer.py:51
 #: ../components/configextmovieplayer.py:52
 #: ../components/configextmovieplayer.py:53
-#, fuzzy
 msgid "from E2 settings"
-msgstr "Настройки E2"
+msgstr "из настроек E2"
 
 #: ../components/configbase.py:32
 msgid "fuchsia"
-msgstr "Фуксия"
+msgstr "фуксия"
 
 #: ../hosts/hostplayrtsiw.py:291
 msgid "geoblocked"
-msgstr ""
+msgstr "геоблокировка"
 
 #: ../components/configbase.py:32
 msgid "gray"
-msgstr "Серый"
+msgstr "серый"
 
 #: ../components/configbase.py:33 ../components/configextmovieplayer.py:79
 msgid "green"
-msgstr ""
+msgstr "зелёный"
 
 #: ../libs/hcaptcha.py:82
 msgid "hCaptcha already solved!"
-msgstr ""
+msgstr "hКапча уже решена!"
 
 #: ../libs/hcaptcha.py:1158
 msgid "hCaptcha not solved!"
-msgstr ""
+msgstr "hКапча не решена!"
 
 #: ../libs/hcaptcha.py:1154
 msgid "hCaptcha solved!"
-msgstr ""
+msgstr "hКапча решена!"
 
 #: ../hosts/hostardmediathek.py:28 ../hosts/hostzdfmediathek.py:30
 msgid "hd"
-msgstr "hd"
+msgstr "HD"
 
 #: ../hosts/hostthewatchseriesto.py:42
 msgid "hideproxy.me (DE)"
-msgstr ""
+msgstr "hideproxy.me (DE)"
 
 #: ../hosts/hostthewatchseriesto.py:42
 msgid "hideproxy.me (NL)"
-msgstr ""
+msgstr "hideproxy.me (NL)"
 
 #: ../hosts/hostthewatchseriesto.py:42
 msgid "hideproxy.me (US)"
-msgstr ""
+msgstr "hideproxy.me (US)"
 
 #: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
 #: ../hosts/hostzdfmediathek.py:30 ../libs/videostar.py:33
 msgid "high"
-msgstr "Высокий"
+msgstr "высокий"
 
 #: ../hosts/hosttvplayercom.py:36
-#, fuzzy
 msgid "highest"
-msgstr "Высокий"
+msgstr "высший"
 
 #: ../setup/iptvsetupimpl.py:866
 msgid "hlsdl downloader"
@@ -6915,11 +6682,11 @@
 
 #: ../Web/webParts.py:433
 msgid "host:"
-msgstr ""
+msgstr "хост:"
 
 #: ../components/iptvconfigmenu.py:383
 msgid "https - validate SSL certificates"
-msgstr "Проверка сертификатов SSL"
+msgstr "https - проверка сертификатов SSL"
 
 #: ../components/iptvconfigmenu.py:54
 msgid "i686"
@@ -6927,45 +6694,44 @@
 
 #: ../components/iptvconfigmenu.py:91
 msgid "internal"
-msgstr "Внутренний"
+msgstr "внутренний"
 
 #: ../components/configextmovieplayer.py:79
 msgid "jersey"
-msgstr ""
+msgstr "джерси"
 
 #: ../components/iptvconfigmenu.py:59
 msgid "jpeg"
-msgstr ""
+msgstr "jpeg"
 
 #: ../components/iptvconfigmenu.py:59
 msgid "jpeg,png"
-msgstr ""
+msgstr "jpeg,png"
 
 #: ../components/iptvconfigmenu.py:59
 msgid "jpeg,png,gif"
-msgstr ""
+msgstr "jpeg,png,gif"
 
 #: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
 #: ../hosts/hostzdfmediathek.py:27
 msgid "large"
-msgstr "Большой"
+msgstr "большой"
 
 #: ../components/iptvplayer.py:34 ../components/iptvplayer.py:35
 msgid "leave movie player..."
-msgstr "Оставить проигрыватель фильмов..."
+msgstr "покидание видеоплеера..."
 
 #: ../components/configbase.py:33
 msgid "lime"
-msgstr "Лайм"
+msgstr "лайм"
 
 #: ../components/configextmovieplayer.py:79
-#, fuzzy
 msgid "line"
-msgstr "Без чёрных полос"
+msgstr "строка"
 
 #: ../hosts/hosthitboxtv.py:88
 msgid "live since: "
-msgstr ""
+msgstr "жизнь с: "
 
 #: ../components/iptvconfigmenu.py:429 ../components/iptvconfigmenu.py:431
 #: ../components/iptvconfigmenu.py:434 ../hosts/hosthdfull.py:41
@@ -6978,36 +6744,34 @@
 #: ../hosts/hostfilmixco.py:37 ../libs/filmonapi.py:32 ../libs/wagasworld.py:35
 #: ../libs/wizjatv.py:37
 msgid "login"
-msgstr "Войти"
+msgstr "логин"
 
 #: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
 #: ../hosts/hostzdfmediathek.py:30 ../libs/videostar.py:33
 msgid "low"
-msgstr "Низкий"
+msgstr "низкий"
 
 #: ../hosts/hosttvplayercom.py:42
-#, fuzzy
 msgid "lowest"
-msgstr "Новейший"
+msgstr "наихудший"
 
 #: ../libs/webcamera.py:66
 msgid "main"
-msgstr ""
+msgstr "главное"
 
 #: ../components/configbase.py:32
 msgid "maroon"
-msgstr "Темно-бордовый"
+msgstr "каштановый"
 
 #: ../hosts/hosthitboxtv.py:72
-#, fuzzy
 msgid "media count: "
-msgstr "Количество комментариев"
+msgstr "количество медиа: "
 
 #: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
 #: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
 #: ../hosts/hostzdfmediathek.py:27 ../hosts/hostzdfmediathek.py:30
 msgid "medium"
-msgstr "Средний"
+msgstr "средний"
 
 #: ../components/iptvconfigmenu.py:54
 msgid "mipsel"
@@ -7015,24 +6779,23 @@
 
 #: ../components/configbase.py:33 ../components/configextmovieplayer.py:79
 msgid "navy"
-msgstr "Морской волны"
+msgstr "морской волны"
 
 #: ../components/iptvconfigmenu.py:165
 msgid "no"
-msgstr "Нет"
+msgstr "нет"
 
 #: ../hosts/hostmediasetplay.py:278 ../hosts/hostraiplay.py:302
-#, fuzzy
 msgid "not available"
-msgstr "Обновление недоступно."
+msgstr "не доступно"
 
 #: ../libs/urlparser.py:14000
 msgid "not in urlparser"
-msgstr ""
+msgstr "не в urlparser"
 
 #: ../components/configbase.py:33
 msgid "olive"
-msgstr "Оливковый"
+msgstr "оливковый"
 
 #: ../components/iptvconfigmenu.py:430 ../components/iptvconfigmenu.py:432
 #: ../components/iptvconfigmenu.py:435 ../components/iptvconfigmenu.py:438
@@ -7051,106 +6814,103 @@
 #: ../libs/firstonetvnet.py:43 ../libs/goldvodtv.py:40 ../libs/wagasworld.py:36
 #: ../libs/wizjatv.py:38
 msgid "password"
-msgstr "Пароль"
+msgstr "пароль"
 
 #: ../components/iptvconfigmenu.py:213
 msgid "precompiled"
-msgstr "Перекомпилированные"
+msgstr "прекомпилированные"
 
 #: ../components/iptvconfigmenu.py:83
 msgid "private"
-msgstr ""
+msgstr "частное"
 
 #: ../components/configbase.py:32
 msgid "purple"
-msgstr "Пурпурный"
+msgstr "пурпурный"
 
 #: ../setup/iptvsetupimpl.py:801
 msgid "python-cjson"
-msgstr ""
+msgstr "python-cjson"
 
 #: ../hosts/hostardmediathek.py:29 ../hosts/hostzdfmediathek.py:31
 msgid "quality"
-msgstr "Качество"
+msgstr "качество"
 
 #: ../setup/iptvsetupimpl.py:50 ../setup/iptvsetupimpl.py:61
 #: ../setup/iptvsetupimpl.py:64 ../setup/iptvsetupimpl.py:71
 #: ../setup/iptvsetupimpl.py:74 ../setup/iptvsetupimpl.py:80
 #: ../setup/iptvsetupimpl.py:86
 msgid "recommended"
-msgstr "Рекомендуемый"
+msgstr "рекомендуемые"
 
 #: ../components/configbase.py:32 ../components/configextmovieplayer.py:79
 msgid "red"
-msgstr "Красный"
+msgstr "красный"
 
 #: ../hosts/hostlocalmedia.py:120
 msgid "rootfs"
-msgstr "Корневые файлы"
+msgstr "корневая система"
 
 #: ../components/configextmovieplayer.py:48
 msgid "second"
-msgstr "Секунда"
+msgstr "секунда"
 
 #: ../components/configextmovieplayer.py:48
 #: ../components/configextmovieplayer.py:49
 #: ../components/configextmovieplayer.py:50
 msgid "seconds"
-msgstr "Секунд"
+msgstr "секунд"
 
 #: ../components/iptvconfigmenu.py:54
 msgid "sh4"
 msgstr "sh4"
 
 #: ../hosts/hostplayrtsiw.py:438
-#, fuzzy
 msgid "shows"
 msgstr "Шоу"
 
 #: ../components/configbase.py:32
 msgid "silver"
-msgstr "Серебро"
+msgstr "серебристый"
 
 #: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
 #: ../hosts/hostzdfmediathek.py:27
 msgid "small"
-msgstr "Небольшой"
+msgstr "маленький"
 
 #: ../components/iptvconfigmenu.py:91
 msgid "standard"
-msgstr "Стандарт"
+msgstr "стандарт"
 
 #: ../components/configbase.py:33
 msgid "teal"
-msgstr "Чирок"
+msgstr "чирок"
 
 #: ../hosts/hostsvtplayse.py:34 ../libs/moonwalkcc.py:31
 #: ../libs/videostar.py:33 ../libs/youtubeparser.py:30
 #: ../libs/youtube_dl/extractor/bbc.py:20
 #: ../libs/youtube_dl/extractor/vevo.py:29
 msgid "the best"
-msgstr "Лучший"
+msgstr "лучший"
 
 #: ../hosts/hostchristusvincit.py:34
-#, fuzzy
 msgid "the highest"
-msgstr "Лучший"
+msgstr "наивысшее"
 
 #: ../hosts/hostchristusvincit.py:24
-#, fuzzy
 msgid "the lowest"
-msgstr "Лучший"
+msgstr "наихудший"
 
 #: ../hosts/hostkisscartoonme.py:24 ../hosts/hostsvtplayse.py:30
 #: ../libs/moonwalkcc.py:31 ../libs/videostar.py:33 ../libs/youtubeparser.py:30
 #: ../libs/youtube_dl/extractor/bbc.py:16
 #: ../libs/youtube_dl/extractor/vevo.py:17
 msgid "the worst"
-msgstr "Худший"
+msgstr "худший"
 
 #: ../components/configextmovieplayer.py:74
 msgid "top"
-msgstr "Вверх"
+msgstr "верх"
 
 #: ../hosts/host123movieshd.py:222 ../hosts/hostakoam.py:228
 #: ../hosts/hostaltadefinizione.py:219 ../hosts/hostaltadefinizionecool.py:177
@@ -7161,72 +6921,67 @@
 #: ../hosts/hosttfarjocom.py:249 ../hosts/hostfilma24io.py:155
 #: ../hosts/hostfilmaoncom.py:220
 msgid "trailer"
-msgstr "Трейлер"
+msgstr "трейлер"
 
 #: ../components/iptvconfigmenu.py:54 ../components/iptvconfigmenu.py:92
 #: ../hosts/hosturllist.py:62
 msgid "unknown"
-msgstr "Неизвестный"
+msgstr "неизвестный"
 
 #: ../hosts/hosthitboxtv.py:72
-#, fuzzy
 msgid "updated: "
-msgstr "Обновленный"
+msgstr "обновлено: "
 
 #: ../Web/webParts.py:63 ../Web/webParts.py:80
-#, fuzzy
 msgid "version"
-msgstr "Версия"
+msgstr "версия"
 
 #: ../hosts/hostardmediathek.py:28 ../hosts/hostzdfmediathek.py:30
 msgid "very high"
-msgstr "Очень высокий"
+msgstr "очень высокий"
 
 #: ../libs/youtubeparser.py:355
 #, fuzzy, python-format
 msgid "videos: %s"
-msgstr "Видео"
+msgstr "видео: %s"
 
 #: ../hosts/hosthitboxtv.py:72
-#, fuzzy
 msgid "viewers: "
-msgstr "Просмотры"
+msgstr "зрители: "
 
 #: ../hosts/hostdailymotion.py:165
 msgid "views"
-msgstr "Просмотры"
+msgstr "просмотры"
 
 #: ../hosts/hosthitboxtv.py:88
-#, fuzzy
 msgid "views: "
-msgstr "Просмотры"
+msgstr "просмотры: "
 
 #: ../Web/webThreads.py:78
 msgid "visit site"
-msgstr ""
+msgstr "посетите сайт"
 
 #: ../components/iptvplayerwidget.py:459
-#, fuzzy, python-format
+#, python-format
 msgid "wait %s second"
-msgstr "Секунда"
+msgstr "ждать %s секунду"
 
 #: ../components/iptvplayerwidget.py:458
-#, fuzzy, python-format
+#, python-format
 msgid "wait %s seconds"
-msgstr "Секунд"
+msgstr "ждать %s секунд"
 
 #: ../hosts/hostkinogo.py:180
-#, fuzzy
 msgid "watch"
-msgstr "%s Смотреть"
+msgstr "просмотр"
 
 #: ../components/configbase.py:32
 msgid "white"
-msgstr "Белый"
+msgstr "белый"
 
 #: ../components/iptvconfigmenu.py:213
 msgid "with source code"
-msgstr "С исходным кодом"
+msgstr "с исходным кодом"
 
 #: ../components/iptvplayerwidget.py:691
 msgid "www: "
@@ -7234,1862 +6989,1756 @@
 
 #: ../components/configbase.py:33
 msgid "yellow"
-msgstr "Желтый"
+msgstr "жёлтый"
 
 #: ../components/iptvconfigmenu.py:165
 msgid "yes, to console"
-msgstr "Да, на консоле"
+msgstr "да, в консоли"
 
 #: ../components/iptvconfigmenu.py:165
 msgid "yes, to file /hdd/iptv.dbg"
-msgstr "Файл, на /hdd/iptv.dbg"
-
-#~ msgid ""
-#~ "\n"
-#~ "Please use \"Web\" streams player -> WeebTV instead."
-#~ msgstr ""
-#~ "\n"
-#~ "Пожалуйста, используйте \"Web\" потоки плеера -> вместо WeebTV."
-
-#~ msgid "    Buffer size [MB]"
-#~ msgstr "    Размер буфера [MB]"
-
-#~ msgid "  Filmy3dEU login:"
-#~ msgstr "  Filmy3dEU логин:"
-
-#~ msgid "  Filmy3dEU password:"
-#~ msgstr "  Filmy3dEU пароль:"
-
-#~ msgid "  KinomanTV login:"
-#~ msgstr "  KinomanTV Логин:"
-
-#~ msgid "  KinomanTV password:"
-#~ msgstr "  KinomanTV Пароль:"
-
-#~ msgid "  password:"
-#~ msgstr "  Пароль:"
-
-#~ msgid " - Local version"
-#~ msgstr " - Локальная версия"
-
-#~ msgid " - Remote version"
-#~ msgstr " - Удаленная версия"
-
-#~ msgid " Last.fm login:"
-#~ msgstr " Last.fm Войти:"
-
-#~ msgid " Username or Email"
-#~ msgstr " Имя пользователя или адрес электронной почты"
-
-#~ msgid "%s - configuration"
-#~ msgstr "%s - Конфигурация"
-
-#~ msgid "%s [download]"
-#~ msgstr "%s Загрузить"
-
-#~ msgid "%s items in category"
-#~ msgstr "Пункты по категориям %s сек"
-
-#~ msgid "%s viewers, %s channels"
-#~ msgstr "%s зрителей, %s каналы"
-
-#~ msgid "%s will be used by IPTVPlayer."
-#~ msgstr "%s будет использоваться в IPTVПлеере."
-
-#~ msgid "***Any***"
-#~ msgstr "***Любые***"
-
-#~ msgid "+++ XXXLIST +++"
-#~ msgstr "+++ ФАЙЛ-XXX +++"
-
-#, fuzzy
-#~ msgid "-- OK --"
-#~ msgstr "--- В эфире ---"
-
-#~ msgid "--- Best Videos ---"
-#~ msgstr "--- Лучшие Видео ---"
-
-#~ msgid "--- Cams ---"
-#~ msgstr "--- Веб-кам ---"
+msgstr "да, в файл /hdd/iptv.dbg"
 
-#~ msgid "--- Channels ---"
-#~ msgstr "--- Каналы ---"
+# # Other translate
+msgid "XXX"
+msgstr "Порновидео"
 
-#~ msgid "--- Couple ---"
-#~ msgstr "--- Пара ---"
+#: ../hosts/hostlaola1tv.py:30
+msgid "Deutsch"
+msgstr "Немецкие"
 
-#~ msgid "--- Couples ---"
-#~ msgstr "--- Пары ---"
+msgid "--- Featured videos ---"
+msgstr "--- Рекомендуемые видео ---"
 
-#~ msgid "--- Featured videos ---"
-#~ msgstr "--- Избранные видео ---"
+msgid "--- Hits ---"
+msgstr "--- Хиты ---"
 
-#~ msgid "--- Female ---"
-#~ msgstr "--- Женский ---"
+msgid "--- Hot ---"
+msgstr "--- Свежие ---"
 
-#~ msgid "--- Fetish ---"
-#~ msgstr "--- Фетиш ---"
+msgid "--- Best Videos ---"
+msgstr "--- Лучшие Видео ---"
 
-#~ msgid "--- Girl ---"
-#~ msgstr "--- Девушка ---"
+msgid "--- New Videos ---"
+msgstr "--- Новые Видео ---"
 
-#~ msgid "--- Highest Rated ---"
-#~ msgstr "--- Наивысший рейтинг ---"
+msgid "--- Tags alfabetical ---"
+msgstr "--- По алфавиту ---"
 
-#~ msgid "--- Hits ---"
-#~ msgstr "--- Хиты ---"
+msgid "--- Pornstars ---"
+msgstr "--- Порно звезды ---"
 
-#~ msgid "--- Hot ---"
-#~ msgstr "--- Горячий ---"
+msgid "--- New ---"
+msgstr "--- Новые ---"
 
-#~ msgid "--- Hot_flirt ---"
-#~ msgstr "--- Горячий Флирт ---"
+msgid "--- Top Rated ---"
+msgstr "--- Самые популярные ---"
 
-#~ msgid "--- Lastest ---"
-#~ msgstr "--- Последнее ---"
+msgid "--- Most Viewedo ---"
+msgstr "--- Наиболее просматриваемые ---"
 
-#~ msgid "--- Lesbian ---"
-#~ msgstr "--- Лесбиянка ---"
+msgid "--- Most Favorited ---"
+msgstr "--- Избранные большинством ---"
 
-#~ msgid "--- Longest ---"
-#~ msgstr "--- Самый длинный ---"
+msgid "--- Most Discussed ---"
+msgstr "--- Самые обсуждаемые ---"
 
-#~ msgid "--- Male ---"
-#~ msgstr "--- Мужчина ---"
+msgid "--- Newest ---"
+msgstr "--- Новейшие ---"
 
-#~ msgid "--- Mature ---"
-#~ msgstr "--- Зрелый ---"
+msgid "--- Most Viewed ---"
+msgstr "--- Наиболее просматриваемые ---"
 
-#~ msgid "--- Most Discussed ---"
-#~ msgstr "--- Самые обсуждаемые ---"
+msgid "--- Most Favored ---"
+msgstr "--- Пользующиеся преимуществом ---"
 
-#~ msgid "--- Most Favored ---"
-#~ msgstr "--- Наибольшего благоприятствования ---"
+msgid "--- Popular ---"
+msgstr "--- Популярные ---"
 
-#~ msgid "--- Most Favorited ---"
-#~ msgstr "--- Большинство избранном ---"
+msgid "--- On Air ---"
+msgstr "--- В эфире ---"
 
-#~ msgid "--- Most Popular ---"
-#~ msgstr "--- Самый популярный ---"
+msgid "--- Most Recent ---"
+msgstr "--- Самое новое ---"
 
-#~ msgid "--- Most Viewed ---"
-#~ msgstr "--- Наиболее просматриваемые ---"
+msgid "--- Longest ---"
+msgstr "--- Самый длинный ---"
 
-#~ msgid "--- Most Viewedo ---"
-#~ msgstr "--- Наиболее просматриваемые ---"
+msgid "--- Lastest ---"
+msgstr "--- Последние ---"
 
-#~ msgid "--- Most viewed ---"
-#~ msgstr "--- Наиболее просматриваемые ---"
+msgid "--- Highest Rated ---"
+msgstr "--- Наивысший рейтинг ---"
 
-#~ msgid "--- New ---"
-#~ msgstr "--- Новый ---"
+msgid "--- Most Popular ---"
+msgstr "--- Самый популярные ---"
 
-#~ msgid "--- New Videos ---"
-#~ msgstr "--- Новые Видео ---"
+msgid " - Local version"
+msgstr " - Локальная версия"
 
-#~ msgid "--- Newest ---"
-#~ msgstr "--- Новейший ---"
+msgid "--- Channels ---"
+msgstr "--- Каналы ---"
 
-#~ msgid "--- Popular ---"
-#~ msgstr "--- Популярный ---"
+msgid "---Search History"
+msgstr "---История поиска"
 
-#~ msgid "--- Pornstars ---"
-#~ msgstr "--- Порно звезды ---"
+msgid "---Search"
+msgstr "---Поиск"
 
-#~ msgid "--- Soul_mate ---"
-#~ msgstr "--- Родственная душа ---"
+msgid "Search "
+msgstr "Поиск "
 
-#~ msgid "--- Tags alfabetical ---"
-#~ msgstr "--- Слова алфавита ---"
+msgid "--- Cams ---"
+msgstr "--- web-камеры ---"
 
-#~ msgid "--- Top Rated ---"
-#~ msgstr "--- Самые популярные ---"
+msgid "Cams"
+msgstr "Web-камеры"
 
-#~ msgid "--- Transgender ---"
-#~ msgstr "--- Трансгендер ---"
+msgid "Update Now & Restart Enigma2"
+msgstr "Обновить сейчас и перезагрузить Enigma2"
 
-#~ msgid "--- Transsexual ---"
-#~ msgstr "--- Транссексуал ---"
+msgid "ERROR - Error unpacking %s' % source"
+msgstr "Ошибка: Сбой распаковки %s' % источник"
 
-#~ msgid "--- boy ---"
-#~ msgstr "--- Мальчик ---"
+msgid "Require pin:"
+msgstr "Требовать PIN-код:"
 
-#~ msgid "--- gay ---"
-#~ msgstr "--- Гей ---"
+msgid "File Location xxxlist.txt :"
+msgstr "Расположение файла xxxlist.txt :"
 
-#~ msgid "---Search"
-#~ msgstr "---Поиск"
+msgid "--- boy ---"
+msgstr "--- Мальчики ---"
 
-#~ msgid "---Search History"
-#~ msgstr "---История поиска"
+msgid "--- gay ---"
+msgstr "--- Геи ---"
 
-#~ msgid "---UPDATE---"
-#~ msgstr "---ОБНОВИТЬ---"
+msgid "--- Transgender ---"
+msgstr "--- Трансгендеры ---"
 
-#~ msgid "..............."
-#~ msgstr "..............."
+msgid "--- Couple ---"
+msgstr "--- Пара ---"
 
-#~ msgid "24 h"
-#~ msgstr "24 ч"
+msgid "--- Mature ---"
+msgstr "--- Зрелые ---"
 
-#~ msgid ":for"
-#~ msgstr "Для"
+msgid "--- Fetish ---"
+msgstr "--- Фетиш ---"
 
-#~ msgid "AUDIO"
-#~ msgstr "АУДИО"
+msgid "--- Lesbian ---"
+msgstr "--- Лесбиянки ---"
 
-#~ msgid "Access status: "
-#~ msgstr "Статус доступа: "
+msgid "--- Soul_mate ---"
+msgstr "--- Родственные души ---"
 
-#~ msgid "Access status: [%r]"
-#~ msgstr "Статус доступа: [%r]"
+msgid "--- Hot_flirt ---"
+msgstr "--- Горячий флирт ---"
 
-#~ msgid ""
-#~ "Access to this service requires login.\n"
-#~ "Please register on the site \"%s\" and then put your e-mail and password in the host configuration under blue button."
-#~ msgstr ""
-#~ "Для доступа к этой услуге требуется вход в систему.\n"
-#~ "Пожалуйста, зарегистрируйтесь на сайте \"%s\", после чего введите свою электронную почту и пароль в конфигурацию хоста по голубой кнопке."
+msgid "--- Girl ---"
+msgstr "--- Девушки ---"
 
-#~ msgid "Action RPG"
-#~ msgstr "Действие RPG"
+msgid "boy"
+msgstr "мальчики"
 
-#~ msgid "Advance (cookie item)"
-#~ msgstr "Авансовый (элемент cookie)"
+msgid "gay"
+msgstr "геи"
 
-#~ msgid "Albums"
-#~ msgstr "Альбомы"
+msgid "Transgender"
+msgstr "Трансгендеры"
 
-#~ msgid "All programs in the Live Stream"
-#~ msgstr "Все программы в Live Stream"
+msgid "Couple"
+msgstr "Пары"
 
-#~ msgid "Allow hls format"
-#~ msgstr "Разрешить формат hls"
+msgid "Mature"
+msgstr "Зрелые"
 
-#~ msgid "Alternative geolocation IP 1:"
-#~ msgstr "Альтернативная геолокация IP 1:"
+msgid "Fetish"
+msgstr "Фетиш"
 
-#~ msgid "Alternative geolocation IP 2:"
-#~ msgstr "Альтернативная геолокация IP 2:"
+msgid "Lesbian"
+msgstr "Лесбиянки"
 
-#~ msgid "An unknown error has occurred."
-#~ msgstr "Произошла неизвестная ошибка."
+msgid "Soul_mate"
+msgstr "Родственные души"
 
-#~ msgid "Animation [dubbing]"
-#~ msgstr "Анимация [перезапись]"
+msgid "Hot_flirt"
+msgstr "Горячий флирт"
 
-#~ msgid "Anime Issued"
-#~ msgstr "Аниме Выпущено"
+msgid "Girl"
+msgstr "Девушки"
 
-#~ msgid "Anuluj"
-#~ msgstr "Отменить"
+msgid "--- Couples ---"
+msgstr "--- Пары ---"
 
-#~ msgid "Arab"
-#~ msgstr "Арабский"
+msgid "--- Male ---"
+msgstr "--- Мужские ---"
 
-#~ msgid "Argentina"
-#~ msgstr "Аргентина"
+msgid "--- Transsexual ---"
+msgstr "--- Транссексуалы ---"
 
-#, fuzzy
-#~ msgid "Artists"
-#~ msgstr "Популярные исполнители"
+msgid "--- Female ---"
+msgstr "--- Женские ---"
 
-#~ msgid "Audience zone"
-#~ msgstr "Аудитория зона"
+msgid "vapor"
+msgstr "пары"
 
-#~ msgid "Australia"
-#~ msgstr "Австралия"
+msgid "Men"
+msgstr "Мужчины"
 
-#~ msgid "Austria"
-#~ msgstr "Австрия"
+msgid "Shemale"
+msgstr "Транссексуал"
 
-#~ msgid "Automotive , accidents"
-#~ msgstr "Автомобильные аварии"
+msgid "Women"
+msgstr "Женщины"
 
-#~ msgid "Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg"
-#~ msgstr "Авторы: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg "
+msgid "new"
+msgstr "новый"
 
-#~ msgid "Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, tomashj291"
-#~ msgstr "Авторы: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, tomashj291"
+msgid "ERROR - Error downloading: "
+msgstr "ОШИБКА. Сбой загрузки: "
 
-#~ msgid "Average"
-#~ msgstr "В среднем"
+msgid "ERROR"
+msgstr "ОШИБКА"
 
-#~ msgid "Belgian"
-#~ msgstr "Бельгийский"
+msgid "ERROR - Error unpacking /tmp/iptv-host-xxx.tar.gz"
+msgstr "ОШИБКА. Сбой распаковки /tmp/iptv-host-xxx.tar.gz"
 
-#~ msgid "Belgium"
-#~ msgstr "Бельгия"
+msgid "ERROR - Invalid file format /tmp/iptv-host-xxx.tar.gz"
+msgstr "ОШИБКА. Неверный формат файла /tmp/iptv-host-xxx.tar.gz"
 
-#~ msgid "Best"
-#~ msgstr "Лучший"
+msgid "ERROR - copy error"
+msgstr "ОШИБКА. Сбой копирования"
 
-#~ msgid "Brazil"
-#~ msgstr "Бразилия"
+msgid "Update End. Please manual restart enigma2"
+msgstr "Обновление завершено. Перезапустите Enigma"
 
-#~ msgid "Browse Channels"
-#~ msgstr "Просмотр каналов"
+msgid "---UPDATE---"
+msgstr "---ОБНОВИТЬ---"
 
-#, fuzzy
-#~ msgid "By category"
-#~ msgstr "Категория"
+msgid "UPDATE MENU"
+msgstr "МЕНЮ ОБНОВЛЕНИЯ"
 
-#~ msgid "By default, sort by:"
-#~ msgstr "По умолчанию, сортировать по:"
+msgid " - Remote version"
+msgstr " - Удаленная версия"
 
-#, fuzzy
-#~ msgid "By release name"
-#~ msgstr "Дата выпуска"
+msgid "UPDATE"
+msgstr "ОБНОВИТЬ"
 
-#, fuzzy
-#~ msgid "By years"
-#~ msgstr "По годам"
+msgid "UPDATE-CHANGES"
+msgstr "ИЗМЕНЕНИЯ В ОБНОВЛЕНИИ"
 
-#~ msgid "CATEGORY"
-#~ msgstr "КАТЕГОРИИ"
+msgid "UPDATE-NOW"
+msgstr "ОБНОВИТЬ СЕЙЧАС"
 
-#~ msgid "CHANGES IN VERSION"
-#~ msgstr "Изминения в версии"
+msgid "CHANGES IN VERSION"
+msgstr "Изменения в версии"
 
-#~ msgid "Cams"
-#~ msgstr "Веб-кам"
+msgid "Update Now"
+msgstr "Обновить сейчас"
 
-#~ msgid "Canada"
-#~ msgstr "Канада"
+msgid "Remote XXXversion"
+msgstr "Управление XXX-версией"
 
-#~ msgid "Cannot find player content"
-#~ msgstr "Не можете найти содержание плеер"
+msgid "Local  XXXversion"
+msgstr "Локальная  XXX-версия"
 
-#~ msgid "Cartoon List"
-#~ msgstr "Список мультфильмов"
+msgid "Most Favorited"
+msgstr "Самые популярные"
 
-#~ msgid "Cartoon list"
-#~ msgstr "Список мультфильмов"
+msgid "Highest Rated"
+msgstr "Наивысший рейтинг"
 
-#~ msgid "Categories films"
-#~ msgstr "Категории фильмов"
+msgid "Pornstars"
+msgstr "Порно звезды"
 
-#~ msgid "Ceska"
-#~ msgstr "Чешский"
+msgid "Last"
+msgstr "Последние"
 
-#~ msgid "China"
-#~ msgstr "Китай"
+msgid "Most Favored"
+msgstr "Пользующиеся популярностью"
 
-#~ msgid "Collection"
-#~ msgstr "Коллекция"
+msgid "Featured videos"
+msgstr "Избранные видео"
 
-#~ msgid "Configure IPTV Player"
-#~ msgstr "Настройки IPTV-Плеера"
+msgid "New Videos"
+msgstr "Новые видео"
 
-#~ msgid "Confirm title of the movie"
-#~ msgstr "Подтвердите название фильма"
+msgid "Hits"
+msgstr "Хиты"
 
-#, fuzzy
-#~ msgid "Connection error."
-#~ msgstr "Ошибка при вводе."
+msgid "Hot"
+msgstr "Свежие"
 
-#~ msgid "Connection type:"
-#~ msgstr "Тип соединения:"
+msgid "LAST"
+msgstr "ПОСЛЕДНИЕ"
 
-#~ msgid ""
-#~ "Could not read from resource.\n"
-#~ "code: %r"
-#~ msgstr ""
-#~ "Не удалось прочитать из ресурса.\n"
-#~ "код: %r"
-
-#~ msgid ""
-#~ "Could not read from resource.\n"
-#~ "code: %s"
-#~ msgstr ""
-#~ "Не удалось прочитать из ресурса.\n"
-#~ "код: %s"
+msgid "Next"
+msgstr "Следующий"
 
-#, fuzzy
-#~ msgid "Count: %s"
-#~ msgstr "Страны"
+msgid "Page: "
+msgstr "Страница: "
 
-#~ msgid "Country (changing may be illegal in your country)"
-#~ msgstr "Страна (изменить,зтот параметр может быть незаконным в вашей стране)"
+msgid "Last Page"
+msgstr "Последняя страница"
 
-#~ msgid "Couple"
-#~ msgstr "Пара"
+msgid "IPTV Player download manager"
+msgstr "Менеджер загрузок IPTVPlayer"
 
-#~ msgid "Create Date"
-#~ msgstr "Дата создания"
+msgid "Animation [dubbing]"
+msgstr "Анимация [перезапись]"
 
-#~ msgid "Czech Republic"
-#~ msgstr "Чешская Республика"
+msgid "Series [dubbing]"
+msgstr "Серии [перезапись]"
 
-#~ msgid "DEFAULT"
-#~ msgstr "ПО УМОЛЧАНИЮ"
+msgid "Animation [subtitles]"
+msgstr "Анимация [субтитры]"
 
-#~ msgid "Daily"
-#~ msgstr "Ежедневно"
+msgid "Series [subtitles]"
+msgstr "Серии [субтитры]"
 
-#~ msgid "Default second video policy"
-#~ msgstr "    Видео соотношение сторон по умолчанию (Второе)"
+msgid "HD Movies"
+msgstr "HD-фильмы"
 
-#~ msgid "Default video quality"
-#~ msgstr "По умолчанию качество видео"
+msgid "Latest Movies"
+msgstr "Последние фильмы"
 
-#~ msgid "Deutsch"
-#~ msgstr "Немецкий"
+msgid "Latest TV Episodes"
+msgstr "Последние ТВ-эпизоды"
 
-#~ msgid "Device ID"
-#~ msgstr "ID устройства"
+msgid "New TV Episodes"
+msgstr "Новые ТВ-эпизоды"
 
-#~ msgid "Disable host protection (error == GS)"
-#~ msgstr "Отключить родительскую защиту (ошибка == GS)"
+msgid "Coming Soon"
+msgstr "Скоро"
 
-#~ msgid "Display order:"
-#~ msgstr "Отобразить заказ:"
+msgid "Treat episode as TV Show"
+msgstr "Рассматривать эпизод, как ТВ-шоу"
 
-#~ msgid "Dla dzieci"
-#~ msgstr "Для детей"
+msgid "Show recommended by Rafalcool1:"
+msgstr "Показать рекомендованное Rafalcool1:"
 
-#~ msgid "Dokumentalne"
-#~ msgstr "Документальный"
+msgid "Recommended by Rafalcool1"
+msgstr "Рекомендованные Rafalcool1"
 
-#, fuzzy
-#~ msgid "Download \"%s\" in to \"%s\" failed!"
-#~ msgstr "Загрузка \"%s\" ."
+msgid "List of movies prepared by Rafalcool1"
+msgstr "Список фильмов, подготовленных Rafalcool1"
 
-#~ msgid "Download subtitle \"%s\""
-#~ msgstr "Загрузить субтитры \"%s\""
+msgid "Use ru proxy server to get file lists"
+msgstr "Использовать российский прокси-сервер для получения списков файлов"
 
-#~ msgid ""
-#~ "Download subtitles error.\n"
-#~ "wget error code[%d]."
-#~ msgstr ""
-#~ "Ошибка скачать субтитры.\n"
-#~ "wget код ошибки[%d]."
-
-#~ msgid ""
-#~ "Downloading can not be started.\n"
-#~ " Downloader %s not working properly.\n"
-#~ "Status[%s]"
-#~ msgstr ""
-#~ "Загрузка не может быть начата.\n"
-#~ " Загрузчик %s не работает должным образом.\n"
-#~ "Статус[%s]"
-
-#~ msgid ""
-#~ "Downloading can not be started.\n"
-#~ " The address ('%r') It is incorrect."
-#~ msgstr ""
-#~ "Загрузка не может быть начата.\n"
-#~ " Адрес ('%r') это неверно."
-
-#~ msgid "ERROR - Error downloading: "
-#~ msgstr "ОШИБКА - ошибка загрузки: "
-
-#~ msgid "ERROR - Error unpacking %s' % source"
-#~ msgstr "Ошибка - ошибка распаковки %s' % источник"
-
-#~ msgid "ERROR - Error unpacking /tmp/iptv-host-xxx.tar.gz"
-#~ msgstr "ОШИБКА - ошибка распаковки /tmp/iptv-host-xxx.tar.gz"
-
-#~ msgid "ERROR - Invalid file format /tmp/iptv-host-xxx.tar.gz"
-#~ msgstr "ОШИБКА - неверный формат файла /tmp/iptv-host-xxx.tar.gz"
-
-#~ msgid "ERROR - copy error"
-#~ msgstr "ОШИБКА - ошибка копирования"
+msgid "External player use software decoder for the WMA"
+msgstr "Внешний плеер использует программный декодер WMA"
 
-#~ msgid "Ekstraklasa use a proxy?"
-#~ msgstr "Использовать прокси-сервер экстракласса?"
+msgid "AAC mix mode"
+msgstr "Режим смесителя AAC"
 
-#~ msgid "Enter data into your account (blue key)."
-#~ msgstr "Введите данные в свой аккаунт (ключ)."
+msgid "Preferred protocol:"
+msgstr "Выбранный протокол:"
 
-#~ msgid "Entertainment"
-#~ msgstr "Развлекательная программа"
+msgid "Use the default video quality:"
+msgstr "Использовать качество видео по умолчанию:"
 
-#, fuzzy
-#~ msgid "Error message \"%s\"."
-#~ msgstr "Ошибка чтения файла \"%s\" .\n"
+msgid "password:"
+msgstr "пароль:"
 
-#~ msgid ""
-#~ "Error occurs during download. \n"
-#~ "Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
-#~ msgstr ""
-#~ "Ошибка загрузки. \n"
-#~ "Статус[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+msgid "login:"
+msgstr "логин:"
 
-#, fuzzy
-#~ msgid "Events"
-#~ msgstr "Главное событие"
+msgid "Sort results after:"
+msgstr "Сортировать результаты после:"
 
-#~ msgid "Explore"
-#~ msgstr "Исследовать"
+msgid "Najtrafniejsze"
+msgstr "Новейшие"
 
-#~ msgid "External player infobar timeout"
-#~ msgstr "    Время ожидания внешнего проигрывателя"
+msgid "Folder start"
+msgstr "Начало папки"
 
-#~ msgid "External player use software decoder for the AC3"
-#~ msgstr "Применить наружный декодер для AC3"
+msgid "Name hamster (login)"
+msgstr "Имя пользователя (логин)"
 
-#~ msgid "External player use software decoder for the DTS"
-#~ msgstr "Применить наружный декодер для DTS"
+msgid "Password for hamster"
+msgstr "Пароль пользователя"
 
-#~ msgid "External player use software decoder for the EAC3"
-#~ msgstr "Применить наружный декодер для EAC3"
+msgid "Explore"
+msgstr "Обзор"
 
-#~ msgid "External player use software decoder for the MP3"
-#~ msgstr "Применить наружный декодер для MP3"
+msgid "Small films and anime"
+msgstr "Короткие фильмы и аниме"
 
-#~ msgid "External player use software decoder for the WMA"
-#~ msgstr "Применить наружный декодер для WMA"
+msgid "Films Extremal"
+msgstr "Экстремальные фильмы"
 
-#~ msgid "Extra"
-#~ msgstr "Дополнительный"
+msgid "Automotive , accidents"
+msgstr "Автопромышленность, аварии"
 
-#~ msgid "FHD: very high"
-#~ msgstr "FHD: Очень высоко"
+msgid "Muzik"
+msgstr "Музыка"
 
-#~ msgid ""
-#~ "Fatal Error!\n"
-#~ "Your Openssl is not supported."
-#~ msgstr ""
-#~ "Фатальная ошибка!\n"
-#~ "Ваш Openssl не поддерживается."
+msgid "Straight from Polish"
+msgstr "Прямо с Польского"
 
-#~ msgid "Favorite addresses are stored under the file urllist.user"
-#~ msgstr "Избранное. Ссылки хранятся в файле urllist.user"
+msgid "Miscellaneous"
+msgstr "Разное"
 
-#~ msgid "Feature Potential Items"
-#~ msgstr "Функция потенциальных товары"
+msgid "Life of students"
+msgstr "Жизнь студентов"
 
-#~ msgid "Fetish"
-#~ msgstr "Фетиш"
+msgid "Waiting room"
+msgstr "Зал ожидания"
 
-#~ msgid "File Location xxxlist.txt :"
-#~ msgstr "Расположение файла xxxlist.txt :"
+msgid "User Videos 3dEU?"
+msgstr "Видео пользователя 3dEU?"
 
-#~ msgid "Films"
-#~ msgstr "Фильмы"
+msgid "  Filmy3dEU login:"
+msgstr " Filmy3dEU логин:"
 
-#~ msgid "Films Extremal"
-#~ msgstr "Фильмы Экстремальное"
+msgid "  Filmy3dEU password:"
+msgstr " Filmy3dEU пароль:"
 
-#~ msgid "Filmy"
-#~ msgstr "Фильмы"
+msgid "Added date"
+msgstr "Добавленная дата"
 
-#~ msgid "Folder for temp data"
-#~ msgstr "Папка временных данных"
+msgid "Comment count"
+msgstr "Количество комментариев"
 
-#~ msgid "Folder start"
-#~ msgstr "Начало"
+msgid "Most Watched"
+msgstr "Самые просматриваемые"
 
-#~ msgid "Following"
-#~ msgstr "После"
+msgid "Homepage"
+msgstr "Домашняя страница"
 
-#~ msgid "Foreign films"
-#~ msgstr "Зарубежные фильмы"
+msgid "Category"
+msgstr "Категория"
 
-#~ msgid "France"
-#~ msgstr "Франция"
+msgid "Katalog A-Z"
+msgstr "Каталог A-Z"
 
-#~ msgid "Gateway queue"
-#~ msgstr "Очередной шлюз"
+msgid "Argentina"
+msgstr "Аргентина"
 
-#~ msgid "German channles"
-#~ msgstr "Немецкие каналы"
+msgid "Australia"
+msgstr "Австралия"
 
-#~ msgid "Germany"
-#~ msgstr "Германия"
+msgid "Belgium"
+msgstr "Бельгия"
 
-#~ msgid "Get episodes list."
-#~ msgstr "Получить список эпизодов."
+msgid "Brazil"
+msgstr "Бразилия"
 
-#~ msgid "Get free credits"
-#~ msgstr "Получить кредиты бесплатно"
+msgid "Canada"
+msgstr "Канада"
 
-#~ msgid "Get item type."
-#~ msgstr "Получить тип элемента."
+msgid "France"
+msgstr "Франция"
 
-#~ msgid "Get supported languages list."
-#~ msgstr "Открыть список поддерживаемых языков."
+msgid "Germany"
+msgstr "Германия"
 
-#~ msgid "Girl"
-#~ msgstr "Девушка"
+msgid "India"
+msgstr "Индия"
 
-#~ msgid "Global search :"
-#~ msgstr "Глобальный поиск :"
+msgid "Indonesia"
+msgstr "Индонезия"
 
-#~ msgid "Global sorting :"
-#~ msgstr "Глобальная сортировка :"
+msgid "International"
+msgstr "Международный"
 
-#~ msgid "Goals"
-#~ msgstr "Место назначения"
+msgid "Ireland"
+msgstr "Ирландия"
 
-#~ msgid "Grade"
-#~ msgstr "Класс"
+msgid "Italy"
+msgstr "Италия"
 
-#~ msgid "HD: high"
-#~ msgstr "HD: Высокая"
+msgid "Malaysia"
+msgstr "Малайзия"
 
-#~ msgid "HIGH"
-#~ msgstr "ВЫСОКИЙ"
+msgid "Morocco"
+msgstr "Марокко"
 
-#~ msgid "Harbinger"
-#~ msgstr "Предвестник"
+msgid "Netherlands"
+msgstr "Нидерланды"
 
-#~ msgid "Hide Video in the list above the age of the viewer:"
-#~ msgstr "Скрыть видео в списке выше возраста зрителя:"
+msgid "Pakistan"
+msgstr "Пакистан"
 
-#~ msgid "Highest Rated"
-#~ msgstr "Наивысший рейтинг"
+msgid "Philippines"
+msgstr "Филиппины"
 
-#~ msgid "Hits"
-#~ msgstr "Хиты"
+msgid "Portugal"
+msgstr "Португалия"
 
-#~ msgid "Homepage"
-#~ msgstr "Домашняя страница"
+msgid "Singapore"
+msgstr "Сингапур"
 
-#~ msgid "Hot"
-#~ msgstr "Горячий"
+msgid "Swiss"
+msgstr "Швейцарские"
 
-#~ msgid "Hot_flirt"
-#~ msgstr "Горячий Флирт"
+msgid "Switzerland"
+msgstr "Швейцария"
 
-#~ msgid "ID"
-#~ msgstr "Идентификация"
+msgid "Schweiz"
+msgstr "Шведские"
 
-#~ msgid "IPTV - Player mode"
-#~ msgstr "IPTV - Режим Плеера"
+msgid "Tunisia"
+msgstr "Тунис"
 
-#~ msgid "IPTV - the recorder mode"
-#~ msgstr "IPTV - Режим записи"
+msgid "United States"
+msgstr "Соединенные Штаты"
 
-#~ msgid "IPTV Player"
-#~ msgstr "IPTV Плеер"
+msgid "United Kingdom"
+msgstr "Великобритания"
 
-#~ msgid "IPTV Player "
-#~ msgstr "IPTV Плеер "
+msgid "Turkey"
+msgstr "Турция"
 
-#~ msgid "IPTV Player HD version %s"
-#~ msgstr "IPTV Плеер HD версия %s"
+msgid "Spain"
+msgstr "Испания"
 
-#~ msgid "IPTV Player download manager"
-#~ msgstr "IPTV Плеер менеджер загрузок"
+msgid "Romania"
+msgstr "Румыния"
 
-#~ msgid "IPTV Player version %s"
-#~ msgstr "IPTV Плеер версия %s"
+msgid "Mexico"
+msgstr "Мексика"
 
-#~ msgid "IPTVPlayer - Start"
-#~ msgstr "IPTVПлеер - Запуск"
+msgid "Belgian"
+msgstr "Бельгийские"
 
-#~ msgid "IPTVPlayer need some additional setup"
-#~ msgstr "IPTV Плеер нужна дополнительная настройка"
+msgid "Austria"
+msgstr "Австрия"
 
-#~ msgid "IPTVPlayer setup version %s"
-#~ msgstr "IPTV Плеер установка версии %s"
+msgid "VietNam"
+msgstr "Вьетнам"
 
-#~ msgid "IPTVPlayer setup version %s "
-#~ msgstr "IPTV Плеер Настройка версии %s "
+msgid "Japan"
+msgstr "Япония"
 
-#~ msgid "Ibiza Global Radio"
-#~ msgstr "Ibiza Глобальный Радио"
+msgid "Czech Republic"
+msgstr "Чешская Республика"
 
-#~ msgid "Icon type"
-#~ msgstr "Тип иконка"
+msgid "Arab"
+msgstr "Арабские"
 
-#~ msgid "If available you can choose other source."
-#~ msgstr "При наличии вы можете выбрать другой источник."
+msgid "Korea"
+msgstr "Корея"
 
-#~ msgid "Iframe file"
-#~ msgstr "Расположение заставки"
+msgid "China"
+msgstr "Китай"
 
-#~ msgid "India"
-#~ msgstr "Индия"
+msgid "sun sessions"
+msgstr "солнечные сессии"
 
-#~ msgid "Indonesia"
-#~ msgstr "Индонезия"
+msgid "Other videos"
+msgstr "Другие видео"
 
-#~ msgid "Info..."
-#~ msgstr "Информация"
+msgid "Ibiza Global Radio"
+msgstr "Ibiza Global Radio"
 
-#~ msgid "Information & journalism"
-#~ msgstr "Информация и журналистика"
+msgid "Top 100"
+msgstr "Топ 100"
 
-#~ msgid "Information Services"
-#~ msgstr "Информационные услуги"
+msgid "24 h"
+msgstr "24 ч"
 
-#~ msgid "Install into the \"%s\" ."
-#~ msgstr "Установите в \"%s\" ."
+msgid "Quarter"
+msgstr "Четверть"
 
-#~ msgid "Iplex use a proxy?"
-#~ msgstr "Iplex использовать прокси-сервер?"
+msgid "Most"
+msgstr "Наиболее"
 
-#~ msgid "Ireland"
-#~ msgstr "Ирландия"
+msgid "List of anime"
+msgstr "Список аниме"
 
-#~ msgid "Italiano"
-#~ msgstr "Итальянский"
+msgid "List of films"
+msgstr "Список фильмов"
 
-#~ msgid "Italy"
-#~ msgstr "Италия"
+msgid "Anime Issued"
+msgstr "Выпущенные аниме"
 
-#~ msgid "Items in group"
-#~ msgstr "Положение в группе"
+msgid "New episodes broadcast"
+msgstr "Транляции новых эпизодов"
 
-#~ msgid "JSON module not available!"
-#~ msgstr "Модуль JSON недоступен!"
+msgid "Recently added episodes from previous seasons"
+msgstr "Недавно добавленные эпизоды из прошлых сезонов"
 
-#~ msgid "Japan"
-#~ msgstr "Япония"
+msgid "Harbinger"
+msgstr "Предвестник"
 
-#~ msgid "Korea"
-#~ msgstr "Корея"
+msgid "User PREMIUM KinomanTV?"
+msgstr "Пользователь PREMIUM KinomanTV?"
 
-#~ msgid "LAST"
-#~ msgstr "ПОСЛЕДНИЙ"
+msgid "  KinomanTV login:"
+msgstr "  KinomanTV логин:"
 
-#~ msgid "LUCHA UNDERGROUND"
-#~ msgstr "Подпольный бойцовский"
+msgid "  KinomanTV password:"
+msgstr "  KinomanTV пароль:"
 
-#~ msgid "Labels"
-#~ msgstr "Этикетки"
+msgid "Categories films"
+msgstr "Категории фильмов"
 
-#~ msgid "Last"
-#~ msgstr "Последний"
+msgid "Last added"
+msgstr "Последние добавленые"
 
-#~ msgid "Last Page"
-#~ msgstr "Последняя страница"
+msgid "My Favorites"
+msgstr "Мои любимые"
 
-#~ msgid "Last added"
-#~ msgstr "Последние добавления"
+msgid "Enter data into your account (blue key)."
+msgstr "Введите данные Вашего аккаунта (синяя клавиша)."
 
-#~ msgid "Last error"
-#~ msgstr "Последняя ошибка"
+msgid "Latest series"
+msgstr "Последние серии"
 
-#~ msgid "Last error: \"People who live where you live aren't allowed to watch this video.. Not because we don't luv ya, but because the owners have some restrictions. The good news, is there are tens of thousands of other videos to choose from.\""
-#~ msgstr "Последняя ошибка: \"Пользователь, где вы проживаете, невозможно посмотреть это видео..  Потому, что у вас имеются некоторые ограничения. Хорошая новость, есть десятки тысяч других видео на выбор.\""
+msgid "bitrate: worst"
+msgstr "битрейт: наихудший"
 
-#~ msgid "Last error: \"Silverlight stream not supported.\""
-#~ msgstr "Последняя ошибка: \"Поток Silverlight не поддерживается.\""
+msgid "bitrate: 200p"
+msgstr "битрейт: 200p"
 
-#~ msgid "Last error: \"The Mirror is broken.If available you can choose other source.\""
-#~ msgstr "Последняя ошибка: \"Отображения нет. При наличии вы можете выбрать другой источник.\""
+msgid "bitrate: 450p"
+msgstr "битрейт: 450p"
 
-#, fuzzy
-#~ msgid "Latest Added Movies"
-#~ msgstr "Последние фильмы"
+msgid "bitrate: 900"
+msgstr "битрейт: 900"
 
-#~ msgid "Latest TV Episodes"
-#~ msgstr "Последние ТВ Эпизоды"
+msgid "bitrate: 1800"
+msgstr "битрейт: 1800"
 
-#~ msgid "Latest Update"
-#~ msgstr "Последнее обновление"
+msgid "bitrate: the best"
+msgstr "битрейт: лучший"
 
-#~ msgid "Latest series"
-#~ msgstr "Последние серии"
+msgid "The default video format:"
+msgstr "Видеоформат по умолчанию:"
 
-#~ msgid "Lesbian"
-#~ msgstr "Лесбиянка"
+msgid "Use the default video format:"
+msgstr "Использовать видеоформат по умолчанию:"
 
-#~ msgid "Less viewed"
-#~ msgstr "Меньше просматриваемые"
+msgid "Ekstraklasa use a proxy?"
+msgstr "Использовать прокси-сервер экстракласса?"
 
-#~ msgid "Life of students"
-#~ msgstr "Жизнь студентов"
+msgid "Goals"
+msgstr "Цели"
 
-#~ msgid "Links to the video files from the file urllist.txt"
-#~ msgstr "Ссылки на видео из файла urllist.txt"
+msgid "Shortcuts"
+msgstr "Ярлыки"
 
-#~ msgid "List of anime"
-#~ msgstr "Список аниме"
+msgid "Gateway queue"
+msgstr "Очередь шлюза"
 
-#~ msgid "List of films"
-#~ msgstr "Список фильмов"
+msgid "Warehouse"
+msgstr "Хранить"
 
-#~ msgid "List of movies prepared by Rafalcool1"
-#~ msgstr "Список фильмов, подготовленных Rafalcool1"
+msgid "The most relevant"
+msgstr "Наиболее актуальное"
 
-#, fuzzy
-#~ msgid "Live at: "
-#~ msgstr "Радио в прямом эфире"
+msgid "Popularity"
+msgstr "Популярность"
 
-#~ msgid "Live broadcasts from the file urllist.stream"
-#~ msgstr "Прямые трансляции из файла urllist.stream"
+msgid "Recent Items (Popular)"
+msgstr "Последние пункты (популярные)"
 
-#~ msgid "Live-streams"
-#~ msgstr "Прямые-потоки"
+msgid "Recent Items (All)"
+msgstr "Последние пункты (все)"
 
-#~ msgid "Liveleakers"
-#~ msgstr "Текущие"
+msgid "Feature Potential Items"
+msgstr "Потенциально последние пункты"
 
-#~ msgid "Load automatically the subtitle from file with the same name"
-#~ msgstr "    Авто-загрузка субтитров из файла с тем же именем"
+msgid "Top Items (Today)"
+msgstr "Лучшие пункты (сегодня)"
 
-#~ msgid "Loading..."
-#~ msgstr "Загрузка..."
+msgid "Top Items (This Week)"
+msgstr "Лучшие пункты (на этой неделе)"
 
-#~ msgid "Local  XXXversion"
-#~ msgstr "Локальный  XXXверсия"
+msgid "Top Items (This Month)"
+msgstr "Лучшие пункты (в этом месяце)"
 
-#~ msgid "Login user \"%s\" into %s"
-#~ msgstr "Пользователь Войти \"%s\" в %s"
+msgid "Top Items (All time)"
+msgstr "Лучшие товары (за всё время)"
 
-#~ msgid "Login:"
-#~ msgstr "Авторизоваться:"
+msgid "Yoursay"
+msgstr "Ты говоришь"
 
-#~ msgid "MEDIUM"
-#~ msgstr "СРЕДНИЙ"
+msgid "Liveleakers"
+msgstr "Текущие"
 
-#~ msgid "MERGE protocol source"
-#~ msgstr "Соединять источник протокола"
+msgid "Must See"
+msgstr "Нужно увидеть"
 
-#~ msgid "MOB: low"
-#~ msgstr "MOB: Низкий"
+msgid "Syria"
+msgstr "Сирия"
 
-#~ msgid "MORE"
-#~ msgstr "БОЛЬШЕ"
+msgid "Entertainment"
+msgstr "Развлекательные"
 
-#~ msgid "Main developer, architect, coordinator: "
-#~ msgstr "Главный разработчик, архитектор, координатор: "
+msgid "Browse Channels"
+msgstr "Обзор каналов"
 
-#~ msgid "Major rankings"
-#~ msgstr "Основные рейтинги"
+msgid "By default, sort by:"
+msgstr "По умолчанию сортировать по:"
 
-#~ msgid "Malaysia"
-#~ msgstr "Малайзия"
+msgid "***Any***"
+msgstr "***Любые***"
 
-#~ msgid "Mature"
-#~ msgstr "Зрелый"
+msgid "most viewed"
+msgstr "наиболее просматриваемые"
 
-#~ msgid "Men"
-#~ msgstr "Но"
+msgid "top rated"
+msgstr "самые популярные"
 
-#~ msgid "Mexico"
-#~ msgstr "Мексика"
+msgid "Use a proxy"
+msgstr "Использовать прокси"
 
-#~ msgid "Mid"
-#~ msgstr "Средний"
+msgid "Films"
+msgstr "Фильмы"
 
-#, fuzzy
-#~ msgid "Mirror"
-#~ msgstr "ошибка gzip"
+msgid "Documents"
+msgstr "Документы"
 
-#~ msgid "Miscellaneous"
-#~ msgstr "Разное"
+msgid "Tales"
+msgstr "Россказни"
 
-#~ msgid "Month"
-#~ msgstr "Месяц"
+msgid "preferred streaming protocol"
+msgstr "предпочтительный протокол потока"
 
-#~ msgid "Monthly"
-#~ msgstr "Ежемесячно"
+msgid "Age viewer:"
+msgstr "Возраст просмотра:"
 
-#~ msgid "More as next page"
-#~ msgstr "Подробнее в следующем странице"
+msgid "Hide Video in the list above the age of the viewer:"
+msgstr "Скрыть видео в списке свыше возраста зрителя:"
 
-#~ msgid "Morocco"
-#~ msgstr "Марокко"
+msgid "TOP100 Always"
+msgstr "Топ 100 всегда"
 
-#~ msgid "Most"
-#~ msgstr "Наиболее"
+msgid "TOP100 Of the week"
+msgstr "Топ 100 недели"
 
-#~ msgid "Most Favored"
-#~ msgstr "Наибольшего благоприятствования"
+msgid "TOP100 Month"
+msgstr "Топ 100 месяца"
 
-#~ msgid "Most Favorited"
-#~ msgstr "Большинство избранном"
+msgid "MOB: low"
+msgstr "MOB: низкий"
 
-#~ msgid "Most Watched"
-#~ msgstr "Самые ценные"
+msgid "SD: standard"
+msgstr "SD: стандартный"
 
-#~ msgid "Mounted on %s"
-#~ msgstr "Прикреплено к %s"
+msgid "HD: high"
+msgstr "HD: высокий"
 
-#~ msgid "Move item"
-#~ msgstr "Переместить пункт"
+msgid "FHD: very high"
+msgstr "FHD: очень высокий"
 
-#~ msgid "Music-Box"
-#~ msgstr "Музыка-Box"
+msgid "Popular movies"
+msgstr "Популярные фильмы"
 
-#~ msgid "Musik"
-#~ msgstr "Музыка"
+msgid "Topics films"
+msgstr "Темы фильмов"
 
-#~ msgid "Must See"
-#~ msgstr "Должен видеть"
+msgid "Editorial"
+msgstr "Редакционные"
 
-#~ msgid "Muzik"
-#~ msgstr "Музыка"
+msgid "Action RPG"
+msgstr "Действие RPG"
 
-#~ msgid "My Favorites"
-#~ msgstr "Мои любимые"
+msgid "The Witcher"
+msgstr "Ведьмак"
 
-#~ msgid "Najtrafniejsze"
-#~ msgstr "Новые"
+msgid "Size of the icons"
+msgstr "Размер иконок"
 
-#~ msgid "Name"
-#~ msgstr "Имя"
+msgid "Connection type:"
+msgstr "Тип соединения:"
 
-#~ msgid "Name hamster (login)"
-#~ msgstr "Имя (логин)"
+msgid "Very high"
+msgstr "Очень высокое"
 
-#~ msgid "Napisy24.pl"
-#~ msgstr "Субтитры24"
+msgid "Best"
+msgstr "Лучшие"
 
-#~ msgid "Netherlands"
-#~ msgstr "Нидерланды"
+msgid "Worst"
+msgstr "Наихудшее"
 
-#, fuzzy
-#~ msgid "New Episodes"
-#~ msgstr "Новые серии"
+msgid "Very low"
+msgstr "Очень низкое"
 
-#~ msgid "New HD Videos"
-#~ msgstr "Новые HD Видео"
+msgid "Average"
+msgstr "Среднее"
 
-#~ msgid "New Movies"
-#~ msgstr "Новые фильмы"
+msgid "TVN Introduce yourself as:"
+msgstr "TVN представляет себя как:"
 
-#~ msgid "New Releases"
-#~ msgstr "Новые релизы"
+msgid "TVN use a proxy?"
+msgstr "Использовать прокси-сервер для TVN?"
 
-#~ msgid "New TV Episodes"
-#~ msgstr "Новые ТВ Эпизоды"
+msgid "No name"
+msgstr "Без имени"
 
-#~ msgid "New episodes broadcast"
-#~ msgstr "Новые эпизоды трансляции"
+msgid "Audience zone"
+msgstr "Аудиторная зона"
 
-#~ msgid "New folder"
-#~ msgstr "Новая папка"
+msgid "  password:"
+msgstr " Пароль:"
 
-#, fuzzy
-#~ msgid "New series"
-#~ msgstr "Телесериал"
+msgid "The default video format"
+msgstr "Видеоформат по умолчанию"
 
-#, fuzzy
-#~ msgid "Newer"
-#~ msgstr "Новейший"
+msgid "Use Proxy?"
+msgstr "Использовать прокси?"
 
-#~ msgid "Newest added"
-#~ msgstr "Последним добавил"
+msgid "More as next page"
+msgstr "Подробнее на следующей странице"
 
-#~ msgid "Newest year"
-#~ msgstr "Новый год"
+msgid ":for"
+msgstr ":для"
 
-#~ msgid "Next"
-#~ msgstr "Следующий"
+msgid "Information & journalism"
+msgstr "Информация и журналистика"
 
-#~ msgid "No name"
-#~ msgstr "Без имени"
+msgid "Information Services"
+msgstr "Информационные каналы"
 
-#~ msgid "No valid links available. Last error: \"The Mirror is broken. If available you can choose other source.\""
-#~ msgstr "Работающих ссылок нет. Последняя ошибка: \"Отображения нет. При наличии, вы можете выбрать другой источник.\""
+msgid "Journalism"
+msgstr "Журналистика"
 
-#~ msgid "Number of songs fetched at once for the station"
-#~ msgstr "Количество песен, найденных во время посещения станций"
+msgid "SORT"
+msgstr "СОРТИРОВАТЬ"
 
-#~ msgid "Odśwież"
-#~ msgstr "Обновление"
+msgid "LATEST VIDEOS"
+msgstr "ПОСЛЕДНИЕ ВИДЕО"
 
-#~ msgid "Oldest added"
-#~ msgstr "Старые добавил"
+msgid "SHOW REPLAY"
+msgstr "ИГРОВЫЕ ШОУ"
 
-#~ msgid "OpenSubtitles.org"
-#~ msgstr "Открытые субтитры"
+msgid "WWE NETWORK"
+msgstr "СЕТЬ WWE"
 
-#~ msgid "Operation aborted! "
-#~ msgstr "Операция прервана! "
+msgid "SMACKDOWN"
+msgstr "ОБРУШЕНИЕ"
 
-#~ msgid "PC"
-#~ msgstr "ПК"
+msgid "LUCHA UNDERGROUND"
+msgstr "ПОДПОЛЬНЫЕ БОЙЦОВСКИЕ"
 
-#~ msgid "PICTURE"
-#~ msgstr "ФОТО"
+msgid "DEFAULT"
+msgstr "ПО УМОЛЧАНИЮ"
 
-#~ msgid "Page: "
-#~ msgstr "Страница: "
+msgid "format: best"
+msgstr "формат: лучший"
 
-#~ msgid "Pakistan"
-#~ msgstr "Пакистан"
+msgid "format: worst"
+msgstr "формат: наихудший"
 
-#~ msgid "Password for hamster"
-#~ msgstr "Пароль для chomika"
+msgid "format: 720"
+msgstr "формат: 720"
 
-#~ msgid "Philippines"
-#~ msgstr "Филиппины"
+msgid "format: 240p"
+msgstr "формат: 240p"
 
-#~ msgid "Photos"
-#~ msgstr "Фото"
+msgid "format: 360p"
+msgstr "формат: 360p"
 
-#~ msgid "Play file"
-#~ msgstr "Воспроизведение видео"
+msgid "format: 480p"
+msgstr "формат: 480p"
 
-#~ msgid "PlayPuls"
-#~ msgstr "ИгратьPuls"
+msgid "Cannot find player content"
+msgstr "Невозможно найти плеер контента"
 
-#~ msgid "PlayPuls use a proxy?"
-#~ msgstr "PlayPuls использовать прокси-сервер?"
+msgid "Sort movies: "
+msgstr "Сортировать фильмы: "
 
-#~ msgid "Player > Recorder"
-#~ msgstr "Плеер > Запись"
+msgid "last added"
+msgstr "последние добавленные"
 
-#~ msgid "Please remember that you use the IPTVPlayer plugin at your own risk."
-#~ msgstr "Пожалуйста, помните, что вы используете плагин IPTV Плеер на свой страх и риск."
+msgid "last watched"
+msgstr "последние просмотренные"
 
-#~ msgid ""
-#~ "Please visit '%s' from using web-browser form the PC. If links are available please report this problem.\n"
-#~ "Email: samsamsam@o2.pl"
-#~ msgstr ""
-#~ "Пожалуйста, посетите '%s' от использования веб-браузера образуют ПК. Если ссылки доступны, пожалуйста, сообщите об этой проблеме.\n"
-#~ "E-mail: samsamsam@o2.pl"
+msgid "favorite"
+msgstr "любимые"
 
-#~ msgid "Plugin can be run on one of the following platforms: sh4, mipsel, i686, armv7."
-#~ msgstr "Плагин может работать на одной из следующих платформ: sh4, mipsel, i686, armv7."
+msgid "TOP100 Week"
+msgstr "TOP 100 за неделю"
 
-#~ msgid "Pol'skiy"
-#~ msgstr "Польский"
+msgid "TOP100 of the Month"
+msgstr "TOP 100 за месяц"
 
-#~ msgid "Poland"
-#~ msgstr "Польша"
+msgid "Iplex use a proxy?"
+msgstr "Использовать прокси-сервер для Iplex?"
 
-#~ msgid "Policy2"
-#~ msgstr "Соотношение сторон2"
+msgid "WrestlingNet._listVideos - no markers [m1][m2] found!"
+msgstr "WrestlingNet._listВидео: не найдены маркеры [м1][м2]!"
 
-#, fuzzy
-#~ msgid "Polish"
-#~ msgstr "Соотношение сторон"
+msgid ""
+"Please visit '%s' from using web-browser form the PC. If links are available please report this problem.\n"
+"Email: samsamsam@o2.pl"
+msgstr ""
+"Пожалуйста, посетите '%s', используя web-браузер ПК. Если ссылки доступны, пожалуйста, сообщите об этой проблеме.\n"
+"E-mail: samsamsam@o2.pl"
 
-#~ msgid "Polish channles"
-#~ msgstr "Польские каналы"
+msgid "Last error: \"Videomega has blocked your IP for some time. Please retry this link after some time.\""
+msgstr "Последняя ошибка: \"Videomega заблокировал ваш IP на некоторое время. Пожалуйста, повторите попытку открыть эту ссылку через некоторое время.\""
 
-#~ msgid "Pornstars"
-#~ msgstr "Порно звезды"
+msgid "Newest added"
+msgstr "Последние добавленные"
 
-#~ msgid "Portal:"
-#~ msgstr "Портал:"
+msgid "Oldest added"
+msgstr "Добавленные давно"
 
-#~ msgid "Portugal"
-#~ msgstr "Португалия"
+msgid "Newest year"
+msgstr "Новейшие за год"
 
-#~ msgid "Preferred protocol:"
-#~ msgstr "Выберите протокол:"
+msgid "Oldest year"
+msgstr "Старые за год"
 
-#~ msgid "Preferred streaming protocol' + ': "
-#~ msgstr "Предпочтительный протокол потоковой передачи' + ': "
+msgid "Best rating"
+msgstr "СМС-голосование"
 
-#, fuzzy
-#~ msgid "Premieres"
-#~ msgstr "Премиум пользователь"
+msgid "Worse rating"
+msgstr "Худшие по рейтингу"
 
-#~ msgid "Press OK to start"
-#~ msgstr "Нажмите OK чтобы начать"
+msgid "Less viewed"
+msgstr "Менее просматриваемые"
 
-#~ msgid "Profile"
-#~ msgstr "Профиль"
+msgid "The problem with user logon \"%s\".\n"
+msgstr "Проблема с входом пользователя \"%s\".\n"
 
-#~ msgid "Promoted channels"
-#~ msgstr "Популярные каналы"
+msgid "New Releases"
+msgstr "Новые релизы"
 
-#~ msgid "Promoted games"
-#~ msgstr "Популярные игры"
+msgid "Categorization:"
+msgstr "Категоризация:"
 
-#~ msgid "Proxy server url"
-#~ msgstr "Адрес прокси-сервера"
+msgid "Latest Update"
+msgstr "Последнее обновление"
 
-#~ msgid "Quarter"
-#~ msgstr "Четверть"
+msgid "Anime List"
+msgstr "Список аниме"
 
-#~ msgid "Raw"
-#~ msgstr "Необработанный"
+msgid "Create Date"
+msgstr "Дата создания"
 
-#~ msgid "Recent Items (All)"
-#~ msgstr "Последние товары (Все)"
+msgid "New HD Videos"
+msgstr "Новые HD-видео"
 
-#~ msgid "Recent Items (Popular)"
-#~ msgstr "Последние товары (Популярный)"
+msgid "Use proxy gateway"
+msgstr "Использовать прокси-шлюз"
 
-#~ msgid "Recently Added"
-#~ msgstr "Недавно добавленный"
+msgid "show iframe for audio item"
+msgstr "включить заставку в аудиорежиме"
 
-#~ msgid "Recently added episodes from previous seasons"
-#~ msgstr "Недавно добавленные эпизоды из прошлых сезонов"
+msgid "Iframe file"
+msgstr "Файл заставки"
 
-#~ msgid "Recommended by Rafalcool1"
-#~ msgstr "Рекомендуется Rafalcool1"
+msgid "Clear iframe file"
+msgstr "Очистить файл заставки"
 
-#~ msgid "Recorder > Player"
-#~ msgstr "Запись > Плеер"
+msgid "Mounted on %s"
+msgstr "Смонтировано на %s"
 
-#~ msgid "Records path"
-#~ msgstr "Каталог для загрузки"
+msgid "Mangas"
+msgstr "Мангас"
 
-#~ msgid "Regular"
-#~ msgstr "Регулярный"
+msgid "Recently Added"
+msgstr "Недавно добавленные"
 
-#~ msgid "Remote XXXversion"
-#~ msgstr "Удаленный XXXверсия"
+msgid "SovDub"
+msgstr "Совесткий дубляж"
 
-#~ msgid "Removing the old version."
-#~ msgstr "Удаление старой версии."
+msgid "Foreign films"
+msgstr "Зарубежные фильмы"
 
-#~ msgid "Request token from \"%s\""
-#~ msgstr "Символ запроса от \"%s\""
+msgid "Major rankings"
+msgstr "Основные рейтинги"
 
-#~ msgid "Request token from %s"
-#~ msgstr "Символ запроса от %s"
+msgid ""
+"Fatal Error!\n"
+"Your Openssl is not supported."
+msgstr ""
+"Фатальная ошибка!\n"
+"Ваш Openssl не поддерживается."
 
-#~ msgid "Require pin:"
-#~ msgstr "Запрашивать PIN-код:"
+msgid ""
+"OpenSSL in your image is not supported.\n"
+"Some functions may not work correctly."
+msgstr ""
+"OpenSSL в изображении не поддерживается.\n"
+"Некоторые функции могут работать некорректно."
 
-#~ msgid "Romania"
-#~ msgstr "Румыния"
+msgid "bestfit"
+msgstr "оптимальное"
 
-#~ msgid "SD: standard"
-#~ msgstr "SD: Стандарт"
+msgid "panscan"
+msgstr "панорама"
 
-#~ msgid "SEARCH"
-#~ msgstr "ПОИСК"
+msgid "letterbox"
+msgstr "letterbox"
 
-#~ msgid "SHOW REPLAY"
-#~ msgstr "ИГРАТЬ ШОУ"
+msgid "nonlinear"
+msgstr "без чёрных полос"
 
-#~ msgid "SMACKDOWN"
-#~ msgstr "ОБРУШИТЬ"
+msgid "Most Viewed"
+msgstr "Наиболее просматриваемые"
 
-#~ msgid "SORT"
-#~ msgstr "СОРТИРОВАТЬ"
+msgid "Windows Media Video 9 Screen decoder"
+msgstr "Экранный декодер Windows Media Video 9"
 
-#~ msgid "Schweiz"
-#~ msgstr "Швеция"
+msgid "Get free credits"
+msgstr "Получить кредиты бесплатно"
 
-#~ msgid "Search History"
-#~ msgstr "История поиска"
+msgid "Fail to get \"%s\""
+msgstr "Не удалось получить \"%s\""
 
-#~ msgid "Search for subitile for \"%s\""
-#~ msgstr "Поиск субтитров для \"%s\""
+msgid "file://"
+msgstr "файл://"
 
-#~ msgid "Search for subitile for %s"
-#~ msgstr "Поиск субтитров для %s"
+msgid "Top Cartoons"
+msgstr "Лучшие мультики"
 
-#, fuzzy
-#~ msgid "Season %s (%s)"
-#~ msgstr "Время года %s"
+msgid "Cartoon List"
+msgstr "Список мультфильмов"
 
-#~ msgid "Secure cookie name"
-#~ msgstr "Безопасное имя файла cookie"
+msgid "only Anime"
+msgstr "только аниме"
 
-#~ msgid "Secure cookie value"
-#~ msgstr "Безопасное значение cookie"
+msgid "only Cartoons"
+msgstr "только мультфильмы"
 
-#~ msgid "Select movie"
-#~ msgstr "Выбор фильма"
+msgid "json load error 2"
+msgstr "Ошибка 2 при загрузке json"
 
-#~ msgid "Series [dubbing]"
-#~ msgstr "Серии [перезапись]"
+msgid ""
+"Download subtitles error.\n"
+"wget error code[%d]."
+msgstr ""
+"Ошибка загрузки субтитров.\n"
+"Код ошибки wget[%d]."
 
-#~ msgid "Series [subtitles]"
-#~ msgstr "Серии [субтитры]"
+msgid "unzip error - please check if utitlity unzip is available"
+msgstr "Ошибка unzip: пожалуйста, проверьте доступность утилиты распаковки"
 
-#~ msgid "Shemale"
-#~ msgstr "Транссексуал"
+msgid "write error"
+msgstr "Ошибка записи"
 
-#~ msgid "Shortcuts"
-#~ msgstr "Ярлыки"
+msgid "decode error"
+msgstr "Ошибка декодирования"
 
-#~ msgid "Show recommended by Rafalcool1:"
-#~ msgstr "Показать рекомендовано Rafalcool1:"
+msgid "read error"
+msgstr "Ошибка чтения"
 
-#, fuzzy
-#~ msgid "Showcase"
-#~ msgstr "Шоу"
+msgid "gzip error"
+msgstr "Ошибка gzip"
 
-#~ msgid "Simple (e-mail, password)"
-#~ msgstr "Простой (адрес электронной почты, пароль)"
+msgid "OpenSubtitles.org"
+msgstr "OpenSubtitles.org"
 
-#~ msgid "Sin in to"
-#~ msgstr "Войти в систему"
+msgid "Napisy24.pl"
+msgstr "Napisy24.pl"
 
-#~ msgid "Singapore"
-#~ msgstr "Сингапур"
+msgid "Titlovi.com"
+msgstr "Titlovi.com"
 
-#~ msgid "Size of the icons"
-#~ msgstr "Размер иконок"
+msgid "Youtube.com"
+msgstr "Youtube.com"
 
-#~ msgid "Skipping IPTVPlayer serup may cause problems.Are you sure to skip IPTVPlayer setup?"
-#~ msgstr "Пропуск установки дополнительного, может привести к дефекту плагина.Пропустить установку дополнительных модулей. Вы уверены?"
+msgid "Subscene.com"
+msgstr "Subscene.com"
 
-#~ msgid "SmackDown"
-#~ msgstr "Обрушить"
+msgid "If available you can choose other source."
+msgstr "Если доступно, Вы можете выбрать другой источник."
 
-#~ msgid "Small films and anime"
-#~ msgstr "Фильмы и аниме"
+msgid "Use UA proxy server to get file lists"
+msgstr "Использовать UA прокси-сервер для получения списков файлов"
 
-#~ msgid "Some changes will be applied only after plugin update."
-#~ msgstr "Некоторые изменения будут применены только после обновления плагина."
+msgid "IPTVPlayer - Start"
+msgstr "Запуск IPTVPlayer"
 
-#~ msgid "Songs"
-#~ msgstr "Песни"
+msgid "Info..."
+msgstr "Информация."
 
-#~ msgid "Sorry"
-#~ msgstr "Извините"
+msgid "Global sorting :"
+msgstr "Глобальная сортировка:"
 
-#~ msgid "Sort Myfreecams :"
-#~ msgstr "Сортировка Myfreecams :"
+msgid "External player use software decoder for the AC3"
+msgstr "Применить внешний декодер AC3 для External player"
 
-#~ msgid "Sort movies: "
-#~ msgstr "Сортировать фильмы: "
+msgid "External player use software decoder for the EAC3"
+msgstr "Применить внешний декодер EAC3 для External player"
 
-#~ msgid "Sort results after:"
-#~ msgstr "Сортировать результаты после:"
+msgid "External player use software decoder for the MP3"
+msgstr "Применить внешний декодер MP3 для External player"
 
-#~ msgid "Sort search result by"
-#~ msgstr "Сортировать по результату поиска"
+msgid "By title"
+msgstr "По названию"
 
-#~ msgid "Sort xxxlist :"
-#~ msgstr "Сортировка xxxlist :"
+msgid "Dokumentalne"
+msgstr "Документальные"
 
-#~ msgid "Soul_mate"
-#~ msgstr "Родственная душа"
+msgid "Dla dzieci"
+msgstr "Для детей"
 
-#~ msgid "SovDub"
-#~ msgstr "Совесткий дубляж"
+msgid "The problem with user logon \"%s\"."
+msgstr "Проблема с входом пользователя \"%s\"."
 
-#~ msgid "Spain"
-#~ msgstr "Испания"
+msgid ""
+"Access to this service requires login.\n"
+"Please register on the site \"%s\" and then put your e-mail and password in the host configuration under blue button."
+msgstr ""
+"Для доступа к этой услуге требуется вход в систему.\n"
+"Пожалуйста, зарегистрируйтесь на сайте \"%s\", после чего введите свою электронную почту и пароль в конфигурацию хоста по голубой кнопке."
 
-#~ msgid "Sport"
-#~ msgstr "Спорт"
+msgid "Login mode"
+msgstr "Режим входа"
 
-#~ msgid "Status object [%r]"
-#~ msgstr "Статус объекта [%r]"
+msgid "Secure cookie name"
+msgstr "Безопасное имя файла cookie"
 
-#~ msgid "Straight from Polish"
-#~ msgstr "Прямо с Польского"
+msgid "Secure cookie value"
+msgstr "Безопасное значение cookie"
 
-#~ msgid "StreamLiveTo.tv"
-#~ msgstr "Прямой Поток для.ТВ"
+msgid "Name"
+msgstr "Имя"
 
-#~ msgid "Subscene.com"
-#~ msgstr "Subscene"
+msgid "This service requires a new Enigma2 image with a Python version %s or later."
+msgstr "Этот сервис требует нового имиджа enigma2 с версией Python %s или более поздней версией."
 
-#~ msgid "Subtitles downloaded successfully. [%s]"
-#~ msgstr "Субтитры загружены успешно. [%s]"
+msgid "Advance (cookie item)"
+msgstr "Авансовый (элемент cookie)"
 
-#~ msgid "Subtitles provider: %s"
-#~ msgstr "Провайдер субтитров: %s"
+msgid "Simple (e-mail, password)"
+msgstr "Простой (адрес электронной почты, пароль)"
 
-#~ msgid "Such as downloading and installation additional binaries"
-#~ msgstr "Таких, как загрузка и установка дополнительных модулей двоичного файла"
+msgid "iMPACT Wrestling"
+msgstr "борьба iMPACT"
 
-#~ msgid "Swiss"
-#~ msgstr "Швейцарский"
+msgid "Indy"
+msgstr "Инди"
 
-#~ msgid "Switzerland"
-#~ msgstr "Швейцария"
+msgid "Cinemamovies"
+msgstr "Фильмы в кинотеатрах"
 
-#~ msgid "Syria"
-#~ msgstr "Сирия"
+msgid "Najnowsze"
+msgstr "Последний"
 
-#~ msgid "TOP100 Month"
-#~ msgstr "Топ 100 Месяц"
+msgid "Popularność"
+msgstr "Популярность"
 
-#~ msgid "TOP100 Of the week"
-#~ msgstr "Топ 100 Недели"
+msgid "Najlepiej oceniane"
+msgstr "Лучшие по рейтингу"
 
-#~ msgid "TOP100 Week"
-#~ msgstr "TOP100 Неделю"
+msgid "Sortuj wyniki wyszukiwania po:"
+msgstr "Сортировать результаты поиска по:"
 
-#~ msgid "TOP100 of the Month"
-#~ msgstr "TOP100 месяца"
+msgid "Alfabetycznie"
+msgstr "По алфавиту"
 
-#~ msgid "TVN Introduce yourself as:"
-#~ msgstr "TVN Представьте себя:"
+msgid "Stacje Radiowe"
+msgstr "Радиостанции"
 
-#~ msgid "TVN use a proxy?"
-#~ msgstr "TVN использовать прокси-сервер?"
+msgid "Kanały Muzyczne"
+msgstr "Музыкальные каналы"
 
-#~ msgid "Tales"
-#~ msgstr "Россказни"
+msgid "Sety Muzyczne"
+msgstr "Sety Muzyczne"
 
-#~ msgid "Teletext decoder"
-#~ msgstr "Декодер телетекста"
+msgid "Radia RMFON"
+msgstr "Радио RMFON"
 
-#~ msgid "Testers: "
-#~ msgstr "Тестеры: "
+msgid "Radia ZET"
+msgstr "Радио ZET"
 
-#~ msgid "The Witcher"
-#~ msgstr "Ведьмак"
+msgid "Radia Lokalne"
+msgstr "Местное радио"
 
-#~ msgid "The best"
-#~ msgstr "Лучший"
+msgid "Wszystkie"
+msgstr "Все"
 
-#~ msgid "The current host crashed"
-#~ msgstr "Данный хост не работает"
+msgid "Nastroje"
+msgstr "Капризы"
 
-#~ msgid "The default video format"
-#~ msgstr "Формат видео по умолчанию"
+msgid "Programy onetu"
+msgstr "Программы Onet"
 
-#~ msgid "The default video format:"
-#~ msgstr "Формат видео по умолчанию:"
+msgid "Programy TV"
+msgstr "ТВ программы"
 
-#~ msgid "The default video quality:"
-#~ msgstr "Качество видео по умолчанию:"
+msgid "Brak nazwy"
+msgstr "Нет имени"
 
-#~ msgid "The most relevant"
-#~ msgstr "Наиболее актуальное"
+msgid ", odcinek "
+msgstr ", эпизод "
 
-#~ msgid "The problem with obtaining the gateway proxy!"
-#~ msgstr "Проблема с получением шлюза прокси!"
+msgid ", sezon "
+msgstr ", сезон "
 
-#~ msgid "The problem with the logged-in user \"%s. Check your login details in the host configuration.\""
-#~ msgstr "Проблема с авторизирацией пользователя \"%s. Проверьте свои регистрационные данные в конфигурации хоста.\""
+msgid " (planowany)"
+msgstr " (запланированные)"
 
-#~ msgid "The problem with the user's logon \"%s\". Check your login details in the host configuration."
-#~ msgstr "Проблема с входом пользователя \"%s\". Проверьте свои регистрационные данные в конфигурации хоста."
+msgid "Następna strona"
+msgstr "Следующая страница"
 
-#~ msgid "The problem with user logon \"%s\"."
-#~ msgstr "Проблема входа пользователя в систему \"%s\"."
+msgid "Używaj danych z pamięci podręcznej:"
+msgstr "Использовать данные кеша:"
 
-#~ msgid "The problem with user logon \"%s\".\n"
-#~ msgstr "Проблема с входом пользователя \"%s\".\n"
+msgid "Domyślny format video:"
+msgstr "Формат видео по умолчанию:"
 
-#~ msgid "The user Last.fm"
-#~ msgstr "Пользователь Last.fm"
+msgid "Używaj domyślnego format video:"
+msgstr "Используйте формат видео по умолчанию:"
 
-#~ msgid "The worst"
-#~ msgstr "Худший"
+#, python-format
+msgid "%s"
+msgstr "%s"
 
-#~ msgid ""
-#~ "There are no active premium account.\n"
-#~ "Using a limited version that may not work properly with congested links."
-#~ msgstr ""
-#~ "Там нет активных премиум аккаунтов.\n"
-#~ "Использовать ограниченную версию, которая не может работать должным образом с перегруженными ссылками."
+msgid "[en] External subtitles download - how to"
+msgstr "[en] Как скачать внешние субтитры"
 
-#~ msgid "There was an error Download."
-#~ msgstr "Была ошибка загрузки."
+msgid "[pl] External subtitles download - how to"
+msgstr "[pl] Как скачать внешние субтитры"
 
-#~ msgid ""
-#~ "There was an error Download. \n"
-#~ "Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
-#~ msgstr ""
-#~ "Была ошибка загрузки. \n"
-#~ "Статус[%s], tmpБуффРазмер[%r], может работать Gameplayer[%r]"
+msgid "[dash] "
+msgstr "[дефис] "
 
-#~ msgid "There was an error downloading."
-#~ msgstr "Ошибка при загрузке."
+msgid "You can try to use WebProxy as workaround, check options under blue button."
+msgstr "Вы можете попробовать использовать Веб-прокси в качестве обходного пути. Проверка параметров по синей кнопке."
 
-#~ msgid "This service requires a new Enigma2 image with a Python version %s or later."
-#~ msgstr "Этот сервис требует нового enigma2 изображения с версией Python %s или более поздней версией."
+msgid "--Wszystkie--"
+msgstr "-- Все --"
 
-#~ msgid "This site requires login. Please complete host configuration data."
-#~ msgstr "Этот сайт требует логин. Пожалуйста, заполните данные конфигурации хостов."
+msgid "You can disable HTTPS certificates validation in the IPTVPlayer configuration to suppress this problem."
+msgstr "Вы можете отключить проверку сертификатов HTTPS в конфигурации IPTVPlayer, чтобы устранить эту проблему."
 
-#~ msgid "Titlovi.com"
-#~ msgstr "Титлы"
+msgid "You can enable PyCurl in the IPTVPlayer configuration to fix this problem."
+msgstr "Вы можете включить PyCurl в конфигурации IPTVPlayer, чтобы устранить эту проблему."
 
-#~ msgid "Today, too many people are watching a movie with"
-#~ msgstr "Сегодня слишком много пользователей смотрят фильм с"
+msgid "Please report this problem to the developer iptvplayere2@gmail.com."
+msgstr "Сообщите об этой проблеме разработчику iptvplayere2@gmail.com."
 
-#~ msgid "Top Cartoons"
-#~ msgstr "Лучшие Мультики"
+msgid "You can install PyCurl package from http://www.iptvplayer.gitlab.io/ to fix this problem."
+msgstr "Пакет PyCurl можно установить с http://www.iptvplayer.gitlab.io/, чтобы устранить эту проблему."
 
-#~ msgid "Top Items (All time)"
-#~ msgstr "Лучшие товары (Все время)"
+#, python-format
+msgid "Użytkownika \"%s\" zalogowany poprawnie. Brak premium!"
+msgstr "Пользователь \"%s\" зарегистрирован правильно. Никакого премиума!"
 
-#~ msgid "Top Items (This Month)"
-#~ msgstr "Лучшие товары (Этот месяц)"
+#, python-format
+msgid "Problem z zalogowanie użytkownika \"%s\". Sprawdź dane do logowania w konfiguracji hosta."
+msgstr "Проблема с протоколированием пользователя \"%s\". Проверьте данные входа в конфигурацию хоста."
 
-#~ msgid "Top Items (This Week)"
-#~ msgstr "Лучшие товары (На этой неделе)"
+msgid "Login on https://1fichier.com/ failed."
+msgstr "Вход по https://1fichier.com/ не выполнен."
 
-#~ msgid "Top Items (Today)"
-#~ msgstr "Лучшие товары (Cегодня)"
+msgid "https://openload.co/ link extractor error."
+msgstr "Ошибка ошибка выделения канала https://openload.co/."
 
-#~ msgid "Topics"
-#~ msgstr "Темы"
+#, python-format
+msgid "Problem z zalogowanie użytkownika \"%s. Sprawdź dane do logowania w konfiguracji hosta.\""
+msgstr "Проблема с протоколированием пользователя \"%s. Проверьте данные для входа в конфигурацию хоста.\""
 
-#~ msgid "Topics films"
-#~ msgstr "Темы фильмов"
+#, python-format
+msgid "Could not find JS function %r"
+msgstr "Не удалось найти  JS-функцию %r"
 
-#~ msgid "Total Divas"
-#~ msgstr "Всего Примадонны"
+msgid "Preferred slanguage"
+msgstr "Предпочтительный язык"
 
-#~ msgid "Transgender"
-#~ msgstr "Трансгендер"
+#, python-format
+msgid ""
+"OpenSSL in your image has different library names then these used by IPTVPlayer.\n"
+"There is need to create following symlinks:\n"
+"%s\n"
+"to be able to install binary components from IPTVPlayer server.\n"
+"Do you want to proceed?"
+msgstr ""
+"OpenSSL на Вашем изображении имеет разные имена библиотек, а они используются IPTVPlayer.\n"
+"Необходимо создать следующие символические ссылки:\n"
+"%s\n"
+", чтобы иметь возможность устанавливать бинарные компоненты с сервера IPTVPlayer.\n"
+"Вы хотите продолжить?"
 
-#~ msgid "Treat episode as TV Show"
-#~ msgstr "Смотреть эпизод, как ТВ-шоу"
+msgid "Configure E2iPlayer"
+msgstr "Настройки E2iPlayer"
 
-#~ msgid "Try again for some time"
-#~ msgstr "Попробуйте еще раз в течение некоторого времени"
+msgid "Use black iframe at normal video playback finish"
+msgstr "Использовать черный iframe при нормальном воспроизведении видео"
 
-#~ msgid "Tunisia"
-#~ msgstr "Тунис"
+msgid "Create summary screen"
+msgstr "Создать итоговый экран"
 
-#~ msgid "Turkey"
-#~ msgstr "Турция"
+msgid "Please visit http://www.iptvplayer.gitlab.io/captcha.html to learn how to redirect this task to the external device."
+msgstr "Посетите http://www.iptvplayer.gitlab.io/captcha.html, чтобы узнать, как перенаправить эту задачу на внешнее устройство."
 
-#~ msgid "Türk"
-#~ msgstr "Турецкий"
+msgid "My JDownloader e-mail"
+msgstr "Моя электронная почта JDownloader"
 
-#~ msgid "UNKNOWN"
-#~ msgstr "НЕИЗВЕСТНЫЙ"
+msgid "My JDownloader password"
+msgstr "Мой пароль JDownloader"
 
-#~ msgid "UPDATE"
-#~ msgstr "ОБНОВИТЬ"
+msgid "My JDownloader device name"
+msgstr "Имя устройства JDownloader"
 
-#~ msgid "UPDATE MENU"
-#~ msgstr "МЕНЮ ОБНОВЛЕНИЕ"
+msgid "Info Banner clock format"
+msgstr "Формат инфобанера часов"
 
-#~ msgid "UPDATE-CHANGES"
-#~ msgstr "ОБНОВИТЬ-ИЗМЕНЕНИЯ"
+msgid "Info Banner timeout"
+msgstr "Время ожидания инфобанера"
 
-#~ msgid "UPDATE-NOW"
-#~ msgstr "ОБНОВИТЬ-СЕЙЧАС"
+msgid "    Allow suggestions"
+msgstr "    Разрешить предложения"
 
-#~ msgid "Ukraine"
-#~ msgstr "Украина"
+msgid "Such as downloading and installation additional binaries"
+msgstr "Таких, как загрузка и установка дополнительных бинарных модулей"
 
-#~ msgid "United Kingdom"
-#~ msgstr "Великобритания"
+msgid "Teletext decoder"
+msgstr "Декодер телетекста"
 
-#~ msgid "United States"
-#~ msgstr "Соединенные Штаты"
+msgid "Testers: "
+msgstr "Тестеры: "
 
-#~ msgid "Unknown protocol %s"
-#~ msgstr "Неизвестный протокол %s"
+msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player based on the ffmpeg and libeplayer."
+msgstr "Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера на основе FFmpeg и libeplayer."
 
-#~ msgid "Upcoming"
-#~ msgstr "Предстоящие"
+msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player."
+msgstr "Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера."
 
-#~ msgid "Update End. Please manual restart enigma2"
-#~ msgstr "Обновление Конец. Пожалуйста ручной перезапуск Enigma2"
+msgid "The current host crashed"
+msgstr "Данный хост не работает"
 
-#~ msgid "Update Now"
-#~ msgstr "Обновить сейчас"
+msgid "The default video quality:"
+msgstr "Качество видео по умолчанию:"
 
-#~ msgid "Update Now & Restart Enigma2"
-#~ msgstr "Обновить сейчас & Перезагрузить Enigma2"
+#, python-format
+msgid "The \"%s\" utility is used by the IPTVPlayer to buffering and downloading [%s] links."
+msgstr "Утилита \"%s\" используется IPTVPlayer-ом для кэширования и загрузки ссылок [%s]."
 
-#~ msgid "Update failed. Check the status by selectiong interesting and pressing ok."
-#~ msgstr "Обновление не удалось. Проверьте статус выбранного, нажмите кнопку ОК."
+#, python-format
+msgid "The \"%s\" utility is used by the IPTVPlayer to determine the encoding of the text."
+msgstr "Утилита \"%s\" используется IPTVPlayer-ом для определения кодировки текста."
 
-#~ msgid "Use German proxy for link request"
-#~ msgstr "Использовать Немецкий прокси для запроса ссылки"
+msgid "The problem with obtaining the gateway proxy!"
+msgstr "Проблема с получением шлюза прокси!"
 
-#~ msgid "Use Proxy?"
-#~ msgstr "Используй прокси?"
+msgid "The problem with the logged-in user \"%s\". Check your login details in the host configuration."
+msgstr "Проблема с авторизирацией пользователя \"%s\". Проверьте свои регистрационные данные в конфигурации хоста."
 
-#~ msgid "Use UA proxy server to get file lists"
-#~ msgstr "С помощью UA прокси-сервер, чтобы получить списки файлов"
+msgid "The problem with the user's logon \"%s\". Check your login details in the host configuration."
+msgstr "Проблема с входом пользователя \"%s\". Проверьте свои регистрационные данные в конфигурации хоста."
 
-#~ msgid "Use default quality:"
-#~ msgstr "Качество использования по умолчанию:"
+msgid "The user Last.fm"
+msgstr "Пользователь Last.fm"
 
-#~ msgid "Use default video quality"
-#~ msgstr "Использование качество видео по умолчанию"
+msgid ""
+"There are no active premium account.\n"
+"Using a limited version that may not work properly with congested links."
+msgstr ""
+"Нет активных премиум-аккаунтов.\n"
+"Использовать ограниченную версию, которая не может работать должным образом с перегруженными ссылками."
 
-#~ msgid "Use defauult qality:"
-#~ msgstr "Качество использования по умолчанию:"
+msgid "There was an error Download."
+msgstr "Была ошибка загрузки."
 
-#~ msgid "Use proxy gateway"
-#~ msgstr "Использовать прокси-шлюз"
+msgid ""
+"There was an error Download. \n"
+"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+msgstr ""
+"Была ошибка загрузки. \n"
+"Статус[%s], tmpБуффРазмер[%r], может работать Gameplayer[%r]"
 
-#~ msgid "Use ru proxy server to get file lists"
-#~ msgstr "Использовать прокси-сервер, чтобы получить списки файлов"
+msgid "There was an error downloading."
+msgstr "Ошибка при загрузке."
 
-#~ msgid "Use ru proxy server:"
-#~ msgstr "Использовать прокси-сервер ру:"
+msgid "This site requires login. Please complete host configuration data."
+msgstr "Этот сайт требует логин. Пожалуйста, заполните данные конфигурации хостов."
 
-#~ msgid "Use the default video format:"
-#~ msgstr "Используйте формат видео по умолчанию:"
+msgid "Today, too many people are watching a movie with"
+msgstr "Сегодня слишком много пользователей смотрят фильм с"
 
-#~ msgid "Use the default video quality:"
-#~ msgstr "Используйте качество видео по умолчанию:"
+msgid "Try again for some time"
+msgstr "Попробуйте снова через некоторое время"
 
-#~ msgid "User Last.fm"
-#~ msgstr "Пользователь Last.fm"
+msgid "Unknown protocol %s"
+msgstr "Неизвестный протокол %s"
 
-#~ msgid "User PREMIUM KinomanTV?"
-#~ msgstr "ПРЕМИУМ Пользователь KinomanTV?"
+msgid "Update failed. Check the status by selectiong interesting and pressing ok."
+msgstr "Обновление не удалось. Проверьте статус выбранного и нажмите кнопку ОК."
 
-#~ msgid "User Videos 3dEU?"
-#~ msgstr "Видео пользователя 3dEU?"
+msgid "Use German proxy for link request"
+msgstr "Использовать немецкий прокси для запроса ссылки"
 
-#, fuzzy
-#~ msgid "User login \"%s\" failed."
-#~ msgstr "Пользователь [%s] ошибка входа в систему."
+msgid "Use a proxy gateway"
+msgstr "Использовать прокси-шлюз"
 
-#~ msgid "User-Agent"
-#~ msgstr "Агент пользователя"
+msgid "Use defauult qality:"
+msgstr "Качество по умолчанию:"
 
-#~ msgid "Uses the default video quality:"
-#~ msgstr "Использовать качество видео по умолчанию:"
+msgid "Use ru proxy server:"
+msgstr "Использовать русский прокси-сервер:"
 
-#~ msgid "VIDEO"
-#~ msgstr "ВИДЕО"
+msgid "User Last.fm"
+msgstr "Пользователь Last.fm"
 
-#~ msgid "Very high"
-#~ msgstr "Очень высоко"
+msgid "User [%s] logon failure."
+msgstr "Ошибка входа в систему пользователя [%s]."
 
-#~ msgid "Very low"
-#~ msgstr "Очень низкий"
+msgid "Video buffer size [MB]"
+msgstr "Размер видеобуфера в [МБ]"
 
-#~ msgid "Video buffer size [MB]"
-#~ msgstr "Размер буфера видео в [MB]"
+msgid "WWE Main Event"
+msgstr "Главное событие WWE"
 
-#~ msgid "Video default quality:"
-#~ msgstr "Качество видео по умолчанию:"
+msgid "Watch video materials from IPTV services"
+msgstr "Просмотр видео из сервисов IPTV"
 
-#~ msgid "VietNam"
-#~ msgstr "Вьетнам"
+msgid "Web streams player"
+msgstr "Проигрываттель web-потоков"
 
-#~ msgid "WWE Main Event"
-#~ msgstr "WWE Главное событие"
+msgid "Webpages: "
+msgstr "Web-страница: "
 
-#~ msgid "WWE NETWORK"
-#~ msgstr "WWE СЕТЬ"
+msgid "Week"
+msgstr "Неделю"
 
-#~ msgid "Waiting room"
-#~ msgstr "Зал ожидания"
+msgid "Weekly"
+msgstr "Еженедельно"
 
-#~ msgid "Warehouse"
-#~ msgstr "Склад"
+msgid "Writer"
+msgstr "Автор"
 
-#~ msgid "Watch video materials from IPTV services"
-#~ msgstr "Просмотр сервисов IPTV"
+msgid "You can use Russian proxy server as a workaround."
+msgstr "Вы можете использовать российской прокси-сервер в качестве обходного пути."
 
-#~ msgid "Web streams player"
-#~ msgstr "Проигрывать Веб-потоки"
+msgid "You probably have not access to this page due to geolocation restriction."
+msgstr "Вы, наверное, не имеете доступ к этой странице в связи с географическим ограничением."
 
-#~ msgid "Webpages: "
-#~ msgstr "Веб-страница: "
+msgid "Your OpenSSL version is [%s]"
+msgstr "Ваша версия OpenSSL является [%s]"
 
-#~ msgid "Week"
-#~ msgstr "Неделю"
+msgid "Your platform is [%s]"
+msgstr "Ваша платформа [%s]"
 
-#~ msgid "Weekly"
-#~ msgstr "Еженедельно"
+msgid "Youtube player"
+msgstr "Youtube-плеер"
 
-#~ msgid "Windows Media Video 9 Screen decoder"
-#~ msgstr "Windows Медиа Видео 9 Экран декодер"
+msgid "Youtubes player"
+msgstr "Youtube-плеер"
 
-#~ msgid "Women"
-#~ msgstr "Женщины"
+msgid "[%s] will be used by IPTVPlayer."
+msgstr "[%s] будет использоваться IPTVPlayer."
 
-#~ msgid "Worse rating"
-#~ msgstr "Хуже рейтинг"
+msgid "[For download only] "
+msgstr "[Только загрузка] "
 
-#~ msgid "Worst"
-#~ msgstr "Наихудший"
+msgid "[group]"
+msgstr "[группа]"
 
-#~ msgid "WrestlingNet._listVideos - no markers [m1][m2] found!"
-#~ msgstr "WrestlingNet._listВидео - без маркеров [м1] [м2] найден!"
+msgid "active"
+msgstr "активный"
 
-#~ msgid "Writer"
-#~ msgstr "Автор"
+msgid "back_pressed prev sel index %s"
+msgstr "назад, к предыдущему индексу %s"
 
-#~ msgid "XXX"
-#~ msgstr "Видео Порно"
+msgid "based on IP"
+msgstr "на основе IP"
 
-#~ msgid "You can use Russian proxy server as a workaround."
-#~ msgstr "Вы можете использовать российской прокси-сервер в качестве обходного пути."
+msgid "buffer-duration"
+msgstr "время буферизации"
 
-#~ msgid "You do not have a premium account.Starting a sponsored broadcast."
-#~ msgstr "Вы не имеете премиум-аккаунта. Оплатите одну трансляцию."
+msgid "buffer-size"
+msgstr "размер буфера"
 
-#~ msgid "You probably have not access to this page due to geolocation restriction."
-#~ msgstr "Вы, наверное, не имеете доступ к этой странице в связи с ограничением геолокации."
+msgid "channel"
+msgstr "канал"
 
-#~ msgid "Your OpenSSL version is [%s]"
-#~ msgstr "Ваша версия OpenSSL является [%s]"
+msgid "console"
+msgstr "консоль"
 
-#~ msgid "Your platform is [%s]"
-#~ msgstr "Ваша платформа [%s]"
+msgid "cover"
+msgstr "обложка"
 
-#~ msgid "Yoursay"
-#~ msgstr "Ты говоришь"
+msgid "data"
+msgstr "данные"
 
-#~ msgid "Youtube player"
-#~ msgstr "Ютубе плеер"
+msgid "date added"
+msgstr "дата добавлена"
 
-#~ msgid "Youtube.com"
-#~ msgstr "Youtube"
+msgid "date-add"
+msgstr "добавление даты"
 
-#~ msgid "Youtubes player"
-#~ msgstr "Ютубе плеер"
+msgid "descending"
+msgstr "нисходящий"
 
-#~ msgid "[For download only] "
-#~ msgstr "Только Скачать "
+msgid "deutsch"
+msgstr "немецкий"
 
-#~ msgid "[Trailer]"
-#~ msgstr "[Трейлер]"
+msgid "download-buffer-path"
+msgstr "маршрут буфера загрузки"
 
-#~ msgid "[group]"
-#~ msgstr "[Группа]"
+msgid "downmix"
+msgstr "микширование"
 
-#~ msgid "active"
-#~ msgstr "Активный"
+msgid "english"
+msgstr "английский"
 
-#~ msgid "alltube.tv"
-#~ msgstr "Все tube.тв"
+msgid "espanol"
+msgstr "испанский"
 
-#~ msgid "ascending"
-#~ msgstr "Восходящий"
+msgid "favourtes"
+msgstr "избранное"
 
-#~ msgid "assessment"
-#~ msgstr "Оценка"
+msgid "free premium player."
+msgstr "свободный плеер."
 
-#~ msgid "back_pressed prev sel index %s"
-#~ msgstr "Назад к предыдущему индексу %s"
+msgid "good"
+msgstr "хороший"
 
-#~ msgid "based on IP"
-#~ msgstr "На основе IP"
+msgid "group"
+msgstr "группа"
 
-#~ msgid "bestfit"
-#~ msgstr "Оптимальное"
+msgid "headertext"
+msgstr "текст заголовка"
 
-#~ msgid "bitrate: 1800"
-#~ msgstr "Битрейт: 1800"
+msgid "Upcoming"
+msgstr "Предстоящие"
 
-#~ msgid "bitrate: 200p"
-#~ msgstr "Битрейт: 200p"
+msgid "Allow watched flag to be set (experimental)"
+msgstr "Разрешить просмотр установленного флага (экспериментальный)"
 
-#~ msgid "bitrate: 450p"
-#~ msgstr "Битрейт: 450p"
+msgid "The color of the watched item"
+msgstr "Цвет наблюдаемого элемента"
 
-#~ msgid "bitrate: the best"
-#~ msgstr "Битрейт: лучший"
+msgid "External movie player default aspect ratio:"
+msgstr "Дефолтное соотн. сторон видео для ext-плеера:"
 
-#~ msgid "boy"
-#~ msgstr "Мальчик"
+msgid "You can also install SNI patch for you python if available."
+msgstr "Вы также можете установить патч SNI для python, если он доступен."
 
-#~ msgid "buffer-size"
-#~ msgstr "Размер буфера"
+msgid "IPTVPlayer enable/disabled groups"
+msgstr "Включение/выключение групп IPTVPlayer"
 
-#~ msgid "channel"
-#~ msgstr "Канал"
+msgid "<font color=\"#FE642E\">REMEMBER:</font></b> IPTVPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
+msgstr "<font color=\"#FE642E\">ЗАПОМНИТЕ:</font></b> IPTVPlayer <b>ТОЛЬКО</b> специализированный веб-браузер. Он <b>НЕ</b> распространяет никакие материалы!</font>"
 
-#~ msgid "console"
-#~ msgstr "Консоль"
+msgid "You are using old version of OpenWebif.<br> To go to IPTVPlayer web Select the following link<br>"
+msgstr "Вы используете старую версию OpenWebif. <br> Перейти на веб-Выбор IPTVPlayer следующей ссылки<br>"
 
-#~ msgid "data"
-#~ msgstr "Данные"
+msgid "lector hd free "
+msgstr "бесплатный просмотр HD "
 
-#~ msgid "date added"
-#~ msgstr "Дата добавления"
+msgid "lector normal free "
+msgstr "бесплатный просмотр SD "
 
-#~ msgid "date-add"
-#~ msgstr "Дата-надстройки"
+msgid "live"
+msgstr "прямой"
 
-#~ msgid "decode error"
-#~ msgstr "ошибка декодирования"
+msgid "live transfers"
+msgstr "прямые потоки"
 
-#~ msgid "descending"
-#~ msgstr "Нисходящий"
+msgid "mobile"
+msgstr "мобильный"
 
-#~ msgid "deutsch"
-#~ msgstr "Немецкий"
+msgid "movie"
+msgstr "фильм"
 
-#~ msgid "download-buffer-path"
-#~ msgstr "Скачать-буфер путь"
+msgid "name"
+msgstr "название"
 
-#~ msgid "downmix"
-#~ msgstr "Микширование"
+msgid "number of views"
+msgstr "количество просмотров"
 
-#~ msgid "english"
-#~ msgstr "Английский"
+msgid "passthrough"
+msgstr "сквозной"
 
-#~ msgid "espanol"
-#~ msgstr "Испанский"
+msgid "picture link"
+msgstr "ссылка на фото"
 
-#~ msgid "favorite"
-#~ msgstr "Любимый"
+msgid "playerlogo"
+msgstr "логотип плеера"
 
-#~ msgid "favourites"
-#~ msgstr "Избранное"
+msgid "playlist"
+msgstr "плейлист"
 
-#~ msgid "favourtes"
-#~ msgstr "Избранное"
+msgid "polski"
+msgstr "польский"
 
-#~ msgid "file://"
-#~ msgstr "путь://"
+msgid "release date"
+msgstr "дата выхода"
 
-#~ msgid "format: 240p"
-#~ msgstr "Формат: 240p"
+msgid "ring-buffer-max-size"
+msgstr "максимум ring-буфера"
 
-#~ msgid "format: 360p"
-#~ msgstr "Формат: 360p"
+msgid "sequencer"
+msgstr "секвенсер"
 
-#~ msgid "format: 480p"
-#~ msgstr "Формат: 480p"
+msgid "statustext"
+msgstr "статус-текст"
 
-#~ msgid "format: 720"
-#~ msgstr "Формат: 720"
+msgid "the name"
+msgstr "имя"
 
-#~ msgid "format: best"
-#~ msgstr "Формат: лучший"
+msgid "video"
+msgstr "видео"
 
-#~ msgid "format: worst"
-#~ msgstr "Формат: наихудший"
+msgid "web-live.tv login:"
+msgstr "логин web-live.tv:"
 
-#~ msgid "free premium player."
-#~ msgstr "Бесплатно премиум плеер."
+msgid "web-live.tv password:"
+msgstr "пароль web-live.tv:"
 
-#~ msgid "good"
-#~ msgstr "Хороший"
+msgid "web-live.tv premium user?"
+msgstr "премиум пользователь web-live.tv?"
 
-#~ msgid "headertext"
-#~ msgstr "Текст заголовка"
+msgid "worst"
+msgstr "наихудшее"
 
-#~ msgid "http://fs.to/"
-#~ msgstr "FS.TO"
+msgid " File Not Found."
+msgstr " Файл не найден."
 
-#~ msgid "http://hdkinomir.com/"
-#~ msgstr "HDКиномир"
+msgid " Login Protected."
+msgstr " Логин защищен."
 
-#~ msgid "http://kinotan.ru/"
-#~ msgstr "Кинотан"
+msgid " This video is a private."
+msgstr " Это видео является частным."
 
-#~ msgid "http://online-kinopokaz.ru/"
-#~ msgstr "Кинопоказ"
+#, python-format
+msgid "%s uses \"geo-blocking\" measures to prevent you from accessing the services from outside the %s Territory."
+msgstr "%s использует \"геоблокирующие\" меры, чтобы предотвратить доступ к сервисам за пределами территории %s."
 
-#~ msgid "http://sovdub.ru/"
-#~ msgstr "Совесткий дубляж"
+#, python-format
+msgid "Count: %s"
+msgstr "Количество: %s"
 
-#~ msgid "http://tree.tv/"
-#~ msgstr "tree"
+#, python-format
+msgid "Popularity: %s"
+msgstr "Популярность: %s"
 
-#~ msgid "http://www.ex.ua/"
-#~ msgstr "EX.UA"
+#, python-format
+msgid "Source %s"
+msgstr "Источник %s"
 
-#~ msgid "json load error 2"
-#~ msgstr "Ошибка загрузки 2 json"
+msgid "Science"
+msgstr "Наука"
 
-#~ msgid "last added"
-#~ msgstr "Последние добавленные"
+msgid "Sport"
+msgstr "Спорт"
 
-#~ msgid "last watched"
-#~ msgstr "Последнее наблюдал"
+msgid "Documentary"
+msgstr "Документальное кино"
 
-#~ msgid "lector hd free "
-#~ msgstr "Просмотр HD бесплатно "
+msgid "Movies and series"
+msgstr "Фильмы и сериалы"
 
-#~ msgid "lector normal free "
-#~ msgstr "Просмотр SD бесплатно "
+msgid "Olympics"
+msgstr "Олимпийские игры"
 
-#~ msgid "live"
-#~ msgstr "Прямой"
+msgid "Cartoons and anime"
+msgstr "Мультфильмы и аниме"
 
-#~ msgid "live transfers"
-#~ msgstr "Прямые Потоки"
+msgid "User defined"
+msgstr "Пользовательские"
 
-#~ msgid "login:"
-#~ msgstr "Логин:"
+msgid "Balkans"
+msgstr "Балканские"
 
-#~ msgid "longest"
-#~ msgstr "Самый длинный"
+msgid "Greek"
+msgstr "Греческие"
 
-#~ msgid "mobile"
-#~ msgstr "Мобильный"
+msgid "Hungarian"
+msgstr "Венгерские"
 
-#~ msgid "most viewed"
-#~ msgstr "Наиболее просматриваемые"
+msgid "Latino"
+msgstr "Латиноамериканские"
 
-#~ msgid "movie"
-#~ msgstr "Фильм"
+msgid "Arabic"
+msgstr "Арабские"
 
-#~ msgid "movie4k.to"
-#~ msgstr "Кино4k.to"
+msgid "Add tags to XHAMSTER :"
+msgstr "Добавить теги в XHAMSTER:"
 
-#~ msgid "name"
-#~ msgstr "Название"
+msgid "Allow hls format"
+msgstr "Разрешить формат hls"
 
-#~ msgid "nasze-kino.eu"
-#~ msgstr "Наше-Кино.eu"
+msgid "Artists"
+msgstr "Артисты"
 
-#~ msgid "new"
-#~ msgstr "Новый"
+msgid "By release name"
+msgstr "По названию выпуска"
 
-#~ msgid "nocnyseans.pl"
-#~ msgstr "Ночной Сеанс.pl"
+msgid "Decrypt Server Name:"
+msgstr "Расшифровать имя сервера:"
 
-#~ msgid "number of views"
-#~ msgstr "Количество просмотров"
+msgid "Developer mode:"
+msgstr "Режим разработчика:"
 
-#~ msgid "only Anime"
-#~ msgstr "Только аниме"
+msgid "Display Xtream:"
+msgstr "Показать Xtream:"
 
-#~ msgid "only Cartoons"
-#~ msgstr "Только мультфильм"
+msgid "EgyBest Pass:"
+msgstr "Пароль EgyBest:"
 
-#~ msgid "panscan"
-#~ msgstr "Панорама"
+msgid "Events"
+msgstr "События"
 
-#~ msgid "passthrough"
-#~ msgstr "Нет"
+msgid "FILM ARCHIVE"
+msgstr "АРХИВНЫЙ ФИЛЬМ"
 
-#~ msgid "password:"
-#~ msgstr "Пароль:"
+msgid "Global search :"
+msgstr "Глобальный поиск:"
 
-#~ msgid "picture link"
-#~ msgstr "Фото ссылка"
+msgid "Global sort :"
+msgstr "Глобальная сортировка:"
 
-#~ msgid "playerlogo"
-#~ msgstr "Плеер логотип"
+msgid "HOME"
+msgstr "ГЛАВНАЯ"
 
-#~ msgid "playlist"
-#~ msgstr "Плейлист"
+msgid "Latest Added Movies"
+msgstr "Последние добавленные фильмы"
 
-#~ msgid "polski"
-#~ msgstr "Польский"
+msgid "Openload Resolver:"
+msgstr "Решение Openload:"
 
-#~ msgid "preferred streaming protocol"
-#~ msgstr "Предпочтительным протоколом потоковой"
+msgid "Path to xxxlist.txt :"
+msgstr "Путь к xxxlist.txt:"
 
-#~ msgid "random"
-#~ msgstr "Случайный"
+msgid "Playback UHD :"
+msgstr "Воспроизведение UHD:"
 
-#~ msgid "read error"
-#~ msgstr "ошибка чтения"
+msgid "Published"
+msgstr "Опубликовано"
 
-#~ msgid "ring-buffer-max-size"
-#~ msgstr "Максимальный размер буфера"
+msgid "Show Profiles in ZBIORNIK MINI :"
+msgstr "Показывать профили в минисборнике:"
 
-#~ msgid "self.getCurrentDirectory()"
-#~ msgstr "Самостоятельно.получить Текущий каталог()"
+msgid "Show changelog :"
+msgstr "Показать список изменений:"
 
-#~ msgid "sequencer"
-#~ msgstr "Секвенсор"
+msgid "Sort Myfreecams :"
+msgstr "Сортировать Myfreecams:"
 
-#~ msgid "sun sessions"
-#~ msgstr "Солнце сессии"
+msgid "Sort xxxlist :"
+msgstr "Сортировать xxxlist:"
 
-#~ msgid "the name"
-#~ msgstr "Имя"
+msgid "Star7 Live Pass:"
+msgstr "Пароль Star7 Live:"
 
-#~ msgid "top rated"
-#~ msgstr "Самые популярные"
+msgid "Star7 Live User:"
+msgstr "Логин Star7 Live:"
 
-#~ msgid "unzip error - please check if utitlity unzip is available"
-#~ msgstr "распакуйте ошибка - пожалуйста, проверьте, если утилита распакуйте доступна"
+msgid "TSMedia group Resolver:"
+msgstr "Решение TSMedia group:"
 
-#~ msgid "vapor"
-#~ msgstr "Пар"
+msgid "The preferred protocol:"
+msgstr "Предпочтительный протокол:"
 
-#~ msgid "video"
-#~ msgstr "Видео"
+msgid "Update Archive Type:"
+msgstr "Обновить тип архива:"
 
-#~ msgid "web-live.tv login:"
-#~ msgstr "web-live.tv Войти:"
+msgid "Xtream Host:"
+msgstr "Хост Xtream:"
 
-#~ msgid "web-live.tv password:"
-#~ msgstr "web-live.tv Пароль:"
+msgid "Xtream Pass:"
+msgstr "Пароль Xtream:"
 
-#~ msgid "web-live.tv premium user?"
-#~ msgstr "web-live.tv Премиум пользователь?"
+msgid "Xtream User Agent:"
+msgstr "Польз. агент Xtream:"
 
-#~ msgid "worst"
-#~ msgstr "Наихудший"
+msgid "Xtream User:"
+msgstr "Логин Xtream:"
 
-#~ msgid "write error"
-#~ msgstr "ошибка записи"
+msgid "YOURPORN Server :"
+msgstr "Сервер YOURPORN:"
 
-#~ msgid "xxxlist.txt"
-#~ msgstr "Файл-xxx.txt"
+msgid "Trending Feeds"
+msgstr "Каналы в тренде"
diff -ruN o/IPTVPlayer/plugin.py pc/IPTVPlayer/plugin.py
--- o/IPTVPlayer/plugin.py	2021-05-10 11:28:24.991355683 +0300
+++ pc/IPTVPlayer/plugin.py	2021-05-10 11:38:33.132795659 +0300
@@ -6,7 +6,6 @@
 from Plugins.Extensions.IPTVPlayer.components.iptvconfigmenu import ConfigMenu
 from Plugins.Extensions.IPTVPlayer.components.iptvpin import IPTVPinWidget
 from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, IPTVPlayerNeedInit
-from Plugins.Extensions.IPTVPlayer.setup.iptvsetupwidget import IPTVSetupMainWidget
 from Plugins.Extensions.IPTVPlayer.tools.iptvtools import IsExecutable, IsWebInterfaceModuleAvailable
 ###################################################
 
@@ -140,10 +139,6 @@
     f4mdumppath = IsExecutable(config.plugins.iptvplayer.f4mdumppath.value)
     platform = config.plugins.iptvplayer.plarform.value
     if platform in ["auto", "unknown"] or not wgetpath or not rtmpdumppath or not f4mdumppath:
-        session.openWithCallback(boundFunction(nextFunction, session), IPTVSetupMainWidget)
-    elif IPTVPlayerNeedInit():
-        session.openWithCallback(boundFunction(nextFunction, session), IPTVSetupMainWidget, True)
-    else:
         nextFunction(session)
 
 
diff -ruN o/IPTVPlayer/setup/iptvsetupimpl.py pc/IPTVPlayer/setup/iptvsetupimpl.py
--- o/IPTVPlayer/setup/iptvsetupimpl.py	2021-05-10 11:28:24.992355586 +0300
+++ pc/IPTVPlayer/setup/iptvsetupimpl.py	2021-05-10 11:43:52.202557880 +0300
@@ -487,7 +487,7 @@
                 return True, False
             else:
                 return False, True
-        self.workingObj = CCmdValidator(self.getFFmpegVerFinished, _verValidator, ['/iptvplayer_rootfs/usr/bin/ffmpeg -version', 'ffmpeg -version'])
+        self.workingObj = CCmdValidator(self.getFFmpegVerFinished, _verValidator, ['/usr/bin/ffmpeg -version', 'ffmpeg -version'])
         self.workingObj.start()
 
     def getFFmpegVerFinished(self, stsTab, dataTab):
diff -ruN o/IPTVPlayer/tools/iptvsubtitles.py pc/IPTVPlayer/tools/iptvsubtitles.py
--- o/IPTVPlayer/tools/iptvsubtitles.py	2021-05-10 11:28:24.994355392 +0300
+++ pc/IPTVPlayer/tools/iptvsubtitles.py	2021-05-10 11:38:33.132795659 +0300
@@ -373,5 +373,5 @@
 
 if __name__ == "__main__":
     obj = IPTVSubtitlesHandler()
-    obj.loadSubtitles('/hdd/_Back.To.The.Future[1985]DvDrip-aXXo.pl.srt')
+    obj.loadSubtitles('/media/hdd/_Back.To.The.Future[1985]DvDrip-aXXo.pl.srt')
     obj.getSubtitles(10000)
diff -ruN o/IPTVPlayer/tools/iptvtools.py pc/IPTVPlayer/tools/iptvtools.py
--- o/IPTVPlayer/tools/iptvtools.py	2021-05-10 11:28:24.994355392 +0300
+++ pc/IPTVPlayer/tools/iptvtools.py	2021-05-10 11:54:06.889021782 +0300
@@ -342,8 +342,8 @@
     baseName = resolveFilename(SCOPE_PLUGINS, 'Extensions/IPTVPlayer/scripts/') + name
     if fileExists(baseName + '.py'):
         baseName += '.py'
-    elif fileExists(baseName + '.pyo'):
-        baseName += '.pyo'
+    elif fileExists(baseName + '.pyc'):
+        baseName += '.pyc'
     if baseName != '':
         for item in ['python', 'python2.7', 'python2.6']:
             pyPath = Which(item)
@@ -464,8 +464,7 @@
 
 
 def GetE2iPlayerRootfsDir(file=''):
-    return '/iptvplayer_rootfs/' + file
-
+    return '/' + file
 
 def GetE2iPlayerVKLayoutDir(file=''):
     return GetE2iPlayerRootfsDir('etc/vk/' + file)
@@ -558,7 +557,7 @@
             if is_exe(program):
                 return program
         else:
-            pathTab = ['/iptvplayer_rootfs/bin', '/iptvplayer_rootfs/usr/bin', '/iptvplayer_rootfs/sbin', '/iptvplayer_rootfs/usr/sbin']
+            pathTab = ['/bin', '/usr/bin', '/sbin', '/usr/sbin']
             pathTab.extend(os.environ["PATH"].split(os.pathsep))
             for path in pathTab:
                 path = path.strip('"')
@@ -684,7 +683,7 @@
         print(DBGtxt)
     elif DBG == 'debugfile':
         try:
-            f = open('/hdd/iptv.dbg', 'a')
+            f = open('/media/hdd/iptv.dbg', 'a')
             f.write(DBGtxt + '\n')
             f.close
         except Exception:
@@ -1510,10 +1509,10 @@
 
 def IsBrokenDriver(filePath):
     # workaround for broken DVB driver mbtwinplus:
-    # root@mbtwinplus:~# cat /proc/stb/video/policy2
+    # root@mbtwinplus:~# cat /usr/local/e2/etc/stb/video/policy2
     # Segmentation fault
     try:
-        if 'video/policy' in filePath and not fileExists('/proc/stb/video/aspect_choices'):
+        if 'video/policy' in filePath and not fileExists('/usr/local/e2/etc/stb/video/aspect_choices'):
             with open('/etc/hostname', 'r') as f:
                 data = f.read().strip()
             if 'mbtwinplus' in data:
@@ -1557,7 +1556,7 @@
 
 
 def GetE2VideoAspectChoices():
-    tab = GetE2OptionsFromFile('/proc/stb/video/aspect_choices')
+    tab = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/aspect_choices')
     # workaround for some STB
     # reported here: https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues/30
     staticTab = ["4:3", "16:9", "any"]
@@ -1567,63 +1566,63 @@
 
 
 def GetE2VideoAspect():
-    options = GetE2OptionsFromFile('/proc/stb/video/aspect')
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/aspect')
     if 1 == len(options):
         return options[0]
     return None
 
 
 def SetE2VideoAspect(value):
-    return SetE2OptionByFile('/proc/stb/video/aspect', value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/video/aspect', value)
 
 
 def GetE2VideoPolicyChoices(num=''):
-    return GetE2OptionsFromFile('/proc/stb/video/policy%s_choices' % num)
+    return GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/policy%s_choices' % num)
 
 
 def GetE2VideoPolicy(num=''):
-    options = GetE2OptionsFromFile('/proc/stb/video/policy' + num)
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/policy' + num)
     if 1 == len(options):
         return options[0]
     return None
 
 
 def SetE2VideoPolicy(value, num=''):
-    return SetE2OptionByFile('/proc/stb/video/policy' + num, value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/video/policy' + num, value)
 
 
 def GetE2AudioCodecMixChoices(codec):
-    return GetE2OptionsFromFile('/proc/stb/audio/%s_choices' % codec)
+    return GetE2OptionsFromFile('/usr/local/e2/etc/stb/audio/%s_choices' % codec)
 
 
 def GetE2AudioCodecMixOption(codec):
-    options = GetE2OptionsFromFile('/proc/stb/audio/%s' % codec)
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/audio/%s' % codec)
     if 1 == len(options):
         return options[0]
     return None
 
 
 def SetE2AudioCodecMixOption(codec, value):
-    return SetE2OptionByFile('/proc/stb/audio/%s' % codec, value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/audio/%s' % codec, value)
 
 # videomode
 
 
 def GetE2VideoModeChoices():
     # return 'pal ntsc 480i 576i 480p 576p 720p50 720p 1080i50 1080i 1080p24 1080p25 1080p30 720p24 720p25 720p30 1080p50 1080p'.split(' ')
-    return GetE2OptionsFromFile('/proc/stb/video/videomode_choices')
+    return GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/videomode_choices')
 
 
 def GetE2VideoMode():
     # return '1080p50'
-    options = GetE2OptionsFromFile('/proc/stb/video/videomode')
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/videomode')
     if 1 == len(options):
         return options[0]
     return None
 
 
 def SetE2VideoMode(value):
-    return SetE2OptionByFile('/proc/stb/video/videomode', value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/video/videomode', value)
 
 
 def ReadUint16(tmp, le=True):
diff -ruN o/IPTVPlayer/Web/initiator.py pc/IPTVPlayer/Web/initiator.py
--- o/IPTVPlayer/Web/initiator.py	2021-05-10 11:28:24.942360446 +0300
+++ pc/IPTVPlayer/Web/initiator.py	2021-05-10 11:57:01.615351310 +0300
@@ -55,7 +55,7 @@
 	# Old openwebif version (prior July the 14th 2017) has a bug and does not populate links to all properly registered web addons except fancontrol
 	# see: https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/pull/629
 	#  A HACK: we will canibalize fancontrol entry point (if not installed) to present IPTVplayer option on the web
-	if checkForFC() == True and not os.path.exists(resolveFilename(SCOPE_PLUGINS, 'Extensions/FanControl2/FC2webSite.pyo')):
+	if checkForFC() == True and not os.path.exists(resolveFilename(SCOPE_PLUGINS, 'Extensions/FanControl2/FC2webSite.pyc')):
 		fcRoot = static.File(GetPluginDir('Web/'))
 		fcRoot.putChild("", redirectionPage())
 		try:
diff -ruN o/IPTVPlayer/Web/webSite.py pc/IPTVPlayer/Web/webSite.py
--- o/IPTVPlayer/Web/webSite.py	2021-05-10 11:28:24.942360446 +0300
+++ pc/IPTVPlayer/Web/webSite.py	2021-05-10 11:56:12.286662525 +0300
@@ -28,15 +28,15 @@
     #### Reload scripts if new version of source exists ####
     webPath = GetPluginDir(file='/Web/')
     if os.path.exists(os.path.join(webPath, "webParts.py")):
-        if os.path.exists(os.path.join(webPath, "webParts.pyo")):
-            if (int(os.path.getmtime(os.path.join(webPath, "webParts.pyo"))) <
+        if os.path.exists(os.path.join(webPath, "webParts.pyc")):
+            if (int(os.path.getmtime(os.path.join(webPath, "webParts.pyc"))) <
                 int(os.path.getmtime(os.path.join(webPath, "webParts.py")))):
                 reload(webParts)
         else:
             reload(webParts)
     if os.path.exists(os.path.join(webPath, "webThreads.py")):
-        if os.path.exists(os.path.join(webPath, "webThreads.pyo")):
-            if (int(os.path.getmtime(os.path.join(webPath, "webThreads.pyo"))) <
+        if os.path.exists(os.path.join(webPath, "webThreads.pyc")):
+            if (int(os.path.getmtime(os.path.join(webPath, "webThreads.pyc"))) <
                 int(os.path.getmtime(os.path.join(webPath, "webThreads.py")))):
                 reload(webThreads)
         else:
@@ -254,8 +254,8 @@
         MenuStatusMSG = ''
         extraMeta = ''
 
-        if os.path.exists('/hdd/iptv.dbg'):
-            DBGFileName = '/hdd/iptv.dbg'
+        if os.path.exists('/media/hdd/iptv.dbg'):
+            DBGFileName = '/media/hdd/iptv.dbg'
         elif os.path.exists('/tmp/iptv.dbg'):
             DBGFileName = '/tmp/iptv.dbg'
         else:
