diff -ruN o/plugin/controllers/ajax.py pc/plugin/controllers/ajax.py
--- o/plugin/controllers/ajax.py	2021-02-01 23:09:47.252530965 +0300
+++ pc/plugin/controllers/ajax.py	2021-02-01 23:08:42.143523268 +0300
@@ -177,7 +177,7 @@
 			box['brand'] = "iqon"
 		elif getMachineBrand() == 'Technomate':
 			box['brand'] = "techomate"
-		elif fileExists("/proc/stb/info/azmodel"):
+		elif fileExists("/usr/local/e2/etc/stb/info/azmodel"):
 			box['brand'] = "azbox"
 		return {"box": box}
 
diff -ruN o/plugin/controllers/base.py pc/plugin/controllers/base.py
--- o/plugin/controllers/base.py	2021-02-01 23:09:47.252530965 +0300
+++ pc/plugin/controllers/base.py	2021-02-01 23:08:42.144523268 +0300
@@ -117,9 +117,9 @@
 		request.finish()
 
 	def loadTemplate(self, path, module, args):
-		if fileExists(getViewsPath(path + ".py")) or fileExists(getViewsPath(path + ".pyo")):
-			if fileExists(getViewsPath(path + ".pyo")):
-				template = imp.load_compiled(module, getViewsPath(path + ".pyo"))
+		if fileExists(getViewsPath(path + ".py")) or fileExists(getViewsPath(path + ".pyc")):
+			if fileExists(getViewsPath(path + ".pyc")):
+				template = imp.load_compiled(module, getViewsPath(path + ".pyc"))
 			else:
 				template = imp.load_source(module, getViewsPath(path + ".py"))
 			mod = getattr(template, module, None)
@@ -325,9 +325,9 @@
 			if ip_list:
 				ip = "%d.%d.%d.%d" % (ip_list[0], ip_list[1], ip_list[2], ip_list[3])
 
-				if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/LCD4linux/WebSite.pyo")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/LCD4linux/WebSite.py")):
+				if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/LCD4linux/WebSite.pyc")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/LCD4linux/WebSite.py")):
 					lcd4linux_key = "lcd4linux/config"
-					if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/WebInterface/plugin.pyo")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/WebInterface/plugin.py")):
+					if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/WebInterface/plugin.pyc")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/WebInterface/plugin.py")):
 						try:
 							lcd4linux_port = "http://" + ip + ":" + str(config.plugins.Webinterface.http.port.value) + "/"
 							lcd4linux_key = lcd4linux_port + 'lcd4linux/config'
@@ -366,7 +366,7 @@
 		except ImportError:
 			pass
 
-		if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/bqe.tmpl")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/bqe.pyo")):
+		if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/bqe.tmpl")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/bqe.pyc")):
 			extras.append({'key': 'ajax/bqe', 'description': _('BouquetEditor')})
 
 		try:
@@ -407,7 +407,7 @@
 		except ImportError:
 			pass
 
-		if os.path.exists('/usr/bin/shellinaboxd') and (fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/terminal.tmpl")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/terminal.pyo"))):
+		if os.path.exists('/usr/bin/shellinaboxd') and (fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/terminal.tmpl")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/terminal.pyc"))):
 			extras.append({'key': 'ajax/terminal', 'description': _('Terminal')})
 
 		ret['extras'] = extras
diff -ruN o/plugin/controllers/base.py.orig pc/plugin/controllers/base.py.orig
--- o/plugin/controllers/base.py.orig	1970-01-01 03:00:00.000000000 +0300
+++ pc/plugin/controllers/base.py.orig	2021-02-01 23:06:46.516509599 +0300
@@ -0,0 +1,431 @@
+# -*- coding: utf-8 -*-
+
+##########################################################################
+# OpenWebif: BaseController
+##########################################################################
+# Copyright (C) 2011 - 2020 E2OpenPlugins
+#
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software Foundation,
+# Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+##########################################################################
+
+from __future__ import print_function
+import os
+import imp
+import json
+import six
+
+from twisted.web import server, http, resource
+from twisted.web.resource import EncodingResourceWrapper
+from twisted.web.server import GzipEncoderFactory
+from twisted.internet import defer
+from twisted.protocols.basic import FileSender
+
+from Plugins.Extensions.OpenWebif.controllers.i18n import _
+from Tools.Directories import fileExists, resolveFilename, SCOPE_PLUGINS
+from Cheetah.Template import Template
+from enigma import eEPGCache
+from Components.config import config
+from Components.Network import iNetwork
+
+from Plugins.Extensions.OpenWebif.controllers.models.info import getInfo
+from Plugins.Extensions.OpenWebif.controllers.models.config import getCollapsedMenus, getConfigsSections, getShowName, getCustomName, getBoxName
+from Plugins.Extensions.OpenWebif.controllers.defaults import getPublicPath, getViewsPath, EXT_EVENT_INFO_SOURCE, STB_LANG
+
+def new_getRequestHostname(self):
+	host = self.getHeader(b'host')
+	if host:
+		if host[0] == b'[':
+			host = host.split(b']', 1)[0] + b"]"
+		else:
+			host = host.split(b':', 1)[0]
+	else:
+		host = self.getHost().host
+	host = six.ensure_str(host).encode('ascii')
+	return six.ensure_str(host)
+
+
+http.Request.getRequestHostname = new_getRequestHostname
+
+REMOTE = ''
+
+try:
+	from boxbranding import getBoxType, getMachineName
+except:  # noqa: E722
+	from Plugins.Extensions.OpenWebif.controllers.models.owibranding import getBoxType, getMachineName  # noqa: F401
+
+try:
+	from Components.RcModel import rc_model
+	REMOTE = rc_model.getRcFolder() + "/remote"
+except:  # noqa: E722
+	from Plugins.Extensions.OpenWebif.controllers.models.owibranding import rc_model
+	REMOTE = rc_model().getRcFolder()
+
+
+class BaseController(resource.Resource):
+	"""
+	Web Base Controller
+	"""
+	isLeaf = False
+
+	def __init__(self, path="", **kwargs):
+		"""
+
+		Args:
+			* path: Base path
+			* session: (?) Session instance
+			* withMainTemplate: (?)
+			* isJson: responses shall be JSON encoded
+			* isCustom: (?)
+			* isGZ: responses shall be GZIP compressed
+			* isMobile: (?) responses shall be optimised for mobile devices
+			* isImage: (?) responses shall image
+		"""
+		resource.Resource.__init__(self)
+
+		self.path = six.ensure_str(path)
+		self.session = kwargs.get("session")
+		self.withMainTemplate = kwargs.get("withMainTemplate", False)
+		self.isJson = kwargs.get("isJson", False)
+		self.isCustom = kwargs.get("isCustom", False)
+		self.isGZ = kwargs.get("isGZ", False)
+		self.isMobile = kwargs.get("isMobile", False)
+		self.isImage = kwargs.get("isImage", False)
+
+	def error404(self, request):
+		"""
+		Perform HTTP Error 404
+
+		Args:
+			request (twisted.web.server.Request): HTTP request object
+
+		"""
+		request.setHeader("content-type", "text/html")
+		request.setResponseCode(http.NOT_FOUND)
+		request.write(b"<html><head><title>Open Webif</title></head><body><h1>Error 404: Page not found</h1><br />The requested URL was not found on this server.</body></html>")
+		request.finish()
+
+	def loadTemplate(self, path, module, args):
+		if fileExists(getViewsPath(path + ".py")) or fileExists(getViewsPath(path + ".pyo")):
+			if fileExists(getViewsPath(path + ".pyo")):
+				template = imp.load_compiled(module, getViewsPath(path + ".pyo"))
+			else:
+				template = imp.load_source(module, getViewsPath(path + ".py"))
+			mod = getattr(template, module, None)
+			if callable(mod):
+				return str(mod(searchList=args))
+		elif fileExists(getViewsPath(path + ".tmpl")):
+			vp = str(getViewsPath(path + ".tmpl"))
+			return str(Template(file=vp, searchList=[args]))
+		return None
+
+	def putChild2(self, path, child):
+		self.putChild(six.ensure_binary(path), child)
+
+	def putGZChild(self, path, child):
+		child.isGZ = True
+		self.putChild(six.ensure_binary(path), EncodingResourceWrapper(child, [GzipEncoderFactory()]))
+
+	def getChild(self, path, request):
+		if self.isGZ:
+			return EncodingResourceWrapper(self.__class__(self.session, path), [GzipEncoderFactory()])
+		else:
+			return self.__class__(self.session, path)
+
+	def NoDataRender(self):
+		return []
+
+	def noData(self, request):
+		return {}
+
+	def render(self, request):
+
+		@defer.inlineCallbacks
+		def _showImage(data):
+
+			@defer.inlineCallbacks
+			def _setContentDispositionAndSend(file_path):
+				filename = os.path.basename(file_path)
+				request.setHeader('content-disposition', 'filename="%s"' % filename)
+				request.setHeader('content-type', "image/png")
+				f = open(file_path, "rb")
+				yield FileSender().beginFileTransfer(f, request)
+				f.close()
+				defer.returnValue(0)
+
+			if os.path.exists(data):
+				yield _setContentDispositionAndSend(data)
+			else:
+				request.setResponseCode(http.NOT_FOUND)
+
+			request.finish()
+			defer.returnValue(0)
+
+		# cache data
+		withMainTemplate = self.withMainTemplate
+		path = self.path
+		isCustom = self.isCustom
+		isMobile = self.isMobile
+		isImage = self.isImage
+
+		if self.path == "":
+			self.path = "index"
+		elif self.path == "signal":
+			self.path = "tunersignal"
+			request.uri = request.uri.replace(b'signal', b'tunersignal')
+			request.path = request.path.replace(b'signal', b'tunersignal')
+
+		self.suppresslog = False
+		self.path = self.path.replace(".", "")
+		if request.path.startswith(b'/api/config'):
+			func = getattr(self, "P_config", None)
+		elif self.path in self.NoDataRender():
+			func = getattr(self, "noData", None)
+		else:
+			func = getattr(self, "P_" + self.path, None)
+
+		if callable(func):
+			request.setResponseCode(http.OK)
+
+			# call prePageLoad function if exist
+			plfunc = getattr(self, "prePageLoad", None)
+			if callable(plfunc):
+				plfunc(request)
+
+			data = func(request)
+			if data is None:
+				# if not self.suppresslog:
+					# print "[OpenWebif] page '%s' without content" % request.uri
+				self.error404(request)
+			elif self.isCustom:
+				# if not self.suppresslog:
+					# print "[OpenWebif] page '%s' ok (custom)" % request.uri
+				request.write(six.ensure_binary(data))
+				request.finish()
+			elif self.isImage:
+				_showImage(data)
+			elif self.isJson:
+				request.setHeader("content-type", "application/json; charset=utf-8")
+				try:
+					return six.ensure_binary(json.dumps(data, indent=1))
+				except Exception as exc:
+					request.setResponseCode(http.INTERNAL_SERVER_ERROR)
+					return six.ensure_binary(json.dumps({"result": False, "request": request.path, "exception": repr(exc)}))
+					pass
+			elif type(data) is str:
+				# if not self.suppresslog:
+					# print "[OpenWebif] page '%s' ok (simple string)" % request.uri
+				request.setHeader("content-type", "text/plain")
+				request.write(six.ensure_binary(data))
+				request.finish()
+			else:
+				# print "[OpenWebif] page '%s' ok (cheetah template)" % request.uri
+				module = six.ensure_text(request.path)
+				if module[-1:] == "/":
+					module += "index"
+				elif module[-5:] != "index" and self.path == "index":
+					module += "/index"
+				module = module.strip("/")
+				module = module.replace(".", "")
+				out = self.loadTemplate(module, self.path, data)
+				if out is None:
+					print("[OpenWebif] ERROR! Template not found for page '%s'" % request.uri)
+					self.error404(request)
+				else:
+					if self.isMobile:
+						head = self.loadTemplate('mobile/head', 'head', [])
+						out = head + out
+					elif self.withMainTemplate:
+						args = self.prepareMainTemplate(request)
+						args["content"] = out
+						nout = self.loadTemplate("main", "main", args)
+						if nout:
+							out = nout
+					elif self.isGZ:
+						return out
+					request.write(six.ensure_binary(out))
+					request.finish()
+
+		else:
+			print("[OpenWebif] page '%s' not found" % request.uri)
+			self.error404(request)
+
+		# restore cached data
+		self.withMainTemplate = withMainTemplate
+		self.path = path
+		self.isCustom = isCustom
+		self.isMobile = isMobile
+		self.isImage = isImage
+
+		return server.NOT_DONE_YET
+
+	def oscamconfPath(self):
+		# Find and parse running oscam
+		opath = None
+		owebif = False
+		oport = None
+		variant = "oscam"
+		for file in ["/tmp/.ncam/ncam.version", "/tmp/.oscam/oscam.version"]:
+			if fileExists(file):  # nosec
+				if "ncam" in file:
+					variant = "ncam"
+				else:
+					variant = "oscam"
+
+				conffile = file.split('/')[-1].replace("version", "conf")
+
+				data = open(file, "r").readlines()  # nosec
+				for i in data:
+					if "configdir:" in i.lower():
+						opath = i.split(":")[1].strip() + "/" + conffile
+						if not fileExists(opath):
+							opath = None
+					elif "web interface support:" in i.lower():
+						owebif = i.split(":")[1].strip()
+						if owebif == "yes":
+							owebif = True
+					elif "webifport:" in i.lower():
+						oport = i.split(":")[1].strip()
+						if oport == "0":
+							oport = None
+					else:
+						continue
+		return owebif, oport, opath, variant
+
+	def prepareMainTemplate(self, request):
+		# here will be generated the dictionary for the main template
+		ret = getCollapsedMenus()
+		ret['configsections'] = getConfigsSections()['sections']
+		ret['showname'] = getShowName()['showname']
+		ret['customname'] = getCustomName()['customname']
+		ret['boxname'] = getBoxName()['boxname']
+		if not ret['boxname'] or not ret['customname']:
+			ret['boxname'] = getInfo()['brand'] + " " + getInfo()['model']
+		ret['box'] = getBoxType()
+		ret["remote"] = REMOTE
+		if hasattr(eEPGCache, 'FULL_DESCRIPTION_SEARCH'):
+			ret['epgsearchcaps'] = True
+		else:
+			ret['epgsearchcaps'] = False
+		extras = [{'key': 'ajax/settings', 'description': _("Settings")}]
+		ifaces = iNetwork.getConfiguredAdapters()
+		if len(ifaces):
+			ip_list = iNetwork.getAdapterAttribute(ifaces[0], "ip")  # use only the first configured interface
+			if ip_list:
+				ip = "%d.%d.%d.%d" % (ip_list[0], ip_list[1], ip_list[2], ip_list[3])
+
+				if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/LCD4linux/WebSite.pyo")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/LCD4linux/WebSite.py")):
+					lcd4linux_key = "lcd4linux/config"
+					if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/WebInterface/plugin.pyo")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/WebInterface/plugin.py")):
+						try:
+							lcd4linux_port = "http://" + ip + ":" + str(config.plugins.Webinterface.http.port.value) + "/"
+							lcd4linux_key = lcd4linux_port + 'lcd4linux/config'
+						except:  # noqa: E722
+							lcd4linux_key = None
+					if lcd4linux_key:
+						extras.append({'key': lcd4linux_key, 'description': _("LCD4Linux Setup"), 'nw': '1'})
+
+		oscamwebif, port, oscamconf, variant = self.oscamconfPath()
+
+		# Assume http until we know better ...
+		proto = "http"
+
+		# config file exists
+		if oscamwebif and oscamconf is not None:
+			# oscam defaults to NOT to start the web interface unless a section for it exists, so reset port to None until we find one
+			port = None
+			data = open(oscamconf, "r").readlines()
+			for i in data:
+				if "httpport" in i.lower():
+					port = i.split("=")[1].strip()
+					if port[0] == '+':
+						proto = "https"
+						port = port[1:]
+
+		if oscamwebif and port is not None:
+			url = "%s://%s:%s" % (proto, request.getRequestHostname(), port)
+			if variant == "oscam":
+				extras.append({'key': url, 'description': _("OSCam Webinterface"), 'nw': '1'})
+			elif variant == "ncam":
+				extras.append({'key': url, 'description': _("NCam Webinterface"), 'nw': '1'})
+
+		try:
+			from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer  # noqa: F401
+			extras.append({'key': 'ajax/at', 'description': _('AutoTimer')})
+		except ImportError:
+			pass
+
+		if fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/bqe.tmpl")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/bqe.pyo")):
+			extras.append({'key': 'ajax/bqe', 'description': _('BouquetEditor')})
+
+		try:
+			from Plugins.Extensions.EPGRefresh.EPGRefresh import epgrefresh  # noqa: F401
+			extras.append({'key': 'ajax/epgr', 'description': _('EPGRefresh')})
+		except ImportError:
+			pass
+
+		try:
+			# this will currenly only works if NO Webiterface plugin installed
+			# TODO: test if webinterface AND openwebif installed
+
+			# 'nw'='1' -> target _blank
+			# 'nw'='2' -> target popup
+			# 'nw'=None -> target _self
+		
+			# syntax
+			# addExternalChild( (Link, Resource, Name, Version, HasGUI, WebTarget) )
+			# example addExternalChild( ("webadmin", root, "WebAdmin", 1, True, "_self") )
+
+			from Plugins.Extensions.WebInterface.WebChilds.Toplevel import loaded_plugins
+			for plugins in loaded_plugins:
+				if plugins[0] in ["fancontrol", "iptvplayer", "serienrecorderui"]:
+					try:
+						extras.append({'key': plugins[0], 'description': plugins[2], 'nw': '2'})
+					except KeyError:
+						pass
+				elif len(plugins) > 4:
+					if plugins[4] == True:
+						try:
+							if len(plugins) > 5 and plugins[5] == "_self":
+								extras.append({'key': plugins[0], 'description': plugins[2]})
+							else:
+								extras.append({'key': plugins[0], 'description': plugins[2], 'nw': '1'})
+						except KeyError:
+							pass
+
+		except ImportError:
+			pass
+
+		if os.path.exists('/usr/bin/shellinaboxd') and (fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/terminal.tmpl")) or fileExists(resolveFilename(SCOPE_PLUGINS, "Extensions/OpenWebif/controllers/views/ajax/terminal.pyo"))):
+			extras.append({'key': 'ajax/terminal', 'description': _('Terminal')})
+
+		ret['extras'] = extras
+		theme = 'original'
+		if config.OpenWebif.webcache.theme.value:
+			theme = config.OpenWebif.webcache.theme.value
+		if not os.path.exists(getPublicPath('themes')):
+			if not (theme == 'original' or theme == 'clear'):
+				theme = 'original'
+				config.OpenWebif.webcache.theme.value = theme
+				config.OpenWebif.webcache.theme.save()
+		ret['theme'] = theme
+		moviedb = config.OpenWebif.webcache.moviedb.value if config.OpenWebif.webcache.moviedb.value else EXT_EVENT_INFO_SOURCE
+		config.OpenWebif.webcache.moviedb.value = moviedb
+		config.OpenWebif.webcache.moviedb.save()
+		ret['moviedb'] = moviedb
+		imagedistro = getInfo()['imagedistro']
+		ret['vti'] = imagedistro in ("VTi-Team Image") and 1 or 0
+		ret['webtv'] = os.path.exists(getPublicPath('webtv'))
+		ret['stbLang'] = STB_LANG
+		return ret
diff -ruN o/plugin/controllers/defaults.py pc/plugin/controllers/defaults.py
--- o/plugin/controllers/defaults.py	2021-02-01 23:09:47.252530965 +0300
+++ pc/plugin/controllers/defaults.py	2021-02-01 23:08:42.144523268 +0300
@@ -27,10 +27,10 @@
 
 #: get transcoding feature
 def getTranscoding():
-	if os.path.isfile("/proc/stb/encoder/0/bitrate"):
+	if os.path.isfile("/usr/local/e2/etc/stb/encoder/0/bitrate"):
 		lp = eEnv.resolve('${libdir}/enigma2/python/Plugins/SystemPlugins/')
 		for p in ['TranscodingSetup', 'TransCodingSetup', 'MultiTransCodingSetup']:
-			if os.path.exists(lp + p + '/plugin.py') or os.path.exists(lp + p + '/plugin.pyo'):
+			if os.path.exists(lp + p + '/plugin.py') or os.path.exists(lp + p + '/plugin.pyc'):
 				return True
 	return False
 
diff -ruN o/plugin/controllers/models/control.py pc/plugin/controllers/models/control.py
--- o/plugin/controllers/models/control.py	2021-02-01 23:09:47.255530966 +0300
+++ pc/plugin/controllers/models/control.py	2021-02-01 23:08:42.145523268 +0300
@@ -29,7 +29,7 @@
 import NavigationInstance
 import os
 
-ENABLE_QPIP_PROCPATH = "/proc/stb/video/decodermode"
+ENABLE_QPIP_PROCPATH = "/usr/local/e2/etc/stb/video/decodermode"
 
 
 def checkIsQPiP():
diff -ruN o/plugin/controllers/models/info.py pc/plugin/controllers/models/info.py
--- o/plugin/controllers/models/info.py	2021-02-01 23:09:47.257530966 +0300
+++ pc/plugin/controllers/models/info.py	2021-02-01 23:08:42.145523268 +0300
@@ -232,7 +232,7 @@
 		elif model in ("topf", "tf7700hdpvr"):
 			chipset = "SH4 @266MHz"
 		elif model.startswith("azbox"):
-			f = open("/proc/stb/info/model", 'r')
+			f = open("/usr/local/e2/etc/stb/info/model", 'r')
 			model = f.readline().strip().lower()
 			f.close()
 			if model == "me":
@@ -246,8 +246,8 @@
 				chipset = "SH4 @540MHz"
 			else:
 				chipset = "SH4 @450MHz"
-	elif fileExists("/proc/stb/info/azmodel"):
-		f = open("/proc/stb/info/model", 'r')
+	elif fileExists("/usr/local/e2/etc/stb/info/azmodel"):
+		f = open("/usr/local/e2/etc/stb/info/model", 'r')
 		model = f.readline().strip().lower()
 		f.close()
 		if model == "me":
@@ -256,8 +256,8 @@
 			chipset = "SIGMA 8653"
 		else:
 			chipset = "SIGMA 8634"
-	elif fileExists("/proc/stb/info/model"):
-		f = open("/proc/stb/info/model", 'r')
+	elif fileExists("/usr/local/e2/etc/stb/info/model"):
+		f = open("/usr/local/e2/etc/stb/info/model", 'r')
 		model = f.readline().strip().lower()
 		f.close()
 		if model == "tf7700hdpvr":
@@ -298,8 +298,8 @@
 		elif model == "dm920":
 			chipset = "bcm7252S"
 
-	if fileExists("/proc/stb/info/chipset"):
-		f = open("/proc/stb/info/chipset", 'r')
+	if fileExists("/usr/local/e2/etc/stb/info/chipset"):
+		f = open("/usr/local/e2/etc/stb/info/chipset", 'r')
 		chipset = f.readline().strip()
 		f.close()
 
diff -ruN o/plugin/controllers/models/owibranding.py pc/plugin/controllers/models/owibranding.py
--- o/plugin/controllers/models/owibranding.py	2021-02-01 23:09:47.259530966 +0300
+++ pc/plugin/controllers/models/owibranding.py	2021-02-01 23:08:42.146523269 +0300
@@ -145,9 +145,9 @@
 	if tpmloaded:
 		orgdream = tpm_check()
 
-	if fileExists("/proc/stb/info/hwmodel"):
+	if fileExists("/usr/local/e2/etc/stb/info/hwmodel"):
 		brand = "DAGS"
-		f = open("/proc/stb/info/hwmodel", 'r')
+		f = open("/usr/local/e2/etc/stb/info/hwmodel", 'r')
 		procmodel = f.readline().strip()
 		f.close()
 		if (procmodel.startswith("optimuss") or procmodel.startswith("pingulux")):
@@ -175,15 +175,15 @@
 				model = procmodel.replace("lunix", "Lunix")
 			if procmodel == "lunix4k":
 				model = procmodel.replace("lunix4k", "Lunix4K")
-	elif fileExists("/proc/stb/info/azmodel"):
+	elif fileExists("/usr/local/e2/etc/stb/info/azmodel"):
 		brand = "AZBox"
-		f = open("/proc/stb/info/model", 'r')  # To-Do: Check if "model" is really correct ...
+		f = open("/usr/local/e2/etc/stb/info/model", 'r')  # To-Do: Check if "model" is really correct ...
 		procmodel = f.readline().strip()
 		f.close()
 		model = procmodel.lower()
-	elif fileExists("/proc/stb/info/gbmodel"):
+	elif fileExists("/usr/local/e2/etc/stb/info/gbmodel"):
 		brand = "GigaBlue"
-		f = open("/proc/stb/info/gbmodel", 'r')
+		f = open("/usr/local/e2/etc/stb/info/gbmodel", 'r')
 		procmodel = f.readline().strip()
 		f.close()
 		if procmodel == "GBQUAD PLUS":
@@ -198,9 +198,9 @@
 			model = procmodel.replace("ue4k", "UHD UE 4k")
 		elif procmodel == "gbtrio4k":
 			model = procmodel.replace("gbtrio4k", "UHD Trio 4k")
-	elif fileExists("/proc/stb/info/vumodel") and not fileExists("/proc/stb/info/boxtype"):
+	elif fileExists("/usr/local/e2/etc/stb/info/vumodel") and not fileExists("/usr/local/e2/etc/stb/info/boxtype"):
 		brand = "Vu+"
-		f = open("/proc/stb/info/vumodel", 'r')
+		f = open("/usr/local/e2/etc/stb/info/vumodel", 'r')
 		procmodel = f.readline().strip()
 		f.close()
 		model = procmodel.title().replace("olose", "olo SE").replace("olo2se", "olo2 SE").replace("2", "²").replace("4Kse", "4K SE")
@@ -226,10 +226,6 @@
 				model = "UHD 88"
 			else:
 				model = "ESI 88"
-	elif fileExists("/proc/stb/info/boxtype"):
-		f = open("/proc/stb/info/boxtype", 'r')
-		procmodel = f.readline().strip().lower()
-		f.close()
 		if procmodel.startswith("et"):
 			if procmodel == "et7000mini":
 				brand = "Galaxy Innovations"
@@ -478,7 +474,7 @@
 		elif procmodel.startswith("sf"):
 			brand = "Octagon"
 			if procmodel.startswith("sf8008"):
-				sf8008type = open("/proc/stb/info/type").read()
+				sf8008type = open("/usr/local/e2/etc/stb/info/type").read()
 				if sf8008type.startswith("11"):
 					procmodel = "sf8008t"
 					model = "SF8008 4K Twin"
@@ -501,8 +497,8 @@
 		else:
 			model = procmodel
 
-	elif fileExists("/proc/stb/info/model"):
-		f = open("/proc/stb/info/model", 'r')
+	elif fileExists("/usr/local/e2/etc/stb/info/model"):
+		f = open("/usr/local/e2/etc/stb/info/model", 'r')
 		procmodel = f.readline().strip().lower()
 		f.close()
 		if procmodel == "tf7700hdpvr":
diff -ruN o/plugin/controllers/models/services.py pc/plugin/controllers/models/services.py
--- o/plugin/controllers/models/services.py	2021-02-01 23:09:47.260530966 +0300
+++ pc/plugin/controllers/models/services.py	2021-02-01 23:08:42.146523269 +0300
@@ -22,6 +22,9 @@
 ##########################################################################
 
 from __future__ import print_function
+import sys
+reload(sys)
+sys.setdefaultencoding('utf8')
 import re
 import unicodedata
 import six
diff -ruN o/plugin/controllers/models/stream.py pc/plugin/controllers/models/stream.py
--- o/plugin/controllers/models/stream.py	2021-02-01 23:09:47.260530966 +0300
+++ pc/plugin/controllers/models/stream.py	2021-02-01 23:08:42.146523269 +0300
@@ -91,10 +91,10 @@
 		_port = getUrlArg(request, "port")
 		if _port != None:
 			portNumber = _port
-	elif fileExists("/dev/encoder0") or fileExists("/proc/stb/encoder/0/apply"):
+	elif fileExists("/dev/encoder0") or fileExists("/usr/local/e2/etc/stb/encoder/0/apply"):
 		transcoder_port = portNumber
 
-	if fileExists("/dev/bcm_enc0") or fileExists("/dev/encoder0") or fileExists("/proc/stb/encoder/0/apply"):
+	if fileExists("/dev/bcm_enc0") or fileExists("/dev/encoder0") or fileExists("/usr/local/e2/etc/stb/encoder/0/apply"):
 		if device == "phone":
 			try:
 				bitrate = config.plugins.transcodingsetup.bitrate.value
@@ -103,7 +103,7 @@
 				# framerate = config.plugins.transcodingsetup.framerate.value
 				aspectratio = config.plugins.transcodingsetup.aspectratio.value
 				interlaced = config.plugins.transcodingsetup.interlaced.value
-				if fileExists("/proc/stb/encoder/0/vcodec"):
+				if fileExists("/usr/local/e2/etc/stb/encoder/0/vcodec"):
 					vcodec = config.plugins.transcodingsetup.vcodec.value
 					args = "?bitrate=%s__width=%s__height=%s__vcodec=%s__aspectratio=%s__interlaced=%s" % (bitrate, width, height, vcodec, aspectratio, interlaced)
 				else:
@@ -188,7 +188,7 @@
 
 		device = getUrlArg(request, "device")
 		
-		if fileExists("/dev/bcm_enc0") or fileExists("/dev/encoder0") or fileExists("/proc/stb/encoder/0/apply"):
+		if fileExists("/dev/bcm_enc0") or fileExists("/dev/encoder0") or fileExists("/usr/local/e2/etc/stb/encoder/0/apply"):
 			try:
 				transcoder_port = int(config.plugins.transcodingsetup.port.value)
 			except Exception:
@@ -200,7 +200,7 @@
 			if _port != None:
 				portNumber = _port
 
-		if fileExists("/dev/bcm_enc0") or fileExists("/dev/encoder0") or fileExists("/proc/stb/encoder/0/apply"):
+		if fileExists("/dev/bcm_enc0") or fileExists("/dev/encoder0") or fileExists("/usr/local/e2/etc/stb/encoder/0/apply"):
 			if device == "phone":
 				try:
 					bitrate = config.plugins.transcodingsetup.bitrate.value
@@ -209,7 +209,7 @@
 					# framerate = config.plugins.transcodingsetup.framerate.value
 					aspectratio = config.plugins.transcodingsetup.aspectratio.value
 					interlaced = config.plugins.transcodingsetup.interlaced.value
-					if fileExists("/proc/stb/encoder/0/vcodec"):
+					if fileExists("/usr/local/e2/etc/stb/encoder/0/vcodec"):
 						vcodec = config.plugins.transcodingsetup.vcodec.value
 						args = "?bitrate=%s__width=%s__height=%s__vcodec=%s__aspectratio=%s__interlaced=%s" % (bitrate, width, height, vcodec, aspectratio, interlaced)
 					else:
diff -ruN o/testsuite/evil_eval.py pc/testsuite/evil_eval.py
--- o/testsuite/evil_eval.py	2021-02-01 23:09:47.412530984 +0300
+++ pc/testsuite/evil_eval.py	2021-02-01 23:08:42.146523269 +0300
@@ -9,7 +9,7 @@
 
     root@heart-of-gold:~# curl --noproxy localhost http://localhost/api/saveconfig --data "value=1&key=config.__class__.__name__ == 1 or (open('you lost your mind? according to my last psych EVALuation, yes', 'wb') and config or config)"
     root@heart-of-gold:~# ls $HOME/you*
-    /home/root/you lost your mind? according to my last psych EVALuation, yes
+    /home/hdd/you lost your mind? according to my last psych EVALuation, yes
 
     root@heart-of-gold:~# curl --noproxy localhost http://localhost/api/saveconfig --data "value=1&key=config.__class__ == 42 or (__import__('os').system('id > pwned') and config or config)"
     {"result": false}
diff -ruN o/testsuite/status_quo_file_controller.py pc/testsuite/status_quo_file_controller.py
--- o/testsuite/status_quo_file_controller.py	2021-02-01 23:09:47.412530984 +0300
+++ pc/testsuite/status_quo_file_controller.py	2021-02-01 23:08:42.146523269 +0300
@@ -71,7 +71,7 @@
 		}
 		req = requests.get(self.file_url, params=params)
 		print("Tried to fetch {!r}".format(req.url))
-		self.assertEqual("File '/home/root/{:s}' not found".format(randy),
+		self.assertEqual("File '/home/hdd/{:s}' not found".format(randy),
 						  req.text)
 		self.assertEqual(200, req.status_code)
 
